<Shader>
	<Context id="AMBIENT">
		<RenderConfig writeDepth="false" blendMode="REPLACE" />
		
		<VertexShader>
			<DefCode>
			<![CDATA[
				varying vec2 texCoord;
				
				void main( void )
				{
					texCoord = gl_MultiTexCoord0.st;
					gl_Position = gl_ProjectionMatrix * gl_Vertex;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<InsCode code="utilityLib/fragDeferred.glsl" />
			<DefCode>
			<![CDATA[
				varying vec2 texCoord;
				
				void main( void )
				{
					if( getMatID( texCoord ) == 2.0 )	// Special material: Sky
					{
						gl_FragColor.rgb = getAlbedo( texCoord );
					}
					else gl_FragColor.rgb = vec3( 0, 0, 0 );
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
	
	
	<Context id="LIGHTING">
		<RenderConfig writeDepth="false" blendMode="ADD" />
		
		<VertexShader>
			<DefCode>
			<![CDATA[
				varying vec2 texCoord;
				
				void main( void )
				{
					texCoord = gl_MultiTexCoord0.st;
					gl_Position = gl_ProjectionMatrix * gl_Vertex;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<InsCode code="utilityLib/fragLighting.glsl" />
			<InsCode code="utilityLib/fragDeferred.glsl" />
			<DefCode>
			<![CDATA[
				varying vec2 texCoord;
				
				void main( void )
				{
					if( getMatID( texCoord ) == 1.0 )	// Standard phong material
					{
						float vsPos = (gl_ModelViewMatrix * vec4( getPos( texCoord ), 1.0 )).z;
						
						gl_FragColor.rgb =
							calcPhongSpotLight( getPos( texCoord ), getNormal( texCoord ),
												getAlbedo( texCoord ), getSpecMask( texCoord ), -vsPos );
					}
					else discard;
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
</Shader>