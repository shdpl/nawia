/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module BTPhysics;

static import BTPhysics_im;

static import std.conv;
static import std.string;


int BT_BULLET_VERSION() @property {
  auto ret = BTPhysics_im.BT_BULLET_VERSION_get();
  return ret;
}

int btGetVersion() {
  auto ret = BTPhysics_im.btGetVersion();
  return ret;
}

double BT_LARGE_FLOAT() @property {
  auto ret = BTPhysics_im.BT_LARGE_FLOAT_get();
  return ret;
}

float btSqrt(float y) {
  auto ret = BTPhysics_im.btSqrt(y);
  return ret;
}

float btFabs(float x) {
  auto ret = BTPhysics_im.btFabs(x);
  return ret;
}

float btCos(float x) {
  auto ret = BTPhysics_im.btCos(x);
  return ret;
}

float btSin(float x) {
  auto ret = BTPhysics_im.btSin(x);
  return ret;
}

float btTan(float x) {
  auto ret = BTPhysics_im.btTan(x);
  return ret;
}

float btAcos(float x) {
  auto ret = BTPhysics_im.btAcos(x);
  return ret;
}

float btAsin(float x) {
  auto ret = BTPhysics_im.btAsin(x);
  return ret;
}

float btAtan(float x) {
  auto ret = BTPhysics_im.btAtan(x);
  return ret;
}

float btAtan2(float x, float y) {
  auto ret = BTPhysics_im.btAtan2(x, y);
  return ret;
}

float btExp(float x) {
  auto ret = BTPhysics_im.btExp(x);
  return ret;
}

float btLog(float x) {
  auto ret = BTPhysics_im.btLog(x);
  return ret;
}

float btPow(float x, float y) {
  auto ret = BTPhysics_im.btPow(x, y);
  return ret;
}

float btFmod(float x, float y) {
  auto ret = BTPhysics_im.btFmod(x, y);
  return ret;
}

float btAtan2Fast(float y, float x) {
  auto ret = BTPhysics_im.btAtan2Fast(y, x);
  return ret;
}

bool btFuzzyZero(float x) {
  bool ret = BTPhysics_im.btFuzzyZero(x) ? true : false;
  return ret;
}

bool btEqual(float a, float eps) {
  bool ret = BTPhysics_im.btEqual(a, eps) ? true : false;
  return ret;
}

bool btGreaterEqual(float a, float eps) {
  bool ret = BTPhysics_im.btGreaterEqual(a, eps) ? true : false;
  return ret;
}

int btIsNegative(float x) {
  auto ret = BTPhysics_im.btIsNegative(x);
  return ret;
}

float btRadians(float x) {
  auto ret = BTPhysics_im.btRadians(x);
  return ret;
}

float btDegrees(float x) {
  auto ret = BTPhysics_im.btDegrees(x);
  return ret;
}

float btFsel(float a, float b, float c) {
  auto ret = BTPhysics_im.btFsel(a, b, c);
  return ret;
}

bool btMachineIsLittleEndian() {
  bool ret = BTPhysics_im.btMachineIsLittleEndian() ? true : false;
  return ret;
}

uint btSelect(uint condition, uint valueIfConditionNonZero, uint valueIfConditionZero) {
  auto ret = BTPhysics_im.btSelect__SWIG_0(condition, valueIfConditionNonZero, valueIfConditionZero);
  return ret;
}

int btSelect(uint condition, int valueIfConditionNonZero, int valueIfConditionZero) {
  auto ret = BTPhysics_im.btSelect__SWIG_1(condition, valueIfConditionNonZero, valueIfConditionZero);
  return ret;
}

float btSelect(uint condition, float valueIfConditionNonZero, float valueIfConditionZero) {
  auto ret = BTPhysics_im.btSelect__SWIG_2(condition, valueIfConditionNonZero, valueIfConditionZero);
  return ret;
}

uint btSwapEndian(uint val) {
  auto ret = BTPhysics_im.btSwapEndian__SWIG_0(val);
  return ret;
}

ushort btSwapEndian(ushort val) {
  auto ret = BTPhysics_im.btSwapEndian__SWIG_1(val);
  return ret;
}

uint btSwapEndian(int val) {
  auto ret = BTPhysics_im.btSwapEndian__SWIG_2(val);
  return ret;
}

ushort btSwapEndian(short val) {
  auto ret = BTPhysics_im.btSwapEndian__SWIG_3(val);
  return ret;
}

uint btSwapEndianFloat(float d) {
  auto ret = BTPhysics_im.btSwapEndianFloat(d);
  return ret;
}

float btUnswapEndianFloat(uint a) {
  auto ret = BTPhysics_im.btUnswapEndianFloat(a);
  return ret;
}

void btSwapEndianDouble(double d, ubyte* dst) {
  BTPhysics_im.btSwapEndianDouble(d, cast(void*)dst);
}

double btUnswapEndianDouble(ubyte* src) {
  auto ret = BTPhysics_im.btUnswapEndianDouble(cast(void*)src);
  return ret;
}

float btNormalizeAngle(float angleInRadians) {
  auto ret = BTPhysics_im.btNormalizeAngle(angleInRadians);
  return ret;
}

class btTypedObject {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btTypedObject obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btTypedObject(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(int objectType) {
    this(BTPhysics_im.new_btTypedObject(objectType), true);
  }

  public void m_objectType(int value) @property {
    BTPhysics_im.btTypedObject_m_objectType_set(cast(void*)swigCPtr, value);
  }

  public int m_objectType() @property const {
    auto ret = BTPhysics_im.btTypedObject_m_objectType_get(cast(void*)swigCPtr);
    return ret;
  }

  public int getObjectType() const {
    auto ret = BTPhysics_im.btTypedObject_getObjectType(cast(void*)swigCPtr);
    return ret;
  }
}

string btVector3DataName() @property {
  string ret = std.conv.to!string(BTPhysics_im.btVector3DataName_get());
  return ret;
}

class btVector3 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btVector3 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btVector3(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_floats(SWIGTYPE_p_float value) @property {
    BTPhysics_im.btVector3_m_floats_set(cast(void*)swigCPtr, SWIGTYPE_p_float.swigGetCPtr(value));
  }

  public SWIGTYPE_p_float m_floats() @property const {
    void* cPtr = BTPhysics_im.btVector3_m_floats_get(cast(void*)swigCPtr);
    SWIGTYPE_p_float ret = (cPtr is null) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btVector3__SWIG_0(), true);
  }

  public this(float x, float y, float z) {
    this(BTPhysics_im.new_btVector3__SWIG_1(x, y, z), true);
  }

  public btVector3 swigOpAddAssign(btVector3 v) {
    btVector3 ret = new btVector3(BTPhysics_im.btVector3_swigOpAddAssign(cast(void*)swigCPtr, btVector3.swigGetCPtr(v)), false);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btVector3 swigOpSubAssign(btVector3 v) {
    btVector3 ret = new btVector3(BTPhysics_im.btVector3_swigOpSubAssign(cast(void*)swigCPtr, btVector3.swigGetCPtr(v)), false);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btVector3 swigOpMulAssign(float s) {
    btVector3 ret = new btVector3(BTPhysics_im.btVector3_swigOpMulAssign__SWIG_0(cast(void*)swigCPtr, s), false);
    return ret;
  }

  public btVector3 swigOpDivAssign(float s) {
    btVector3 ret = new btVector3(BTPhysics_im.btVector3_swigOpDivAssign(cast(void*)swigCPtr, s), false);
    return ret;
  }

  public float dot(btVector3 v) const {
    auto ret = BTPhysics_im.btVector3_dot(cast(void*)swigCPtr, btVector3.swigGetCPtr(v));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public float length2() const {
    auto ret = BTPhysics_im.btVector3_length2(cast(void*)swigCPtr);
    return ret;
  }

  public float length() const {
    auto ret = BTPhysics_im.btVector3_length(cast(void*)swigCPtr);
    return ret;
  }

  public float distance2(btVector3 v) const {
    auto ret = BTPhysics_im.btVector3_distance2(cast(void*)swigCPtr, btVector3.swigGetCPtr(v));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public float distance(btVector3 v) const {
    auto ret = BTPhysics_im.btVector3_distance(cast(void*)swigCPtr, btVector3.swigGetCPtr(v));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btVector3 safeNormalize() {
    btVector3 ret = new btVector3(BTPhysics_im.btVector3_safeNormalize(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 normalize() {
    btVector3 ret = new btVector3(BTPhysics_im.btVector3_normalize(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 normalized() const {
    btVector3 ret = new btVector3(BTPhysics_im.btVector3_normalized(cast(void*)swigCPtr), true);
    return ret;
  }

  public btVector3 rotate(btVector3 wAxis, float angle) const {
    btVector3 ret = new btVector3(BTPhysics_im.btVector3_rotate(cast(void*)swigCPtr, btVector3.swigGetCPtr(wAxis), angle), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public float angle(btVector3 v) const {
    auto ret = BTPhysics_im.btVector3_angle(cast(void*)swigCPtr, btVector3.swigGetCPtr(v));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btVector3 absolute() const {
    btVector3 ret = new btVector3(BTPhysics_im.btVector3_absolute(cast(void*)swigCPtr), true);
    return ret;
  }

  public btVector3 cross(btVector3 v) const {
    btVector3 ret = new btVector3(BTPhysics_im.btVector3_cross(cast(void*)swigCPtr, btVector3.swigGetCPtr(v)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public float triple(btVector3 v1, btVector3 v2) const {
    auto ret = BTPhysics_im.btVector3_triple(cast(void*)swigCPtr, btVector3.swigGetCPtr(v1), btVector3.swigGetCPtr(v2));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public int minAxis() const {
    auto ret = BTPhysics_im.btVector3_minAxis(cast(void*)swigCPtr);
    return ret;
  }

  public int maxAxis() const {
    auto ret = BTPhysics_im.btVector3_maxAxis(cast(void*)swigCPtr);
    return ret;
  }

  public int furthestAxis() const {
    auto ret = BTPhysics_im.btVector3_furthestAxis(cast(void*)swigCPtr);
    return ret;
  }

  public int closestAxis() const {
    auto ret = BTPhysics_im.btVector3_closestAxis(cast(void*)swigCPtr);
    return ret;
  }

  public void setInterpolate3(btVector3 v0, btVector3 v1, float rt) {
    BTPhysics_im.btVector3_setInterpolate3(cast(void*)swigCPtr, btVector3.swigGetCPtr(v0), btVector3.swigGetCPtr(v1), rt);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 lerp(btVector3 v, float t) const {
    btVector3 ret = new btVector3(BTPhysics_im.btVector3_lerp(cast(void*)swigCPtr, btVector3.swigGetCPtr(v), t), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btVector3 swigOpMulAssign(btVector3 v) {
    btVector3 ret = new btVector3(BTPhysics_im.btVector3_swigOpMulAssign__SWIG_1(cast(void*)swigCPtr, btVector3.swigGetCPtr(v)), false);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public float getX() const {
    auto ret = BTPhysics_im.btVector3_getX(cast(void*)swigCPtr);
    return ret;
  }

  public float getY() const {
    auto ret = BTPhysics_im.btVector3_getY(cast(void*)swigCPtr);
    return ret;
  }

  public float getZ() const {
    auto ret = BTPhysics_im.btVector3_getZ(cast(void*)swigCPtr);
    return ret;
  }

  public void setX(float x) {
    BTPhysics_im.btVector3_setX(cast(void*)swigCPtr, x);
  }

  public void setY(float y) {
    BTPhysics_im.btVector3_setY(cast(void*)swigCPtr, y);
  }

  public void setZ(float z) {
    BTPhysics_im.btVector3_setZ(cast(void*)swigCPtr, z);
  }

  public void setW(float w) {
    BTPhysics_im.btVector3_setW(cast(void*)swigCPtr, w);
  }

  public float x() const {
    auto ret = BTPhysics_im.btVector3_x(cast(void*)swigCPtr);
    return ret;
  }

  public float y() const {
    auto ret = BTPhysics_im.btVector3_y(cast(void*)swigCPtr);
    return ret;
  }

  public float z() const {
    auto ret = BTPhysics_im.btVector3_z(cast(void*)swigCPtr);
    return ret;
  }

  public float w() const {
    auto ret = BTPhysics_im.btVector3_w(cast(void*)swigCPtr);
    return ret;
  }

  public bool swigOpEquals(btVector3 other) const {
    bool ret = BTPhysics_im.btVector3_swigOpEquals(cast(void*)swigCPtr, btVector3.swigGetCPtr(other)) ? true : false;
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setMax(btVector3 other) {
    BTPhysics_im.btVector3_setMax(cast(void*)swigCPtr, btVector3.swigGetCPtr(other));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setMin(btVector3 other) {
    BTPhysics_im.btVector3_setMin(cast(void*)swigCPtr, btVector3.swigGetCPtr(other));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setValue(float x, float y, float z) {
    BTPhysics_im.btVector3_setValue(cast(void*)swigCPtr, x, y, z);
  }

  public void getSkewSymmetricMatrix(btVector3 v0, btVector3 v1, btVector3 v2) const {
    BTPhysics_im.btVector3_getSkewSymmetricMatrix(cast(void*)swigCPtr, btVector3.swigGetCPtr(v0), btVector3.swigGetCPtr(v1), btVector3.swigGetCPtr(v2));
  }

  public void setZero() {
    BTPhysics_im.btVector3_setZero(cast(void*)swigCPtr);
  }

  public bool isZero() const {
    bool ret = BTPhysics_im.btVector3_isZero(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool fuzzyZero() const {
    bool ret = BTPhysics_im.btVector3_fuzzyZero(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void serialize(btVector3FloatData dataOut) const {
    BTPhysics_im.btVector3_serialize(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(dataOut));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void deSerialize(btVector3FloatData dataIn) {
    BTPhysics_im.btVector3_deSerialize(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(dataIn));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void serializeFloat(btVector3FloatData dataOut) const {
    BTPhysics_im.btVector3_serializeFloat(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(dataOut));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void deSerializeFloat(btVector3FloatData dataIn) {
    BTPhysics_im.btVector3_deSerializeFloat(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(dataIn));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void serializeDouble(btVector3DoubleData dataOut) const {
    BTPhysics_im.btVector3_serializeDouble(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(dataOut));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void deSerializeDouble(btVector3DoubleData dataIn) {
    BTPhysics_im.btVector3_deSerializeDouble(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(dataIn));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

float btDot(btVector3 v1, btVector3 v2) {
  auto ret = BTPhysics_im.btDot(btVector3.swigGetCPtr(v1), btVector3.swigGetCPtr(v2));
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

float btDistance2(btVector3 v1, btVector3 v2) {
  auto ret = BTPhysics_im.btDistance2(btVector3.swigGetCPtr(v1), btVector3.swigGetCPtr(v2));
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

float btDistance(btVector3 v1, btVector3 v2) {
  auto ret = BTPhysics_im.btDistance(btVector3.swigGetCPtr(v1), btVector3.swigGetCPtr(v2));
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

float btAngle(btVector3 v1, btVector3 v2) {
  auto ret = BTPhysics_im.btAngle(btVector3.swigGetCPtr(v1), btVector3.swigGetCPtr(v2));
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

btVector3 btCross(btVector3 v1, btVector3 v2) {
  btVector3 ret = new btVector3(BTPhysics_im.btCross(btVector3.swigGetCPtr(v1), btVector3.swigGetCPtr(v2)), true);
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

float btTriple(btVector3 v1, btVector3 v2, btVector3 v3) {
  auto ret = BTPhysics_im.btTriple(btVector3.swigGetCPtr(v1), btVector3.swigGetCPtr(v2), btVector3.swigGetCPtr(v3));
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

btVector3 lerp(btVector3 v1, btVector3 v2, float t) {
  btVector3 ret = new btVector3(BTPhysics_im.lerp(btVector3.swigGetCPtr(v1), btVector3.swigGetCPtr(v2), t), true);
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

class btVector4 : btVector3 {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btVector4_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btVector4 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btVector4(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(BTPhysics_im.new_btVector4__SWIG_0(), true);
  }

  public this(float x, float y, float z, float w) {
    this(BTPhysics_im.new_btVector4__SWIG_1(x, y, z, w), true);
  }

  public btVector4 absolute4() const {
    btVector4 ret = new btVector4(BTPhysics_im.btVector4_absolute4(cast(void*)swigCPtr), true);
    return ret;
  }

  public float getW() const {
    auto ret = BTPhysics_im.btVector4_getW(cast(void*)swigCPtr);
    return ret;
  }

  public int maxAxis4() const {
    auto ret = BTPhysics_im.btVector4_maxAxis4(cast(void*)swigCPtr);
    return ret;
  }

  public int minAxis4() const {
    auto ret = BTPhysics_im.btVector4_minAxis4(cast(void*)swigCPtr);
    return ret;
  }

  public int closestAxis4() const {
    auto ret = BTPhysics_im.btVector4_closestAxis4(cast(void*)swigCPtr);
    return ret;
  }

  public void setValue(float x, float y, float z, float w) {
    BTPhysics_im.btVector4_setValue(cast(void*)swigCPtr, x, y, z, w);
  }

  alias btVector3.setValue setValue;
}

void btSwapScalarEndian(float sourceVal, float* destVal) {
  BTPhysics_im.btSwapScalarEndian(sourceVal, cast(void*)destVal);
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
}

void btSwapVector3Endian(btVector3 sourceVec, btVector3 destVec) {
  BTPhysics_im.btSwapVector3Endian(btVector3.swigGetCPtr(sourceVec), btVector3.swigGetCPtr(destVec));
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
}

void btUnSwapVector3Endian(btVector3 vector) {
  BTPhysics_im.btUnSwapVector3Endian(btVector3.swigGetCPtr(vector));
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
}

class btVector3FloatData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btVector3FloatData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btVector3FloatData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_floats(SWIGTYPE_p_float value) @property {
    BTPhysics_im.btVector3FloatData_m_floats_set(cast(void*)swigCPtr, SWIGTYPE_p_float.swigGetCPtr(value));
  }

  public SWIGTYPE_p_float m_floats() @property const {
    void* cPtr = BTPhysics_im.btVector3FloatData_m_floats_get(cast(void*)swigCPtr);
    SWIGTYPE_p_float ret = (cPtr is null) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btVector3FloatData(), true);
  }
}

class btVector3DoubleData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btVector3DoubleData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btVector3DoubleData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_floats(SWIGTYPE_p_double value) @property {
    BTPhysics_im.btVector3DoubleData_m_floats_set(cast(void*)swigCPtr, SWIGTYPE_p_double.swigGetCPtr(value));
  }

  public SWIGTYPE_p_double m_floats() @property const {
    void* cPtr = BTPhysics_im.btVector3DoubleData_m_floats_get(cast(void*)swigCPtr);
    SWIGTYPE_p_double ret = (cPtr is null) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btVector3DoubleData(), true);
  }
}

class btQuaternion {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btQuaternion obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btQuaternion(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(BTPhysics_im.new_btQuaternion__SWIG_0(), true);
  }

  public this(float x, float y, float z, float w) {
    this(BTPhysics_im.new_btQuaternion__SWIG_1(x, y, z, w), true);
  }

  public this(btVector3 axis, float angle) {
    this(BTPhysics_im.new_btQuaternion__SWIG_2(btVector3.swigGetCPtr(axis), angle), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(float yaw, float pitch, float roll) {
    this(BTPhysics_im.new_btQuaternion__SWIG_3(yaw, pitch, roll), true);
  }

  public void setRotation(btVector3 axis, float angle) {
    BTPhysics_im.btQuaternion_setRotation(cast(void*)swigCPtr, btVector3.swigGetCPtr(axis), angle);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setEuler(float yaw, float pitch, float roll) {
    BTPhysics_im.btQuaternion_setEuler(cast(void*)swigCPtr, yaw, pitch, roll);
  }

  public void setEulerZYX(float yaw, float pitch, float roll) {
    BTPhysics_im.btQuaternion_setEulerZYX(cast(void*)swigCPtr, yaw, pitch, roll);
  }

  public btQuaternion swigOpAddAssign(btQuaternion q) {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_swigOpAddAssign(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(q)), false);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btQuaternion swigOpSubAssign(btQuaternion q) {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_swigOpSubAssign(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(q)), false);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btQuaternion swigOpMulAssign(float s) {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_swigOpMulAssign__SWIG_0(cast(void*)swigCPtr, s), false);
    return ret;
  }

  public btQuaternion swigOpMulAssign(btQuaternion q) {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_swigOpMulAssign__SWIG_1(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(q)), false);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public float dot(btQuaternion q) const {
    auto ret = BTPhysics_im.btQuaternion_dot(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(q));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public float length2() const {
    auto ret = BTPhysics_im.btQuaternion_length2(cast(void*)swigCPtr);
    return ret;
  }

  public float length() const {
    auto ret = BTPhysics_im.btQuaternion_length(cast(void*)swigCPtr);
    return ret;
  }

  public btQuaternion normalize() {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_normalize(cast(void*)swigCPtr), false);
    return ret;
  }

  public btQuaternion swigOpMul(float s) const {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_swigOpMul(cast(void*)swigCPtr, s), true);
    return ret;
  }

  public btQuaternion swigOpDiv(float s) const {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_swigOpDiv(cast(void*)swigCPtr, s), true);
    return ret;
  }

  public btQuaternion swigOpDivAssign(float s) {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_swigOpDivAssign(cast(void*)swigCPtr, s), false);
    return ret;
  }

  public btQuaternion normalized() const {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_normalized(cast(void*)swigCPtr), true);
    return ret;
  }

  public float angle(btQuaternion q) const {
    auto ret = BTPhysics_im.btQuaternion_angle(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(q));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public float getAngle() const {
    auto ret = BTPhysics_im.btQuaternion_getAngle(cast(void*)swigCPtr);
    return ret;
  }

  public btVector3 getAxis() const {
    btVector3 ret = new btVector3(BTPhysics_im.btQuaternion_getAxis(cast(void*)swigCPtr), true);
    return ret;
  }

  public btQuaternion inverse() const {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_inverse(cast(void*)swigCPtr), true);
    return ret;
  }

  public btQuaternion swigOpAdd(btQuaternion q2) const {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_swigOpAdd(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(q2)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btQuaternion swigOpSub(btQuaternion q2) const {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_swigOpSub(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(q2)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btQuaternion swigOpNeg() const {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_swigOpNeg(cast(void*)swigCPtr), true);
    return ret;
  }

  public btQuaternion farthest(btQuaternion qd) const {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_farthest(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(qd)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btQuaternion nearest(btQuaternion qd) const {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_nearest(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(qd)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btQuaternion slerp(btQuaternion q, float t) const {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_slerp(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(q), t), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public static btQuaternion getIdentity() {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btQuaternion_getIdentity(), false);
    return ret;
  }

  public float getW() const {
    auto ret = BTPhysics_im.btQuaternion_getW(cast(void*)swigCPtr);
    return ret;
  }
}

float dot(btQuaternion q1, btQuaternion q2) {
  auto ret = BTPhysics_im.dot(btQuaternion.swigGetCPtr(q1), btQuaternion.swigGetCPtr(q2));
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

float length(btQuaternion q) {
  auto ret = BTPhysics_im.length(btQuaternion.swigGetCPtr(q));
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

float angle(btQuaternion q1, btQuaternion q2) {
  auto ret = BTPhysics_im.angle(btQuaternion.swigGetCPtr(q1), btQuaternion.swigGetCPtr(q2));
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

btQuaternion inverse(btQuaternion q) {
  btQuaternion ret = new btQuaternion(BTPhysics_im.inverse(btQuaternion.swigGetCPtr(q)), true);
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

btQuaternion slerp(btQuaternion q1, btQuaternion q2, float t) {
  btQuaternion ret = new btQuaternion(BTPhysics_im.slerp(btQuaternion.swigGetCPtr(q1), btQuaternion.swigGetCPtr(q2), t), true);
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

btVector3 quatRotate(btQuaternion rotation, btVector3 v) {
  btVector3 ret = new btVector3(BTPhysics_im.quatRotate(btQuaternion.swigGetCPtr(rotation), btVector3.swigGetCPtr(v)), true);
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

btQuaternion shortestArcQuat(btVector3 v0, btVector3 v1) {
  btQuaternion ret = new btQuaternion(BTPhysics_im.shortestArcQuat(btVector3.swigGetCPtr(v0), btVector3.swigGetCPtr(v1)), true);
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

btQuaternion shortestArcQuatNormalize2(btVector3 v0, btVector3 v1) {
  btQuaternion ret = new btQuaternion(BTPhysics_im.shortestArcQuatNormalize2(btVector3.swigGetCPtr(v0), btVector3.swigGetCPtr(v1)), true);
  if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  return ret;
}

class btTransform {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btTransform obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btTransform(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(BTPhysics_im.new_btTransform__SWIG_0(), true);
  }

  public this(btQuaternion q, btVector3 c) {
    this(BTPhysics_im.new_btTransform__SWIG_1(btQuaternion.swigGetCPtr(q), btVector3.swigGetCPtr(c)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btQuaternion q) {
    this(BTPhysics_im.new_btTransform__SWIG_2(btQuaternion.swigGetCPtr(q)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(SWIGTYPE_p_btMatrix3x3 b, btVector3 c) {
    this(BTPhysics_im.new_btTransform__SWIG_3(SWIGTYPE_p_btMatrix3x3.swigGetCPtr(b), btVector3.swigGetCPtr(c)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(SWIGTYPE_p_btMatrix3x3 b) {
    this(BTPhysics_im.new_btTransform__SWIG_4(SWIGTYPE_p_btMatrix3x3.swigGetCPtr(b)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btTransform other) {
    this(BTPhysics_im.new_btTransform__SWIG_5(btTransform.swigGetCPtr(other)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void mult(btTransform t1, btTransform t2) {
    BTPhysics_im.btTransform_mult(cast(void*)swigCPtr, btTransform.swigGetCPtr(t1), btTransform.swigGetCPtr(t2));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 opCall(btVector3 x) const {
    btVector3 ret = new btVector3(BTPhysics_im.btTransform_opCall(cast(void*)swigCPtr, btVector3.swigGetCPtr(x)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btVector3 swigOpMul(btVector3 x) const {
    btVector3 ret = new btVector3(BTPhysics_im.btTransform_swigOpMul__SWIG_0(cast(void*)swigCPtr, btVector3.swigGetCPtr(x)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btQuaternion swigOpMul(btQuaternion q) const {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btTransform_swigOpMul__SWIG_1(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(q)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public SWIGTYPE_p_btMatrix3x3 getBasis() {
    SWIGTYPE_p_btMatrix3x3 ret = new SWIGTYPE_p_btMatrix3x3(BTPhysics_im.btTransform_getBasis__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getOrigin() {
    btVector3 ret = new btVector3(BTPhysics_im.btTransform_getOrigin__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public btQuaternion getRotation() const {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btTransform_getRotation(cast(void*)swigCPtr), true);
    return ret;
  }

  public void setFromOpenGLMatrix(float* m) {
    BTPhysics_im.btTransform_setFromOpenGLMatrix(cast(void*)swigCPtr, cast(void*)m);
  }

  public void getOpenGLMatrix(float* m) const {
    BTPhysics_im.btTransform_getOpenGLMatrix(cast(void*)swigCPtr, cast(void*)m);
  }

  public void setOrigin(btVector3 origin) {
    BTPhysics_im.btTransform_setOrigin(cast(void*)swigCPtr, btVector3.swigGetCPtr(origin));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 invXform(btVector3 inVec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btTransform_invXform(cast(void*)swigCPtr, btVector3.swigGetCPtr(inVec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setBasis(SWIGTYPE_p_btMatrix3x3 basis) {
    BTPhysics_im.btTransform_setBasis(cast(void*)swigCPtr, SWIGTYPE_p_btMatrix3x3.swigGetCPtr(basis));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setRotation(btQuaternion q) {
    BTPhysics_im.btTransform_setRotation(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(q));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setIdentity() {
    BTPhysics_im.btTransform_setIdentity(cast(void*)swigCPtr);
  }

  public btTransform swigOpMulAssign(btTransform t) {
    btTransform ret = new btTransform(BTPhysics_im.btTransform_swigOpMulAssign(cast(void*)swigCPtr, btTransform.swigGetCPtr(t)), false);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btTransform inverse() const {
    btTransform ret = new btTransform(BTPhysics_im.btTransform_inverse(cast(void*)swigCPtr), true);
    return ret;
  }

  public btTransform inverseTimes(btTransform t) const {
    btTransform ret = new btTransform(BTPhysics_im.btTransform_inverseTimes(cast(void*)swigCPtr, btTransform.swigGetCPtr(t)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btTransform swigOpMul(btTransform t) const {
    btTransform ret = new btTransform(BTPhysics_im.btTransform_swigOpMul__SWIG_2(cast(void*)swigCPtr, btTransform.swigGetCPtr(t)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public static btTransform getIdentity() {
    btTransform ret = new btTransform(BTPhysics_im.btTransform_getIdentity(), false);
    return ret;
  }

  public void serialize(btTransformFloatData dataOut) const {
    BTPhysics_im.btTransform_serialize(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(dataOut));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void serializeFloat(btTransformFloatData dataOut) const {
    BTPhysics_im.btTransform_serializeFloat(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(dataOut));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void deSerialize(btTransformFloatData dataIn) {
    BTPhysics_im.btTransform_deSerialize(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(dataIn));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void deSerializeDouble(btTransformDoubleData dataIn) {
    BTPhysics_im.btTransform_deSerializeDouble(cast(void*)swigCPtr, btTransformDoubleData.swigGetCPtr(dataIn));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void deSerializeFloat(btTransformFloatData dataIn) {
    BTPhysics_im.btTransform_deSerializeFloat(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(dataIn));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

class btTransformFloatData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btTransformFloatData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btTransformFloatData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_basis(SWIGTYPE_p_btMatrix3x3FloatData value) @property {
    BTPhysics_im.btTransformFloatData_m_basis_set(cast(void*)swigCPtr, SWIGTYPE_p_btMatrix3x3FloatData.swigGetCPtr(value));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_btMatrix3x3FloatData m_basis() @property const {
    SWIGTYPE_p_btMatrix3x3FloatData ret = new SWIGTYPE_p_btMatrix3x3FloatData(BTPhysics_im.btTransformFloatData_m_basis_get(cast(void*)swigCPtr), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void m_origin(btVector3FloatData value) @property {
    BTPhysics_im.btTransformFloatData_m_origin_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_origin() @property const {
    void* cPtr = BTPhysics_im.btTransformFloatData_m_origin_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btTransformFloatData(), true);
  }
}

class btTransformDoubleData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btTransformDoubleData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btTransformDoubleData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_basis(SWIGTYPE_p_btMatrix3x3DoubleData value) @property {
    BTPhysics_im.btTransformDoubleData_m_basis_set(cast(void*)swigCPtr, SWIGTYPE_p_btMatrix3x3DoubleData.swigGetCPtr(value));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_btMatrix3x3DoubleData m_basis() @property const {
    SWIGTYPE_p_btMatrix3x3DoubleData ret = new SWIGTYPE_p_btMatrix3x3DoubleData(BTPhysics_im.btTransformDoubleData_m_basis_get(cast(void*)swigCPtr), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void m_origin(btVector3DoubleData value) @property {
    BTPhysics_im.btTransformDoubleData_m_origin_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_origin() @property const {
    void* cPtr = BTPhysics_im.btTransformDoubleData_m_origin_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btTransformDoubleData(), true);
  }
}

class btMotionState {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btMotionState obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btMotionState(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void getWorldTransform(btTransform worldTrans) const {
    BTPhysics_im.btMotionState_getWorldTransform(cast(void*)swigCPtr, btTransform.swigGetCPtr(worldTrans));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setWorldTransform(btTransform worldTrans) {
    BTPhysics_im.btMotionState_setWorldTransform(cast(void*)swigCPtr, btTransform.swigGetCPtr(worldTrans));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

class btDefaultMotionState : btMotionState {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btDefaultMotionState_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btDefaultMotionState obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btDefaultMotionState(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void m_graphicsWorldTrans(btTransform value) @property {
    BTPhysics_im.btDefaultMotionState_m_graphicsWorldTrans_set(cast(void*)swigCPtr, btTransform.swigGetCPtr(value));
  }

  public btTransform m_graphicsWorldTrans() @property const {
    void* cPtr = BTPhysics_im.btDefaultMotionState_m_graphicsWorldTrans_get(cast(void*)swigCPtr);
    btTransform ret = (cPtr is null) ? null : new btTransform(cPtr, false);
    return ret;
  }

  public void m_centerOfMassOffset(btTransform value) @property {
    BTPhysics_im.btDefaultMotionState_m_centerOfMassOffset_set(cast(void*)swigCPtr, btTransform.swigGetCPtr(value));
  }

  public btTransform m_centerOfMassOffset() @property const {
    void* cPtr = BTPhysics_im.btDefaultMotionState_m_centerOfMassOffset_get(cast(void*)swigCPtr);
    btTransform ret = (cPtr is null) ? null : new btTransform(cPtr, false);
    return ret;
  }

  public void m_startWorldTrans(btTransform value) @property {
    BTPhysics_im.btDefaultMotionState_m_startWorldTrans_set(cast(void*)swigCPtr, btTransform.swigGetCPtr(value));
  }

  public btTransform m_startWorldTrans() @property const {
    void* cPtr = BTPhysics_im.btDefaultMotionState_m_startWorldTrans_get(cast(void*)swigCPtr);
    btTransform ret = (cPtr is null) ? null : new btTransform(cPtr, false);
    return ret;
  }

  public void m_userPointer(void* value) @property {
    BTPhysics_im.btDefaultMotionState_m_userPointer_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public void* m_userPointer() @property const {
    auto ret = cast(void*)BTPhysics_im.btDefaultMotionState_m_userPointer_get(cast(void*)swigCPtr);
    return ret;
  }

  public this(btTransform startTrans, btTransform centerOfMassOffset) {
    this(BTPhysics_im.new_btDefaultMotionState__SWIG_0(btTransform.swigGetCPtr(startTrans), btTransform.swigGetCPtr(centerOfMassOffset)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btTransform startTrans) {
    this(BTPhysics_im.new_btDefaultMotionState__SWIG_1(btTransform.swigGetCPtr(startTrans)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this() {
    this(BTPhysics_im.new_btDefaultMotionState__SWIG_2(), true);
  }

  public override void getWorldTransform(btTransform centerOfMassWorldTrans) const {
    BTPhysics_im.btDefaultMotionState_getWorldTransform(cast(void*)swigCPtr, btTransform.swigGetCPtr(centerOfMassWorldTrans));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void setWorldTransform(btTransform centerOfMassWorldTrans) {
    BTPhysics_im.btDefaultMotionState_setWorldTransform(cast(void*)swigCPtr, btTransform.swigGetCPtr(centerOfMassWorldTrans));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

class btIDebugDraw {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btIDebugDraw obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btIDebugDraw(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum DebugDrawModes {
    DBG_NoDebug = 0,
    DBG_DrawWireframe = 1,
    DBG_DrawAabb = 2,
    DBG_DrawFeaturesText = 4,
    DBG_DrawContactPoints = 8,
    DBG_NoDeactivation = 16,
    DBG_NoHelpText = 32,
    DBG_DrawText = 64,
    DBG_ProfileTimings = 128,
    DBG_EnableSatComparison = 256,
    DBG_DisableBulletLCP = 512,
    DBG_EnableCCD = 1024,
    DBG_DrawConstraints = (1 << 11),
    DBG_DrawConstraintLimits = (1 << 12),
    DBG_FastWireframe = (1 << 13),
    DBG_MAX_DEBUG_DRAW_MODE
  }

  public void drawLine(btVector3 from, btVector3 to, btVector3 color) {
    BTPhysics_im.btIDebugDraw_drawLine__SWIG_0(cast(void*)swigCPtr, btVector3.swigGetCPtr(from), btVector3.swigGetCPtr(to), btVector3.swigGetCPtr(color));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawLine(btVector3 from, btVector3 to, btVector3 fromColor, btVector3 toColor) {
    BTPhysics_im.btIDebugDraw_drawLine__SWIG_1(cast(void*)swigCPtr, btVector3.swigGetCPtr(from), btVector3.swigGetCPtr(to), btVector3.swigGetCPtr(fromColor), btVector3.swigGetCPtr(toColor));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawSphere(float radius, btTransform transform, btVector3 color) {
    BTPhysics_im.btIDebugDraw_drawSphere__SWIG_0(cast(void*)swigCPtr, radius, btTransform.swigGetCPtr(transform), btVector3.swigGetCPtr(color));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawSphere(btVector3 p, float radius, btVector3 color) {
    BTPhysics_im.btIDebugDraw_drawSphere__SWIG_1(cast(void*)swigCPtr, btVector3.swigGetCPtr(p), radius, btVector3.swigGetCPtr(color));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawTriangle(btVector3 v0, btVector3 v1, btVector3 v2, btVector3 arg3, btVector3 arg4, btVector3 arg5, btVector3 color, float alpha) {
    BTPhysics_im.btIDebugDraw_drawTriangle__SWIG_0(cast(void*)swigCPtr, btVector3.swigGetCPtr(v0), btVector3.swigGetCPtr(v1), btVector3.swigGetCPtr(v2), btVector3.swigGetCPtr(arg3), btVector3.swigGetCPtr(arg4), btVector3.swigGetCPtr(arg5), btVector3.swigGetCPtr(color), alpha);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawTriangle(btVector3 v0, btVector3 v1, btVector3 v2, btVector3 color, float arg4) {
    BTPhysics_im.btIDebugDraw_drawTriangle__SWIG_1(cast(void*)swigCPtr, btVector3.swigGetCPtr(v0), btVector3.swigGetCPtr(v1), btVector3.swigGetCPtr(v2), btVector3.swigGetCPtr(color), arg4);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawContactPoint(btVector3 PointOnB, btVector3 normalOnB, float distance, int lifeTime, btVector3 color) {
    BTPhysics_im.btIDebugDraw_drawContactPoint(cast(void*)swigCPtr, btVector3.swigGetCPtr(PointOnB), btVector3.swigGetCPtr(normalOnB), distance, lifeTime, btVector3.swigGetCPtr(color));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void reportErrorWarning(string warningString) {
    BTPhysics_im.btIDebugDraw_reportErrorWarning(cast(void*)swigCPtr, (warningString ? std.string.toStringz(warningString) : null));
  }

  public void draw3dText(btVector3 location, string textString) {
    BTPhysics_im.btIDebugDraw_draw3dText(cast(void*)swigCPtr, btVector3.swigGetCPtr(location), (textString ? std.string.toStringz(textString) : null));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setDebugMode(int debugMode) {
    BTPhysics_im.btIDebugDraw_setDebugMode(cast(void*)swigCPtr, debugMode);
  }

  public int getDebugMode() const {
    auto ret = BTPhysics_im.btIDebugDraw_getDebugMode(cast(void*)swigCPtr);
    return ret;
  }

  public void drawAabb(btVector3 from, btVector3 to, btVector3 color) {
    BTPhysics_im.btIDebugDraw_drawAabb(cast(void*)swigCPtr, btVector3.swigGetCPtr(from), btVector3.swigGetCPtr(to), btVector3.swigGetCPtr(color));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawTransform(btTransform transform, float orthoLen) {
    BTPhysics_im.btIDebugDraw_drawTransform(cast(void*)swigCPtr, btTransform.swigGetCPtr(transform), orthoLen);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawArc(btVector3 center, btVector3 normal, btVector3 axis, float radiusA, float radiusB, float minAngle, float maxAngle, btVector3 color, bool drawSect, float stepDegrees) {
    BTPhysics_im.btIDebugDraw_drawArc__SWIG_0(cast(void*)swigCPtr, btVector3.swigGetCPtr(center), btVector3.swigGetCPtr(normal), btVector3.swigGetCPtr(axis), radiusA, radiusB, minAngle, maxAngle, btVector3.swigGetCPtr(color), drawSect, stepDegrees);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawArc(btVector3 center, btVector3 normal, btVector3 axis, float radiusA, float radiusB, float minAngle, float maxAngle, btVector3 color, bool drawSect) {
    BTPhysics_im.btIDebugDraw_drawArc__SWIG_1(cast(void*)swigCPtr, btVector3.swigGetCPtr(center), btVector3.swigGetCPtr(normal), btVector3.swigGetCPtr(axis), radiusA, radiusB, minAngle, maxAngle, btVector3.swigGetCPtr(color), drawSect);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawSpherePatch(btVector3 center, btVector3 up, btVector3 axis, float radius, float minTh, float maxTh, float minPs, float maxPs, btVector3 color, float stepDegrees) {
    BTPhysics_im.btIDebugDraw_drawSpherePatch__SWIG_0(cast(void*)swigCPtr, btVector3.swigGetCPtr(center), btVector3.swigGetCPtr(up), btVector3.swigGetCPtr(axis), radius, minTh, maxTh, minPs, maxPs, btVector3.swigGetCPtr(color), stepDegrees);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawSpherePatch(btVector3 center, btVector3 up, btVector3 axis, float radius, float minTh, float maxTh, float minPs, float maxPs, btVector3 color) {
    BTPhysics_im.btIDebugDraw_drawSpherePatch__SWIG_1(cast(void*)swigCPtr, btVector3.swigGetCPtr(center), btVector3.swigGetCPtr(up), btVector3.swigGetCPtr(axis), radius, minTh, maxTh, minPs, maxPs, btVector3.swigGetCPtr(color));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawBox(btVector3 bbMin, btVector3 bbMax, btVector3 color) {
    BTPhysics_im.btIDebugDraw_drawBox__SWIG_0(cast(void*)swigCPtr, btVector3.swigGetCPtr(bbMin), btVector3.swigGetCPtr(bbMax), btVector3.swigGetCPtr(color));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawBox(btVector3 bbMin, btVector3 bbMax, btTransform trans, btVector3 color) {
    BTPhysics_im.btIDebugDraw_drawBox__SWIG_1(cast(void*)swigCPtr, btVector3.swigGetCPtr(bbMin), btVector3.swigGetCPtr(bbMax), btTransform.swigGetCPtr(trans), btVector3.swigGetCPtr(color));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawCapsule(float radius, float halfHeight, int upAxis, btTransform transform, btVector3 color) {
    BTPhysics_im.btIDebugDraw_drawCapsule(cast(void*)swigCPtr, radius, halfHeight, upAxis, btTransform.swigGetCPtr(transform), btVector3.swigGetCPtr(color));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawCylinder(float radius, float halfHeight, int upAxis, btTransform transform, btVector3 color) {
    BTPhysics_im.btIDebugDraw_drawCylinder(cast(void*)swigCPtr, radius, halfHeight, upAxis, btTransform.swigGetCPtr(transform), btVector3.swigGetCPtr(color));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawCone(float radius, float height, int upAxis, btTransform transform, btVector3 color) {
    BTPhysics_im.btIDebugDraw_drawCone(cast(void*)swigCPtr, radius, height, upAxis, btTransform.swigGetCPtr(transform), btVector3.swigGetCPtr(color));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void drawPlane(btVector3 planeNormal, float planeConst, btTransform transform, btVector3 color) {
    BTPhysics_im.btIDebugDraw_drawPlane(cast(void*)swigCPtr, btVector3.swigGetCPtr(planeNormal), planeConst, btTransform.swigGetCPtr(transform), btVector3.swigGetCPtr(color));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

SWIGTYPE_p_unsigned_char sBulletDNAstr() @property {
  void* cPtr = BTPhysics_im.sBulletDNAstr_get();
  SWIGTYPE_p_unsigned_char ret = (cPtr is null) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  return ret;
}

void sBulletDNAlen(int value) @property {
  BTPhysics_im.sBulletDNAlen_set(value);
}

int sBulletDNAlen() @property {
  auto ret = BTPhysics_im.sBulletDNAlen_get();
  return ret;
}

SWIGTYPE_p_unsigned_char sBulletDNAstr64() @property {
  void* cPtr = BTPhysics_im.sBulletDNAstr64_get();
  SWIGTYPE_p_unsigned_char ret = (cPtr is null) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  return ret;
}

void sBulletDNAlen64(int value) @property {
  BTPhysics_im.sBulletDNAlen64_set(value);
}

int sBulletDNAlen64() @property {
  auto ret = BTPhysics_im.sBulletDNAlen64_get();
  return ret;
}

int btStrLen(string str) {
  auto ret = BTPhysics_im.btStrLen((str ? std.string.toStringz(str) : null));
  return ret;
}

class btChunk {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btChunk obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btChunk(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_chunkCode(int value) @property {
    BTPhysics_im.btChunk_m_chunkCode_set(cast(void*)swigCPtr, value);
  }

  public int m_chunkCode() @property const {
    auto ret = BTPhysics_im.btChunk_m_chunkCode_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_length(int value) @property {
    BTPhysics_im.btChunk_m_length_set(cast(void*)swigCPtr, value);
  }

  public int m_length() @property const {
    auto ret = BTPhysics_im.btChunk_m_length_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_oldPtr(void* value) @property {
    BTPhysics_im.btChunk_m_oldPtr_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public void* m_oldPtr() @property const {
    auto ret = cast(void*)BTPhysics_im.btChunk_m_oldPtr_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_dna_nr(int value) @property {
    BTPhysics_im.btChunk_m_dna_nr_set(cast(void*)swigCPtr, value);
  }

  public int m_dna_nr() @property const {
    auto ret = BTPhysics_im.btChunk_m_dna_nr_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_number(int value) @property {
    BTPhysics_im.btChunk_m_number_set(cast(void*)swigCPtr, value);
  }

  public int m_number() @property const {
    auto ret = BTPhysics_im.btChunk_m_number_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btChunk(), true);
  }
}

enum btSerializationFlags {
  BT_SERIALIZE_NO_BVH = 1,
  BT_SERIALIZE_NO_TRIANGLEINFOMAP = 2,
  BT_SERIALIZE_NO_DUPLICATE_ASSERT = 4
}

class btSerializer {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btSerializer obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btSerializer(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public ubyte* getBufferPointer() const {
    auto ret = cast(ubyte*)BTPhysics_im.btSerializer_getBufferPointer(cast(void*)swigCPtr);
    return ret;
  }

  public int getCurrentBufferSize() const {
    auto ret = BTPhysics_im.btSerializer_getCurrentBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public btChunk allocate(size_t size, int numElements) {
    void* cPtr = BTPhysics_im.btSerializer_allocate(cast(void*)swigCPtr, size, numElements);
    btChunk ret = (cPtr is null) ? null : new btChunk(cPtr, false);
    return ret;
  }

  public void finalizeChunk(btChunk chunk, string structType, int chunkCode, void* oldPtr) {
    BTPhysics_im.btSerializer_finalizeChunk(cast(void*)swigCPtr, btChunk.swigGetCPtr(chunk), (structType ? std.string.toStringz(structType) : null), chunkCode, cast(void*)oldPtr);
  }

  public void* findPointer(void* oldPtr) {
    auto ret = cast(void*)BTPhysics_im.btSerializer_findPointer(cast(void*)swigCPtr, cast(void*)oldPtr);
    return ret;
  }

  public void* getUniquePointer(void* oldPtr) {
    auto ret = cast(void*)BTPhysics_im.btSerializer_getUniquePointer(cast(void*)swigCPtr, cast(void*)oldPtr);
    return ret;
  }

  public void startSerialization() {
    BTPhysics_im.btSerializer_startSerialization(cast(void*)swigCPtr);
  }

  public void finishSerialization() {
    BTPhysics_im.btSerializer_finishSerialization(cast(void*)swigCPtr);
  }

  public string findNameForPointer(void* ptr) const {
    string ret = std.conv.to!string(BTPhysics_im.btSerializer_findNameForPointer(cast(void*)swigCPtr, cast(void*)ptr));
    return ret;
  }

  public void registerNameForPointer(void* ptr, string name) {
    BTPhysics_im.btSerializer_registerNameForPointer(cast(void*)swigCPtr, cast(void*)ptr, (name ? std.string.toStringz(name) : null));
  }

  public void serializeName(string ptr) {
    BTPhysics_im.btSerializer_serializeName(cast(void*)swigCPtr, (ptr ? std.string.toStringz(ptr) : null));
  }

  public int getSerializationFlags() const {
    auto ret = BTPhysics_im.btSerializer_getSerializationFlags(cast(void*)swigCPtr);
    return ret;
  }

  public void setSerializationFlags(int flags) {
    BTPhysics_im.btSerializer_setSerializationFlags(cast(void*)swigCPtr, flags);
  }
}

int BT_HEADER_LENGTH() @property {
  auto ret = BTPhysics_im.BT_HEADER_LENGTH_get();
  return ret;
}

class btPointerUid {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btPointerUid obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btPointerUid(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(BTPhysics_im.new_btPointerUid(), true);
  }
}

class btDefaultSerializer : btSerializer {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btDefaultSerializer_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btDefaultSerializer obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btDefaultSerializer(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(int totalSize) {
    this(BTPhysics_im.new_btDefaultSerializer__SWIG_0(totalSize), true);
  }

  public this() {
    this(BTPhysics_im.new_btDefaultSerializer__SWIG_1(), true);
  }

  public void writeHeader(ubyte* buffer) const {
    BTPhysics_im.btDefaultSerializer_writeHeader(cast(void*)swigCPtr, cast(void*)buffer);
  }

  public override void startSerialization() {
    BTPhysics_im.btDefaultSerializer_startSerialization(cast(void*)swigCPtr);
  }

  public override void finishSerialization() {
    BTPhysics_im.btDefaultSerializer_finishSerialization(cast(void*)swigCPtr);
  }

  public override void* getUniquePointer(void* oldPtr) {
    auto ret = cast(void*)BTPhysics_im.btDefaultSerializer_getUniquePointer(cast(void*)swigCPtr, cast(void*)oldPtr);
    return ret;
  }

  public override ubyte* getBufferPointer() const {
    auto ret = cast(ubyte*)BTPhysics_im.btDefaultSerializer_getBufferPointer(cast(void*)swigCPtr);
    return ret;
  }

  public override int getCurrentBufferSize() const {
    auto ret = BTPhysics_im.btDefaultSerializer_getCurrentBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override void finalizeChunk(btChunk chunk, string structType, int chunkCode, void* oldPtr) {
    BTPhysics_im.btDefaultSerializer_finalizeChunk(cast(void*)swigCPtr, btChunk.swigGetCPtr(chunk), (structType ? std.string.toStringz(structType) : null), chunkCode, cast(void*)oldPtr);
  }

  public ubyte* internalAlloc(size_t size) {
    auto ret = cast(ubyte*)BTPhysics_im.btDefaultSerializer_internalAlloc(cast(void*)swigCPtr, size);
    return ret;
  }

  public override btChunk allocate(size_t size, int numElements) {
    void* cPtr = BTPhysics_im.btDefaultSerializer_allocate(cast(void*)swigCPtr, size, numElements);
    btChunk ret = (cPtr is null) ? null : new btChunk(cPtr, false);
    return ret;
  }

  public override string findNameForPointer(void* ptr) const {
    string ret = std.conv.to!string(BTPhysics_im.btDefaultSerializer_findNameForPointer(cast(void*)swigCPtr, cast(void*)ptr));
    return ret;
  }

  public override void registerNameForPointer(void* ptr, string name) {
    BTPhysics_im.btDefaultSerializer_registerNameForPointer(cast(void*)swigCPtr, cast(void*)ptr, (name ? std.string.toStringz(name) : null));
  }

  public override void serializeName(string name) {
    BTPhysics_im.btDefaultSerializer_serializeName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public override int getSerializationFlags() const {
    auto ret = BTPhysics_im.btDefaultSerializer_getSerializationFlags(cast(void*)swigCPtr);
    return ret;
  }

  public override void setSerializationFlags(int flags) {
    BTPhysics_im.btDefaultSerializer_setSerializationFlags(cast(void*)swigCPtr, flags);
  }
}

class btCollisionWorld {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btCollisionWorld obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCollisionWorld(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(btDispatcher dispatcher, btBroadphaseInterface broadphasePairCache, btCollisionConfiguration collisionConfiguration) {
    this(BTPhysics_im.new_btCollisionWorld(btDispatcher.swigGetCPtr(dispatcher), btBroadphaseInterface.swigGetCPtr(broadphasePairCache), btCollisionConfiguration.swigGetCPtr(collisionConfiguration)), true);
  }

  public void setBroadphase(btBroadphaseInterface pairCache) {
    BTPhysics_im.btCollisionWorld_setBroadphase(cast(void*)swigCPtr, btBroadphaseInterface.swigGetCPtr(pairCache));
  }

  public btBroadphaseInterface getBroadphase() const {
    void* cPtr = BTPhysics_im.btCollisionWorld_getBroadphase__SWIG_0(cast(void*)swigCPtr);
    btBroadphaseInterface ret = (cPtr is null) ? null : new btBroadphaseInterface(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btOverlappingPairCache getPairCache() {
    void* cPtr = BTPhysics_im.btCollisionWorld_getPairCache(cast(void*)swigCPtr);
    SWIGTYPE_p_btOverlappingPairCache ret = (cPtr is null) ? null : new SWIGTYPE_p_btOverlappingPairCache(cPtr, false);
    return ret;
  }

  public btDispatcher getDispatcher() {
    void* cPtr = BTPhysics_im.btCollisionWorld_getDispatcher__SWIG_0(cast(void*)swigCPtr);
    btDispatcher ret = (cPtr is null) ? null : new btDispatcher(cPtr, false);
    return ret;
  }

  public void updateSingleAabb(btCollisionObject colObj) {
    BTPhysics_im.btCollisionWorld_updateSingleAabb(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(colObj));
  }

  public void updateAabbs() {
    BTPhysics_im.btCollisionWorld_updateAabbs(cast(void*)swigCPtr);
  }

  public void setDebugDrawer(btIDebugDraw debugDrawer) {
    BTPhysics_im.btCollisionWorld_setDebugDrawer(cast(void*)swigCPtr, btIDebugDraw.swigGetCPtr(debugDrawer));
  }

  public btIDebugDraw getDebugDrawer() {
    void* cPtr = BTPhysics_im.btCollisionWorld_getDebugDrawer(cast(void*)swigCPtr);
    btIDebugDraw ret = (cPtr is null) ? null : new btIDebugDraw(cPtr, false);
    return ret;
  }

  public void debugDrawWorld() {
    BTPhysics_im.btCollisionWorld_debugDrawWorld(cast(void*)swigCPtr);
  }

  public void debugDrawObject(btTransform worldTransform, btCollisionShape shape, btVector3 color) {
    BTPhysics_im.btCollisionWorld_debugDrawObject(cast(void*)swigCPtr, btTransform.swigGetCPtr(worldTransform), btCollisionShape.swigGetCPtr(shape), btVector3.swigGetCPtr(color));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public int getNumCollisionObjects() const {
    auto ret = BTPhysics_im.btCollisionWorld_getNumCollisionObjects(cast(void*)swigCPtr);
    return ret;
  }

  public void rayTest(btVector3 rayFromWorld, btVector3 rayToWorld, SWIGTYPE_p_btCollisionWorld__RayResultCallback resultCallback) const {
    BTPhysics_im.btCollisionWorld_rayTest(cast(void*)swigCPtr, btVector3.swigGetCPtr(rayFromWorld), btVector3.swigGetCPtr(rayToWorld), SWIGTYPE_p_btCollisionWorld__RayResultCallback.swigGetCPtr(resultCallback));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void convexSweepTest(btConvexShape castShape, btTransform from, btTransform to, SWIGTYPE_p_btCollisionWorld__ConvexResultCallback resultCallback, float allowedCcdPenetration) const {
    BTPhysics_im.btCollisionWorld_convexSweepTest__SWIG_0(cast(void*)swigCPtr, btConvexShape.swigGetCPtr(castShape), btTransform.swigGetCPtr(from), btTransform.swigGetCPtr(to), SWIGTYPE_p_btCollisionWorld__ConvexResultCallback.swigGetCPtr(resultCallback), allowedCcdPenetration);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void convexSweepTest(btConvexShape castShape, btTransform from, btTransform to, SWIGTYPE_p_btCollisionWorld__ConvexResultCallback resultCallback) const {
    BTPhysics_im.btCollisionWorld_convexSweepTest__SWIG_1(cast(void*)swigCPtr, btConvexShape.swigGetCPtr(castShape), btTransform.swigGetCPtr(from), btTransform.swigGetCPtr(to), SWIGTYPE_p_btCollisionWorld__ConvexResultCallback.swigGetCPtr(resultCallback));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void contactTest(btCollisionObject colObj, SWIGTYPE_p_btCollisionWorld__ContactResultCallback resultCallback) {
    BTPhysics_im.btCollisionWorld_contactTest(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(colObj), SWIGTYPE_p_btCollisionWorld__ContactResultCallback.swigGetCPtr(resultCallback));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void contactPairTest(btCollisionObject colObjA, btCollisionObject colObjB, SWIGTYPE_p_btCollisionWorld__ContactResultCallback resultCallback) {
    BTPhysics_im.btCollisionWorld_contactPairTest(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(colObjA), btCollisionObject.swigGetCPtr(colObjB), SWIGTYPE_p_btCollisionWorld__ContactResultCallback.swigGetCPtr(resultCallback));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public static void rayTestSingle(btTransform rayFromTrans, btTransform rayToTrans, btCollisionObject collisionObject, btCollisionShape collisionShape, btTransform colObjWorldTransform, SWIGTYPE_p_btCollisionWorld__RayResultCallback resultCallback) {
    BTPhysics_im.btCollisionWorld_rayTestSingle(btTransform.swigGetCPtr(rayFromTrans), btTransform.swigGetCPtr(rayToTrans), btCollisionObject.swigGetCPtr(collisionObject), btCollisionShape.swigGetCPtr(collisionShape), btTransform.swigGetCPtr(colObjWorldTransform), SWIGTYPE_p_btCollisionWorld__RayResultCallback.swigGetCPtr(resultCallback));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public static void objectQuerySingle(btConvexShape castShape, btTransform rayFromTrans, btTransform rayToTrans, btCollisionObject collisionObject, btCollisionShape collisionShape, btTransform colObjWorldTransform, SWIGTYPE_p_btCollisionWorld__ConvexResultCallback resultCallback, float allowedPenetration) {
    BTPhysics_im.btCollisionWorld_objectQuerySingle(btConvexShape.swigGetCPtr(castShape), btTransform.swigGetCPtr(rayFromTrans), btTransform.swigGetCPtr(rayToTrans), btCollisionObject.swigGetCPtr(collisionObject), btCollisionShape.swigGetCPtr(collisionShape), btTransform.swigGetCPtr(colObjWorldTransform), SWIGTYPE_p_btCollisionWorld__ConvexResultCallback.swigGetCPtr(resultCallback), allowedPenetration);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void addCollisionObject(btCollisionObject collisionObject, short collisionFilterGroup, short collisionFilterMask) {
    BTPhysics_im.btCollisionWorld_addCollisionObject__SWIG_0(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(collisionObject), collisionFilterGroup, collisionFilterMask);
  }

  public void addCollisionObject(btCollisionObject collisionObject, short collisionFilterGroup) {
    BTPhysics_im.btCollisionWorld_addCollisionObject__SWIG_1(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(collisionObject), collisionFilterGroup);
  }

  public void addCollisionObject(btCollisionObject collisionObject) {
    BTPhysics_im.btCollisionWorld_addCollisionObject__SWIG_2(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(collisionObject));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t getCollisionObjectArray() {
    SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t ret = new SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t(BTPhysics_im.btCollisionWorld_getCollisionObjectArray__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public void removeCollisionObject(btCollisionObject collisionObject) {
    BTPhysics_im.btCollisionWorld_removeCollisionObject(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(collisionObject));
  }

  public void performDiscreteCollisionDetection() {
    BTPhysics_im.btCollisionWorld_performDiscreteCollisionDetection(cast(void*)swigCPtr);
  }

  public btDispatcherInfo getDispatchInfo() {
    btDispatcherInfo ret = new btDispatcherInfo(BTPhysics_im.btCollisionWorld_getDispatchInfo__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public bool getForceUpdateAllAabbs() const {
    bool ret = BTPhysics_im.btCollisionWorld_getForceUpdateAllAabbs(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setForceUpdateAllAabbs(bool forceUpdateAllAabbs) {
    BTPhysics_im.btCollisionWorld_setForceUpdateAllAabbs(cast(void*)swigCPtr, forceUpdateAllAabbs);
  }

  public void serialize(btSerializer serializer) {
    BTPhysics_im.btCollisionWorld_serialize(cast(void*)swigCPtr, btSerializer.swigGetCPtr(serializer));
  }

  public btCollisionObject getCollisionObject(int index) {
    void* cPtr = BTPhysics_im.btCollisionWorld_getCollisionObject(cast(void*)swigCPtr, index);
    btCollisionObject ret = (cPtr is null) ? null : new btCollisionObject(cPtr, false);
    return ret;
  }
}

int ACTIVE_TAG() @property {
  auto ret = BTPhysics_im.ACTIVE_TAG_get();
  return ret;
}

int ISLAND_SLEEPING() @property {
  auto ret = BTPhysics_im.ISLAND_SLEEPING_get();
  return ret;
}

int WANTS_DEACTIVATION() @property {
  auto ret = BTPhysics_im.WANTS_DEACTIVATION_get();
  return ret;
}

int DISABLE_DEACTIVATION() @property {
  auto ret = BTPhysics_im.DISABLE_DEACTIVATION_get();
  return ret;
}

int DISABLE_SIMULATION() @property {
  auto ret = BTPhysics_im.DISABLE_SIMULATION_get();
  return ret;
}

string btCollisionObjectDataName() @property {
  string ret = std.conv.to!string(BTPhysics_im.btCollisionObjectDataName_get());
  return ret;
}

class btCollisionObject {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btCollisionObject obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCollisionObject(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum CollisionFlags {
    CF_STATIC_OBJECT = 1,
    CF_KINEMATIC_OBJECT = 2,
    CF_NO_CONTACT_RESPONSE = 4,
    CF_CUSTOM_MATERIAL_CALLBACK = 8,
    CF_CHARACTER_OBJECT = 16,
    CF_DISABLE_VISUALIZE_OBJECT = 32,
    CF_DISABLE_SPU_COLLISION_PROCESSING = 64
  }

  enum CollisionObjectTypes {
    CO_COLLISION_OBJECT = 1,
    CO_RIGID_BODY = 2,
    CO_GHOST_OBJECT = 4,
    CO_SOFT_BODY = 8,
    CO_HF_FLUID = 16,
    CO_USER_TYPE = 32
  }

  public bool mergesSimulationIslands() const {
    bool ret = BTPhysics_im.btCollisionObject_mergesSimulationIslands(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public btVector3 getAnisotropicFriction() const {
    btVector3 ret = new btVector3(BTPhysics_im.btCollisionObject_getAnisotropicFriction(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setAnisotropicFriction(btVector3 anisotropicFriction) {
    BTPhysics_im.btCollisionObject_setAnisotropicFriction(cast(void*)swigCPtr, btVector3.swigGetCPtr(anisotropicFriction));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public bool hasAnisotropicFriction() const {
    bool ret = BTPhysics_im.btCollisionObject_hasAnisotropicFriction(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setContactProcessingThreshold(float contactProcessingThreshold) {
    BTPhysics_im.btCollisionObject_setContactProcessingThreshold(cast(void*)swigCPtr, contactProcessingThreshold);
  }

  public float getContactProcessingThreshold() const {
    auto ret = BTPhysics_im.btCollisionObject_getContactProcessingThreshold(cast(void*)swigCPtr);
    return ret;
  }

  public bool isStaticObject() const {
    bool ret = BTPhysics_im.btCollisionObject_isStaticObject(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isKinematicObject() const {
    bool ret = BTPhysics_im.btCollisionObject_isKinematicObject(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isStaticOrKinematicObject() const {
    bool ret = BTPhysics_im.btCollisionObject_isStaticOrKinematicObject(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool hasContactResponse() const {
    bool ret = BTPhysics_im.btCollisionObject_hasContactResponse(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btCollisionObject(), true);
  }

  public void setCollisionShape(btCollisionShape collisionShape) {
    BTPhysics_im.btCollisionObject_setCollisionShape(cast(void*)swigCPtr, btCollisionShape.swigGetCPtr(collisionShape));
  }

  public btCollisionShape getCollisionShape() const {
    void* cPtr = BTPhysics_im.btCollisionObject_getCollisionShape__SWIG_0(cast(void*)swigCPtr);
    btCollisionShape ret = (cPtr is null) ? null : new btCollisionShape(cPtr, false);
    return ret;
  }

  public btCollisionShape getRootCollisionShape() const {
    void* cPtr = BTPhysics_im.btCollisionObject_getRootCollisionShape__SWIG_0(cast(void*)swigCPtr);
    btCollisionShape ret = (cPtr is null) ? null : new btCollisionShape(cPtr, false);
    return ret;
  }

  public void internalSetTemporaryCollisionShape(btCollisionShape collisionShape) {
    BTPhysics_im.btCollisionObject_internalSetTemporaryCollisionShape(cast(void*)swigCPtr, btCollisionShape.swigGetCPtr(collisionShape));
  }

  public void* internalGetExtensionPointer() const {
    auto ret = cast(void*)BTPhysics_im.btCollisionObject_internalGetExtensionPointer(cast(void*)swigCPtr);
    return ret;
  }

  public void internalSetExtensionPointer(void* pointer) {
    BTPhysics_im.btCollisionObject_internalSetExtensionPointer(cast(void*)swigCPtr, cast(void*)pointer);
  }

  public int getActivationState() const {
    auto ret = BTPhysics_im.btCollisionObject_getActivationState(cast(void*)swigCPtr);
    return ret;
  }

  public void setActivationState(int newState) {
    BTPhysics_im.btCollisionObject_setActivationState(cast(void*)swigCPtr, newState);
  }

  public void setDeactivationTime(float time) {
    BTPhysics_im.btCollisionObject_setDeactivationTime(cast(void*)swigCPtr, time);
  }

  public float getDeactivationTime() const {
    auto ret = BTPhysics_im.btCollisionObject_getDeactivationTime(cast(void*)swigCPtr);
    return ret;
  }

  public void forceActivationState(int newState) {
    BTPhysics_im.btCollisionObject_forceActivationState(cast(void*)swigCPtr, newState);
  }

  public void activate(bool forceActivation) {
    BTPhysics_im.btCollisionObject_activate__SWIG_0(cast(void*)swigCPtr, forceActivation);
  }

  public void activate() {
    BTPhysics_im.btCollisionObject_activate__SWIG_1(cast(void*)swigCPtr);
  }

  public bool isActive() const {
    bool ret = BTPhysics_im.btCollisionObject_isActive(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setRestitution(float rest) {
    BTPhysics_im.btCollisionObject_setRestitution(cast(void*)swigCPtr, rest);
  }

  public float getRestitution() const {
    auto ret = BTPhysics_im.btCollisionObject_getRestitution(cast(void*)swigCPtr);
    return ret;
  }

  public void setFriction(float frict) {
    BTPhysics_im.btCollisionObject_setFriction(cast(void*)swigCPtr, frict);
  }

  public float getFriction() const {
    auto ret = BTPhysics_im.btCollisionObject_getFriction(cast(void*)swigCPtr);
    return ret;
  }

  public int getInternalType() const {
    auto ret = BTPhysics_im.btCollisionObject_getInternalType(cast(void*)swigCPtr);
    return ret;
  }

  public btTransform getWorldTransform() {
    btTransform ret = new btTransform(BTPhysics_im.btCollisionObject_getWorldTransform__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setWorldTransform(btTransform worldTrans) {
    BTPhysics_im.btCollisionObject_setWorldTransform(cast(void*)swigCPtr, btTransform.swigGetCPtr(worldTrans));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_btBroadphaseProxy getBroadphaseHandle() {
    void* cPtr = BTPhysics_im.btCollisionObject_getBroadphaseHandle__SWIG_0(cast(void*)swigCPtr);
    SWIGTYPE_p_btBroadphaseProxy ret = (cPtr is null) ? null : new SWIGTYPE_p_btBroadphaseProxy(cPtr, false);
    return ret;
  }

  public void setBroadphaseHandle(SWIGTYPE_p_btBroadphaseProxy handle) {
    BTPhysics_im.btCollisionObject_setBroadphaseHandle(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(handle));
  }

  public btTransform getInterpolationWorldTransform() const {
    btTransform ret = new btTransform(BTPhysics_im.btCollisionObject_getInterpolationWorldTransform__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setInterpolationWorldTransform(btTransform trans) {
    BTPhysics_im.btCollisionObject_setInterpolationWorldTransform(cast(void*)swigCPtr, btTransform.swigGetCPtr(trans));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setInterpolationLinearVelocity(btVector3 linvel) {
    BTPhysics_im.btCollisionObject_setInterpolationLinearVelocity(cast(void*)swigCPtr, btVector3.swigGetCPtr(linvel));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setInterpolationAngularVelocity(btVector3 angvel) {
    BTPhysics_im.btCollisionObject_setInterpolationAngularVelocity(cast(void*)swigCPtr, btVector3.swigGetCPtr(angvel));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getInterpolationLinearVelocity() const {
    btVector3 ret = new btVector3(BTPhysics_im.btCollisionObject_getInterpolationLinearVelocity(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getInterpolationAngularVelocity() const {
    btVector3 ret = new btVector3(BTPhysics_im.btCollisionObject_getInterpolationAngularVelocity(cast(void*)swigCPtr), false);
    return ret;
  }

  public int getIslandTag() const {
    auto ret = BTPhysics_im.btCollisionObject_getIslandTag(cast(void*)swigCPtr);
    return ret;
  }

  public void setIslandTag(int tag) {
    BTPhysics_im.btCollisionObject_setIslandTag(cast(void*)swigCPtr, tag);
  }

  public int getCompanionId() const {
    auto ret = BTPhysics_im.btCollisionObject_getCompanionId(cast(void*)swigCPtr);
    return ret;
  }

  public void setCompanionId(int id) {
    BTPhysics_im.btCollisionObject_setCompanionId(cast(void*)swigCPtr, id);
  }

  public float getHitFraction() const {
    auto ret = BTPhysics_im.btCollisionObject_getHitFraction(cast(void*)swigCPtr);
    return ret;
  }

  public void setHitFraction(float hitFraction) {
    BTPhysics_im.btCollisionObject_setHitFraction(cast(void*)swigCPtr, hitFraction);
  }

  public int getCollisionFlags() const {
    auto ret = BTPhysics_im.btCollisionObject_getCollisionFlags(cast(void*)swigCPtr);
    return ret;
  }

  public void setCollisionFlags(int flags) {
    BTPhysics_im.btCollisionObject_setCollisionFlags(cast(void*)swigCPtr, flags);
  }

  public float getCcdSweptSphereRadius() const {
    auto ret = BTPhysics_im.btCollisionObject_getCcdSweptSphereRadius(cast(void*)swigCPtr);
    return ret;
  }

  public void setCcdSweptSphereRadius(float radius) {
    BTPhysics_im.btCollisionObject_setCcdSweptSphereRadius(cast(void*)swigCPtr, radius);
  }

  public float getCcdMotionThreshold() const {
    auto ret = BTPhysics_im.btCollisionObject_getCcdMotionThreshold(cast(void*)swigCPtr);
    return ret;
  }

  public float getCcdSquareMotionThreshold() const {
    auto ret = BTPhysics_im.btCollisionObject_getCcdSquareMotionThreshold(cast(void*)swigCPtr);
    return ret;
  }

  public void setCcdMotionThreshold(float ccdMotionThreshold) {
    BTPhysics_im.btCollisionObject_setCcdMotionThreshold(cast(void*)swigCPtr, ccdMotionThreshold);
  }

  public void* getUserPointer() const {
    auto ret = cast(void*)BTPhysics_im.btCollisionObject_getUserPointer(cast(void*)swigCPtr);
    return ret;
  }

  public void setUserPointer(void* userPointer) {
    BTPhysics_im.btCollisionObject_setUserPointer(cast(void*)swigCPtr, cast(void*)userPointer);
  }

  public bool checkCollideWith(btCollisionObject co) {
    bool ret = BTPhysics_im.btCollisionObject_checkCollideWith(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(co)) ? true : false;
    return ret;
  }

  public int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btCollisionObject_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btCollisionObject_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }

  public void serializeSingleObject(btSerializer serializer) const {
    BTPhysics_im.btCollisionObject_serializeSingleObject(cast(void*)swigCPtr, btSerializer.swigGetCPtr(serializer));
  }
}

class btCollisionObjectDoubleData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btCollisionObjectDoubleData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCollisionObjectDoubleData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_broadphaseHandle(void* value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_broadphaseHandle_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public void* m_broadphaseHandle() @property const {
    auto ret = cast(void*)BTPhysics_im.btCollisionObjectDoubleData_m_broadphaseHandle_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_collisionShape(void* value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_collisionShape_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public void* m_collisionShape() @property const {
    auto ret = cast(void*)BTPhysics_im.btCollisionObjectDoubleData_m_collisionShape_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_rootCollisionShape(btCollisionShapeData value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_rootCollisionShape_set(cast(void*)swigCPtr, btCollisionShapeData.swigGetCPtr(value));
  }

  public btCollisionShapeData m_rootCollisionShape() @property const {
    void* cPtr = BTPhysics_im.btCollisionObjectDoubleData_m_rootCollisionShape_get(cast(void*)swigCPtr);
    btCollisionShapeData ret = (cPtr is null) ? null : new btCollisionShapeData(cPtr, false);
    return ret;
  }

  public void m_name(string value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_name_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_name() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btCollisionObjectDoubleData_m_name_get(cast(void*)swigCPtr));
    return ret;
  }

  public void m_worldTransform(btTransformDoubleData value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_worldTransform_set(cast(void*)swigCPtr, btTransformDoubleData.swigGetCPtr(value));
  }

  public btTransformDoubleData m_worldTransform() @property const {
    void* cPtr = BTPhysics_im.btCollisionObjectDoubleData_m_worldTransform_get(cast(void*)swigCPtr);
    btTransformDoubleData ret = (cPtr is null) ? null : new btTransformDoubleData(cPtr, false);
    return ret;
  }

  public void m_interpolationWorldTransform(btTransformDoubleData value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_interpolationWorldTransform_set(cast(void*)swigCPtr, btTransformDoubleData.swigGetCPtr(value));
  }

  public btTransformDoubleData m_interpolationWorldTransform() @property const {
    void* cPtr = BTPhysics_im.btCollisionObjectDoubleData_m_interpolationWorldTransform_get(cast(void*)swigCPtr);
    btTransformDoubleData ret = (cPtr is null) ? null : new btTransformDoubleData(cPtr, false);
    return ret;
  }

  public void m_interpolationLinearVelocity(btVector3DoubleData value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_interpolationLinearVelocity_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_interpolationLinearVelocity() @property const {
    void* cPtr = BTPhysics_im.btCollisionObjectDoubleData_m_interpolationLinearVelocity_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_interpolationAngularVelocity(btVector3DoubleData value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_interpolationAngularVelocity_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_interpolationAngularVelocity() @property const {
    void* cPtr = BTPhysics_im.btCollisionObjectDoubleData_m_interpolationAngularVelocity_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_anisotropicFriction(btVector3DoubleData value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_anisotropicFriction_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_anisotropicFriction() @property const {
    void* cPtr = BTPhysics_im.btCollisionObjectDoubleData_m_anisotropicFriction_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_contactProcessingThreshold(double value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_contactProcessingThreshold_set(cast(void*)swigCPtr, value);
  }

  public double m_contactProcessingThreshold() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_contactProcessingThreshold_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_deactivationTime(double value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_deactivationTime_set(cast(void*)swigCPtr, value);
  }

  public double m_deactivationTime() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_deactivationTime_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_friction(double value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_friction_set(cast(void*)swigCPtr, value);
  }

  public double m_friction() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_friction_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_restitution(double value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_restitution_set(cast(void*)swigCPtr, value);
  }

  public double m_restitution() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_restitution_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_hitFraction(double value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_hitFraction_set(cast(void*)swigCPtr, value);
  }

  public double m_hitFraction() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_hitFraction_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_ccdSweptSphereRadius(double value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set(cast(void*)swigCPtr, value);
  }

  public double m_ccdSweptSphereRadius() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_ccdMotionThreshold(double value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_ccdMotionThreshold_set(cast(void*)swigCPtr, value);
  }

  public double m_ccdMotionThreshold() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_ccdMotionThreshold_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_hasAnisotropicFriction(int value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_hasAnisotropicFriction_set(cast(void*)swigCPtr, value);
  }

  public int m_hasAnisotropicFriction() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_hasAnisotropicFriction_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_collisionFlags(int value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_collisionFlags_set(cast(void*)swigCPtr, value);
  }

  public int m_collisionFlags() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_collisionFlags_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_islandTag1(int value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_islandTag1_set(cast(void*)swigCPtr, value);
  }

  public int m_islandTag1() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_islandTag1_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_companionId(int value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_companionId_set(cast(void*)swigCPtr, value);
  }

  public int m_companionId() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_companionId_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_activationState1(int value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_activationState1_set(cast(void*)swigCPtr, value);
  }

  public int m_activationState1() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_activationState1_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_internalType(int value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_internalType_set(cast(void*)swigCPtr, value);
  }

  public int m_internalType() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_internalType_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_checkCollideWith(int value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_checkCollideWith_set(cast(void*)swigCPtr, value);
  }

  public int m_checkCollideWith() @property const {
    auto ret = BTPhysics_im.btCollisionObjectDoubleData_m_checkCollideWith_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_padding(string value) @property {
    BTPhysics_im.btCollisionObjectDoubleData_m_padding_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_padding() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btCollisionObjectDoubleData_m_padding_get(cast(void*)swigCPtr));
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btCollisionObjectDoubleData(), true);
  }
}

class btCollisionObjectFloatData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btCollisionObjectFloatData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCollisionObjectFloatData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_broadphaseHandle(void* value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_broadphaseHandle_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public void* m_broadphaseHandle() @property const {
    auto ret = cast(void*)BTPhysics_im.btCollisionObjectFloatData_m_broadphaseHandle_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_collisionShape(void* value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_collisionShape_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public void* m_collisionShape() @property const {
    auto ret = cast(void*)BTPhysics_im.btCollisionObjectFloatData_m_collisionShape_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_rootCollisionShape(btCollisionShapeData value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_rootCollisionShape_set(cast(void*)swigCPtr, btCollisionShapeData.swigGetCPtr(value));
  }

  public btCollisionShapeData m_rootCollisionShape() @property const {
    void* cPtr = BTPhysics_im.btCollisionObjectFloatData_m_rootCollisionShape_get(cast(void*)swigCPtr);
    btCollisionShapeData ret = (cPtr is null) ? null : new btCollisionShapeData(cPtr, false);
    return ret;
  }

  public void m_name(string value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_name_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_name() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btCollisionObjectFloatData_m_name_get(cast(void*)swigCPtr));
    return ret;
  }

  public void m_worldTransform(btTransformFloatData value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_worldTransform_set(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(value));
  }

  public btTransformFloatData m_worldTransform() @property const {
    void* cPtr = BTPhysics_im.btCollisionObjectFloatData_m_worldTransform_get(cast(void*)swigCPtr);
    btTransformFloatData ret = (cPtr is null) ? null : new btTransformFloatData(cPtr, false);
    return ret;
  }

  public void m_interpolationWorldTransform(btTransformFloatData value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_interpolationWorldTransform_set(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(value));
  }

  public btTransformFloatData m_interpolationWorldTransform() @property const {
    void* cPtr = BTPhysics_im.btCollisionObjectFloatData_m_interpolationWorldTransform_get(cast(void*)swigCPtr);
    btTransformFloatData ret = (cPtr is null) ? null : new btTransformFloatData(cPtr, false);
    return ret;
  }

  public void m_interpolationLinearVelocity(btVector3FloatData value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_interpolationLinearVelocity_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_interpolationLinearVelocity() @property const {
    void* cPtr = BTPhysics_im.btCollisionObjectFloatData_m_interpolationLinearVelocity_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_interpolationAngularVelocity(btVector3FloatData value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_interpolationAngularVelocity_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_interpolationAngularVelocity() @property const {
    void* cPtr = BTPhysics_im.btCollisionObjectFloatData_m_interpolationAngularVelocity_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_anisotropicFriction(btVector3FloatData value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_anisotropicFriction_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_anisotropicFriction() @property const {
    void* cPtr = BTPhysics_im.btCollisionObjectFloatData_m_anisotropicFriction_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_contactProcessingThreshold(float value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_contactProcessingThreshold_set(cast(void*)swigCPtr, value);
  }

  public float m_contactProcessingThreshold() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_contactProcessingThreshold_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_deactivationTime(float value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_deactivationTime_set(cast(void*)swigCPtr, value);
  }

  public float m_deactivationTime() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_deactivationTime_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_friction(float value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_friction_set(cast(void*)swigCPtr, value);
  }

  public float m_friction() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_friction_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_restitution(float value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_restitution_set(cast(void*)swigCPtr, value);
  }

  public float m_restitution() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_restitution_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_hitFraction(float value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_hitFraction_set(cast(void*)swigCPtr, value);
  }

  public float m_hitFraction() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_hitFraction_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_ccdSweptSphereRadius(float value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_ccdSweptSphereRadius_set(cast(void*)swigCPtr, value);
  }

  public float m_ccdSweptSphereRadius() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_ccdSweptSphereRadius_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_ccdMotionThreshold(float value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_ccdMotionThreshold_set(cast(void*)swigCPtr, value);
  }

  public float m_ccdMotionThreshold() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_ccdMotionThreshold_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_hasAnisotropicFriction(int value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_hasAnisotropicFriction_set(cast(void*)swigCPtr, value);
  }

  public int m_hasAnisotropicFriction() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_hasAnisotropicFriction_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_collisionFlags(int value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_collisionFlags_set(cast(void*)swigCPtr, value);
  }

  public int m_collisionFlags() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_collisionFlags_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_islandTag1(int value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_islandTag1_set(cast(void*)swigCPtr, value);
  }

  public int m_islandTag1() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_islandTag1_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_companionId(int value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_companionId_set(cast(void*)swigCPtr, value);
  }

  public int m_companionId() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_companionId_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_activationState1(int value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_activationState1_set(cast(void*)swigCPtr, value);
  }

  public int m_activationState1() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_activationState1_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_internalType(int value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_internalType_set(cast(void*)swigCPtr, value);
  }

  public int m_internalType() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_internalType_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_checkCollideWith(int value) @property {
    BTPhysics_im.btCollisionObjectFloatData_m_checkCollideWith_set(cast(void*)swigCPtr, value);
  }

  public int m_checkCollideWith() @property const {
    auto ret = BTPhysics_im.btCollisionObjectFloatData_m_checkCollideWith_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btCollisionObjectFloatData(), true);
  }
}

class btCollisionShape {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btCollisionShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCollisionShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btCollisionShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getBoundingSphere(btVector3 center, float* radius) const {
    BTPhysics_im.btCollisionShape_getBoundingSphere(cast(void*)swigCPtr, btVector3.swigGetCPtr(center), cast(void*)radius);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public float getAngularMotionDisc() const {
    auto ret = BTPhysics_im.btCollisionShape_getAngularMotionDisc(cast(void*)swigCPtr);
    return ret;
  }

  public float getContactBreakingThreshold(float defaultContactThresholdFactor) const {
    auto ret = BTPhysics_im.btCollisionShape_getContactBreakingThreshold(cast(void*)swigCPtr, defaultContactThresholdFactor);
    return ret;
  }

  public void calculateTemporalAabb(btTransform curTrans, btVector3 linvel, btVector3 angvel, float timeStep, btVector3 temporalAabbMin, btVector3 temporalAabbMax) const {
    BTPhysics_im.btCollisionShape_calculateTemporalAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(curTrans), btVector3.swigGetCPtr(linvel), btVector3.swigGetCPtr(angvel), timeStep, btVector3.swigGetCPtr(temporalAabbMin), btVector3.swigGetCPtr(temporalAabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public bool isPolyhedral() const {
    bool ret = BTPhysics_im.btCollisionShape_isPolyhedral(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isConvex2d() const {
    bool ret = BTPhysics_im.btCollisionShape_isConvex2d(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isConvex() const {
    bool ret = BTPhysics_im.btCollisionShape_isConvex(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isNonMoving() const {
    bool ret = BTPhysics_im.btCollisionShape_isNonMoving(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isConcave() const {
    bool ret = BTPhysics_im.btCollisionShape_isConcave(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isCompound() const {
    bool ret = BTPhysics_im.btCollisionShape_isCompound(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isSoftBody() const {
    bool ret = BTPhysics_im.btCollisionShape_isSoftBody(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isInfinite() const {
    bool ret = BTPhysics_im.btCollisionShape_isInfinite(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btCollisionShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getLocalScaling() const {
    btVector3 ret = new btVector3(BTPhysics_im.btCollisionShape_getLocalScaling(cast(void*)swigCPtr), false);
    return ret;
  }

  public void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btCollisionShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btCollisionShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public int getShapeType() const {
    auto ret = BTPhysics_im.btCollisionShape_getShapeType(cast(void*)swigCPtr);
    return ret;
  }

  public void setMargin(float margin) {
    BTPhysics_im.btCollisionShape_setMargin(cast(void*)swigCPtr, margin);
  }

  public float getMargin() const {
    auto ret = BTPhysics_im.btCollisionShape_getMargin(cast(void*)swigCPtr);
    return ret;
  }

  public void setUserPointer(void* userPtr) {
    BTPhysics_im.btCollisionShape_setUserPointer(cast(void*)swigCPtr, cast(void*)userPtr);
  }

  public void* getUserPointer() const {
    auto ret = cast(void*)BTPhysics_im.btCollisionShape_getUserPointer(cast(void*)swigCPtr);
    return ret;
  }

  public int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btCollisionShape_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btCollisionShape_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }

  public void serializeSingleShape(btSerializer serializer) const {
    BTPhysics_im.btCollisionShape_serializeSingleShape(cast(void*)swigCPtr, btSerializer.swigGetCPtr(serializer));
  }
}

class btCollisionShapeData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btCollisionShapeData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCollisionShapeData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_name(string value) @property {
    BTPhysics_im.btCollisionShapeData_m_name_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_name() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btCollisionShapeData_m_name_get(cast(void*)swigCPtr));
    return ret;
  }

  public void m_shapeType(int value) @property {
    BTPhysics_im.btCollisionShapeData_m_shapeType_set(cast(void*)swigCPtr, value);
  }

  public int m_shapeType() @property const {
    auto ret = BTPhysics_im.btCollisionShapeData_m_shapeType_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_padding(string value) @property {
    BTPhysics_im.btCollisionShapeData_m_padding_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_padding() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btCollisionShapeData_m_padding_get(cast(void*)swigCPtr));
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btCollisionShapeData(), true);
  }
}

int MAX_PREFERRED_PENETRATION_DIRECTIONS() @property {
  auto ret = BTPhysics_im.MAX_PREFERRED_PENETRATION_DIRECTIONS_get();
  return ret;
}

class btConvexShape : btCollisionShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btConvexShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btConvexShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConvexShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public btVector3 localGetSupportingVertex(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexShape_localGetSupportingVertex(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexShape_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btVector3 localGetSupportVertexWithoutMarginNonVirtual(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexShape_localGetSupportVertexWithoutMarginNonVirtual(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btVector3 localGetSupportVertexNonVirtual(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexShape_localGetSupportVertexNonVirtual(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public float getMarginNonVirtual() const {
    auto ret = BTPhysics_im.btConvexShape_getMarginNonVirtual(cast(void*)swigCPtr);
    return ret;
  }

  public void getAabbNonVirtual(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btConvexShape_getAabbNonVirtual(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void project(btTransform trans, btVector3 dir, float* min, float* max) const {
    BTPhysics_im.btConvexShape_project(cast(void*)swigCPtr, btTransform.swigGetCPtr(trans), btVector3.swigGetCPtr(dir), cast(void*)min, cast(void*)max);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) const {
    BTPhysics_im.btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vectors), btVector3.swigGetCPtr(supportVerticesOut), numVectors);
  }

  public override void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btConvexShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getAabbSlow(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btConvexShape_getAabbSlow(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btConvexShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override btVector3 getLocalScaling() const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexShape_getLocalScaling(cast(void*)swigCPtr), false);
    return ret;
  }

  public override void setMargin(float margin) {
    BTPhysics_im.btConvexShape_setMargin(cast(void*)swigCPtr, margin);
  }

  public override float getMargin() const {
    auto ret = BTPhysics_im.btConvexShape_getMargin(cast(void*)swigCPtr);
    return ret;
  }

  public int getNumPreferredPenetrationDirections() const {
    auto ret = BTPhysics_im.btConvexShape_getNumPreferredPenetrationDirections(cast(void*)swigCPtr);
    return ret;
  }

  public void getPreferredPenetrationDirection(int index, btVector3 penetrationVector) const {
    BTPhysics_im.btConvexShape_getPreferredPenetrationDirection(cast(void*)swigCPtr, index, btVector3.swigGetCPtr(penetrationVector));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

class btConvexInternalShape : btConvexShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btConvexInternalShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btConvexInternalShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConvexInternalShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public override btVector3 localGetSupportingVertex(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexInternalShape_localGetSupportingVertex(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btVector3 getImplicitShapeDimensions() const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexInternalShape_getImplicitShapeDimensions(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setImplicitShapeDimensions(btVector3 dimensions) {
    BTPhysics_im.btConvexInternalShape_setImplicitShapeDimensions(cast(void*)swigCPtr, btVector3.swigGetCPtr(dimensions));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setSafeMargin(float minDimension, float defaultMarginMultiplier) {
    BTPhysics_im.btConvexInternalShape_setSafeMargin__SWIG_0(cast(void*)swigCPtr, minDimension, defaultMarginMultiplier);
  }

  public void setSafeMargin(float minDimension) {
    BTPhysics_im.btConvexInternalShape_setSafeMargin__SWIG_1(cast(void*)swigCPtr, minDimension);
  }

  public void setSafeMargin(btVector3 halfExtents, float defaultMarginMultiplier) {
    BTPhysics_im.btConvexInternalShape_setSafeMargin__SWIG_2(cast(void*)swigCPtr, btVector3.swigGetCPtr(halfExtents), defaultMarginMultiplier);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setSafeMargin(btVector3 halfExtents) {
    BTPhysics_im.btConvexInternalShape_setSafeMargin__SWIG_3(cast(void*)swigCPtr, btVector3.swigGetCPtr(halfExtents));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btConvexInternalShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getAabbSlow(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btConvexInternalShape_getAabbSlow(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btConvexInternalShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override btVector3 getLocalScaling() const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexInternalShape_getLocalScaling(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getLocalScalingNV() const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexInternalShape_getLocalScalingNV(cast(void*)swigCPtr), false);
    return ret;
  }

  public override void setMargin(float margin) {
    BTPhysics_im.btConvexInternalShape_setMargin(cast(void*)swigCPtr, margin);
  }

  public override float getMargin() const {
    auto ret = BTPhysics_im.btConvexInternalShape_getMargin(cast(void*)swigCPtr);
    return ret;
  }

  public float getMarginNV() const {
    auto ret = BTPhysics_im.btConvexInternalShape_getMarginNV(cast(void*)swigCPtr);
    return ret;
  }

  public override int getNumPreferredPenetrationDirections() const {
    auto ret = BTPhysics_im.btConvexInternalShape_getNumPreferredPenetrationDirections(cast(void*)swigCPtr);
    return ret;
  }

  public override void getPreferredPenetrationDirection(int index, btVector3 penetrationVector) const {
    BTPhysics_im.btConvexInternalShape_getPreferredPenetrationDirection(cast(void*)swigCPtr, index, btVector3.swigGetCPtr(penetrationVector));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btConvexInternalShape_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btConvexInternalShape_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btConvexInternalShapeData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btConvexInternalShapeData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConvexInternalShapeData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_collisionShapeData(btCollisionShapeData value) @property {
    BTPhysics_im.btConvexInternalShapeData_m_collisionShapeData_set(cast(void*)swigCPtr, btCollisionShapeData.swigGetCPtr(value));
  }

  public btCollisionShapeData m_collisionShapeData() @property const {
    void* cPtr = BTPhysics_im.btConvexInternalShapeData_m_collisionShapeData_get(cast(void*)swigCPtr);
    btCollisionShapeData ret = (cPtr is null) ? null : new btCollisionShapeData(cPtr, false);
    return ret;
  }

  public void m_localScaling(btVector3FloatData value) @property {
    BTPhysics_im.btConvexInternalShapeData_m_localScaling_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_localScaling() @property const {
    void* cPtr = BTPhysics_im.btConvexInternalShapeData_m_localScaling_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_implicitShapeDimensions(btVector3FloatData value) @property {
    BTPhysics_im.btConvexInternalShapeData_m_implicitShapeDimensions_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_implicitShapeDimensions() @property const {
    void* cPtr = BTPhysics_im.btConvexInternalShapeData_m_implicitShapeDimensions_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_collisionMargin(float value) @property {
    BTPhysics_im.btConvexInternalShapeData_m_collisionMargin_set(cast(void*)swigCPtr, value);
  }

  public float m_collisionMargin() @property const {
    auto ret = BTPhysics_im.btConvexInternalShapeData_m_collisionMargin_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_padding(int value) @property {
    BTPhysics_im.btConvexInternalShapeData_m_padding_set(cast(void*)swigCPtr, value);
  }

  public int m_padding() @property const {
    auto ret = BTPhysics_im.btConvexInternalShapeData_m_padding_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btConvexInternalShapeData(), true);
  }
}

class btConvexInternalAabbCachingShape : btConvexInternalShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btConvexInternalAabbCachingShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btConvexInternalAabbCachingShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConvexInternalAabbCachingShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public override void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btConvexInternalAabbCachingShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btConvexInternalAabbCachingShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void recalcLocalAabb() {
    BTPhysics_im.btConvexInternalAabbCachingShape_recalcLocalAabb(cast(void*)swigCPtr);
  }
}

class btPolyhedralConvexShape : btConvexInternalShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btPolyhedralConvexShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btPolyhedralConvexShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btPolyhedralConvexShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public bool initializePolyhedralFeatures() {
    bool ret = BTPhysics_im.btPolyhedralConvexShape_initializePolyhedralFeatures(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public SWIGTYPE_p_btConvexPolyhedron getConvexPolyhedron() const {
    void* cPtr = BTPhysics_im.btPolyhedralConvexShape_getConvexPolyhedron(cast(void*)swigCPtr);
    SWIGTYPE_p_btConvexPolyhedron ret = (cPtr is null) ? null : new SWIGTYPE_p_btConvexPolyhedron(cPtr, false);
    return ret;
  }

  public override btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) const {
    BTPhysics_im.btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vectors), btVector3.swigGetCPtr(supportVerticesOut), numVectors);
  }

  public override void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btPolyhedralConvexShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public int getNumVertices() const {
    auto ret = BTPhysics_im.btPolyhedralConvexShape_getNumVertices(cast(void*)swigCPtr);
    return ret;
  }

  public int getNumEdges() const {
    auto ret = BTPhysics_im.btPolyhedralConvexShape_getNumEdges(cast(void*)swigCPtr);
    return ret;
  }

  public void getEdge(int i, btVector3 pa, btVector3 pb) const {
    BTPhysics_im.btPolyhedralConvexShape_getEdge(cast(void*)swigCPtr, i, btVector3.swigGetCPtr(pa), btVector3.swigGetCPtr(pb));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getVertex(int i, btVector3 vtx) const {
    BTPhysics_im.btPolyhedralConvexShape_getVertex(cast(void*)swigCPtr, i, btVector3.swigGetCPtr(vtx));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public int getNumPlanes() const {
    auto ret = BTPhysics_im.btPolyhedralConvexShape_getNumPlanes(cast(void*)swigCPtr);
    return ret;
  }

  public void getPlane(btVector3 planeNormal, btVector3 planeSupport, int i) const {
    BTPhysics_im.btPolyhedralConvexShape_getPlane(cast(void*)swigCPtr, btVector3.swigGetCPtr(planeNormal), btVector3.swigGetCPtr(planeSupport), i);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public bool isInside(btVector3 pt, float tolerance) const {
    bool ret = BTPhysics_im.btPolyhedralConvexShape_isInside(cast(void*)swigCPtr, btVector3.swigGetCPtr(pt), tolerance) ? true : false;
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }
}

class btPolyhedralConvexAabbCachingShape : btPolyhedralConvexShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btPolyhedralConvexAabbCachingShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btPolyhedralConvexAabbCachingShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btPolyhedralConvexAabbCachingShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void getNonvirtualAabb(btTransform trans, btVector3 aabbMin, btVector3 aabbMax, float margin) const {
    BTPhysics_im.btPolyhedralConvexAabbCachingShape_getNonvirtualAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(trans), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax), margin);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btPolyhedralConvexAabbCachingShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btPolyhedralConvexAabbCachingShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void recalcLocalAabb() {
    BTPhysics_im.btPolyhedralConvexAabbCachingShape_recalcLocalAabb(cast(void*)swigCPtr);
  }
}

class btBoxShape : btPolyhedralConvexShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btBoxShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btBoxShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btBoxShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public btVector3 getHalfExtentsWithMargin() const {
    btVector3 ret = new btVector3(BTPhysics_im.btBoxShape_getHalfExtentsWithMargin(cast(void*)swigCPtr), true);
    return ret;
  }

  public btVector3 getHalfExtentsWithoutMargin() const {
    btVector3 ret = new btVector3(BTPhysics_im.btBoxShape_getHalfExtentsWithoutMargin(cast(void*)swigCPtr), false);
    return ret;
  }

  public override btVector3 localGetSupportingVertex(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btBoxShape_localGetSupportingVertex(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btBoxShape_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) const {
    BTPhysics_im.btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vectors), btVector3.swigGetCPtr(supportVerticesOut), numVectors);
  }

  public this(btVector3 boxHalfExtents) {
    this(BTPhysics_im.new_btBoxShape(btVector3.swigGetCPtr(boxHalfExtents)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void setMargin(float collisionMargin) {
    BTPhysics_im.btBoxShape_setMargin(cast(void*)swigCPtr, collisionMargin);
  }

  public override void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btBoxShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btBoxShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btBoxShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getPlane(btVector3 planeNormal, btVector3 planeSupport, int i) const {
    BTPhysics_im.btBoxShape_getPlane(cast(void*)swigCPtr, btVector3.swigGetCPtr(planeNormal), btVector3.swigGetCPtr(planeSupport), i);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override int getNumPlanes() const {
    auto ret = BTPhysics_im.btBoxShape_getNumPlanes(cast(void*)swigCPtr);
    return ret;
  }

  public override int getNumVertices() const {
    auto ret = BTPhysics_im.btBoxShape_getNumVertices(cast(void*)swigCPtr);
    return ret;
  }

  public override int getNumEdges() const {
    auto ret = BTPhysics_im.btBoxShape_getNumEdges(cast(void*)swigCPtr);
    return ret;
  }

  public override void getVertex(int i, btVector3 vtx) const {
    BTPhysics_im.btBoxShape_getVertex(cast(void*)swigCPtr, i, btVector3.swigGetCPtr(vtx));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getPlaneEquation(btVector4 plane, int i) const {
    BTPhysics_im.btBoxShape_getPlaneEquation(cast(void*)swigCPtr, btVector4.swigGetCPtr(plane), i);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getEdge(int i, btVector3 pa, btVector3 pb) const {
    BTPhysics_im.btBoxShape_getEdge(cast(void*)swigCPtr, i, btVector3.swigGetCPtr(pa), btVector3.swigGetCPtr(pb));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override bool isInside(btVector3 pt, float tolerance) const {
    bool ret = BTPhysics_im.btBoxShape_isInside(cast(void*)swigCPtr, btVector3.swigGetCPtr(pt), tolerance) ? true : false;
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btBoxShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public override int getNumPreferredPenetrationDirections() const {
    auto ret = BTPhysics_im.btBoxShape_getNumPreferredPenetrationDirections(cast(void*)swigCPtr);
    return ret;
  }

  public override void getPreferredPenetrationDirection(int index, btVector3 penetrationVector) const {
    BTPhysics_im.btBoxShape_getPreferredPenetrationDirection(cast(void*)swigCPtr, index, btVector3.swigGetCPtr(penetrationVector));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

class btSphereShape : btConvexInternalShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btSphereShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btSphereShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btSphereShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(float radius) {
    this(BTPhysics_im.new_btSphereShape(radius), true);
  }

  public override btVector3 localGetSupportingVertex(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btSphereShape_localGetSupportingVertex(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btSphereShape_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) const {
    BTPhysics_im.btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vectors), btVector3.swigGetCPtr(supportVerticesOut), numVectors);
  }

  public override void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btSphereShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btSphereShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public float getRadius() const {
    auto ret = BTPhysics_im.btSphereShape_getRadius(cast(void*)swigCPtr);
    return ret;
  }

  public void setUnscaledRadius(float radius) {
    BTPhysics_im.btSphereShape_setUnscaledRadius(cast(void*)swigCPtr, radius);
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btSphereShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public override void setMargin(float margin) {
    BTPhysics_im.btSphereShape_setMargin(cast(void*)swigCPtr, margin);
  }

  public override float getMargin() const {
    auto ret = BTPhysics_im.btSphereShape_getMargin(cast(void*)swigCPtr);
    return ret;
  }
}

class btCapsuleShape : btConvexInternalShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btCapsuleShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btCapsuleShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCapsuleShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(float radius, float height) {
    this(BTPhysics_im.new_btCapsuleShape__SWIG_1(radius, height), true);
  }

  public override void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btCapsuleShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btCapsuleShape_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) const {
    BTPhysics_im.btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vectors), btVector3.swigGetCPtr(supportVerticesOut), numVectors);
  }

  public override void setMargin(float collisionMargin) {
    BTPhysics_im.btCapsuleShape_setMargin(cast(void*)swigCPtr, collisionMargin);
  }

  public override void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btCapsuleShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btCapsuleShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public int getUpAxis() const {
    auto ret = BTPhysics_im.btCapsuleShape_getUpAxis(cast(void*)swigCPtr);
    return ret;
  }

  public float getRadius() const {
    auto ret = BTPhysics_im.btCapsuleShape_getRadius(cast(void*)swigCPtr);
    return ret;
  }

  public float getHalfHeight() const {
    auto ret = BTPhysics_im.btCapsuleShape_getHalfHeight(cast(void*)swigCPtr);
    return ret;
  }

  public override void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btCapsuleShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btCapsuleShape_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btCapsuleShape_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btCapsuleShapeX : btCapsuleShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btCapsuleShapeX_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btCapsuleShapeX obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCapsuleShapeX(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(float radius, float height) {
    this(BTPhysics_im.new_btCapsuleShapeX(radius, height), true);
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btCapsuleShapeX_getName(cast(void*)swigCPtr));
    return ret;
  }
}

class btCapsuleShapeZ : btCapsuleShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btCapsuleShapeZ_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btCapsuleShapeZ obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCapsuleShapeZ(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(float radius, float height) {
    this(BTPhysics_im.new_btCapsuleShapeZ(radius, height), true);
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btCapsuleShapeZ_getName(cast(void*)swigCPtr));
    return ret;
  }
}

class btCapsuleShapeData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btCapsuleShapeData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCapsuleShapeData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_convexInternalShapeData(btConvexInternalShapeData value) @property {
    BTPhysics_im.btCapsuleShapeData_m_convexInternalShapeData_set(cast(void*)swigCPtr, btConvexInternalShapeData.swigGetCPtr(value));
  }

  public btConvexInternalShapeData m_convexInternalShapeData() @property const {
    void* cPtr = BTPhysics_im.btCapsuleShapeData_m_convexInternalShapeData_get(cast(void*)swigCPtr);
    btConvexInternalShapeData ret = (cPtr is null) ? null : new btConvexInternalShapeData(cPtr, false);
    return ret;
  }

  public void m_upAxis(int value) @property {
    BTPhysics_im.btCapsuleShapeData_m_upAxis_set(cast(void*)swigCPtr, value);
  }

  public int m_upAxis() @property const {
    auto ret = BTPhysics_im.btCapsuleShapeData_m_upAxis_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_padding(string value) @property {
    BTPhysics_im.btCapsuleShapeData_m_padding_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_padding() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btCapsuleShapeData_m_padding_get(cast(void*)swigCPtr));
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btCapsuleShapeData(), true);
  }
}

class btCylinderShape : btConvexInternalShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btCylinderShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btCylinderShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCylinderShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public btVector3 getHalfExtentsWithMargin() const {
    btVector3 ret = new btVector3(BTPhysics_im.btCylinderShape_getHalfExtentsWithMargin(cast(void*)swigCPtr), true);
    return ret;
  }

  public btVector3 getHalfExtentsWithoutMargin() const {
    btVector3 ret = new btVector3(BTPhysics_im.btCylinderShape_getHalfExtentsWithoutMargin(cast(void*)swigCPtr), false);
    return ret;
  }

  public this(btVector3 halfExtents) {
    this(BTPhysics_im.new_btCylinderShape(btVector3.swigGetCPtr(halfExtents)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btCylinderShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btCylinderShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btCylinderShape_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) const {
    BTPhysics_im.btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vectors), btVector3.swigGetCPtr(supportVerticesOut), numVectors);
  }

  public override void setMargin(float collisionMargin) {
    BTPhysics_im.btCylinderShape_setMargin(cast(void*)swigCPtr, collisionMargin);
  }

  public override btVector3 localGetSupportingVertex(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btCylinderShape_localGetSupportingVertex(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public int getUpAxis() const {
    auto ret = BTPhysics_im.btCylinderShape_getUpAxis(cast(void*)swigCPtr);
    return ret;
  }

  public float getRadius() const {
    auto ret = BTPhysics_im.btCylinderShape_getRadius(cast(void*)swigCPtr);
    return ret;
  }

  public override void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btCylinderShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btCylinderShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public override int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btCylinderShape_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btCylinderShape_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btCylinderShapeX : btCylinderShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btCylinderShapeX_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btCylinderShapeX obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCylinderShapeX(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(btVector3 halfExtents) {
    this(BTPhysics_im.new_btCylinderShapeX(btVector3.swigGetCPtr(halfExtents)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btCylinderShapeX_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) const {
    BTPhysics_im.btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vectors), btVector3.swigGetCPtr(supportVerticesOut), numVectors);
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btCylinderShapeX_getName(cast(void*)swigCPtr));
    return ret;
  }

  public override float getRadius() const {
    auto ret = BTPhysics_im.btCylinderShapeX_getRadius(cast(void*)swigCPtr);
    return ret;
  }
}

class btCylinderShapeZ : btCylinderShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btCylinderShapeZ_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btCylinderShapeZ obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCylinderShapeZ(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(btVector3 halfExtents) {
    this(BTPhysics_im.new_btCylinderShapeZ(btVector3.swigGetCPtr(halfExtents)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btCylinderShapeZ_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) const {
    BTPhysics_im.btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vectors), btVector3.swigGetCPtr(supportVerticesOut), numVectors);
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btCylinderShapeZ_getName(cast(void*)swigCPtr));
    return ret;
  }

  public override float getRadius() const {
    auto ret = BTPhysics_im.btCylinderShapeZ_getRadius(cast(void*)swigCPtr);
    return ret;
  }
}

class btCylinderShapeData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btCylinderShapeData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCylinderShapeData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_convexInternalShapeData(btConvexInternalShapeData value) @property {
    BTPhysics_im.btCylinderShapeData_m_convexInternalShapeData_set(cast(void*)swigCPtr, btConvexInternalShapeData.swigGetCPtr(value));
  }

  public btConvexInternalShapeData m_convexInternalShapeData() @property const {
    void* cPtr = BTPhysics_im.btCylinderShapeData_m_convexInternalShapeData_get(cast(void*)swigCPtr);
    btConvexInternalShapeData ret = (cPtr is null) ? null : new btConvexInternalShapeData(cPtr, false);
    return ret;
  }

  public void m_upAxis(int value) @property {
    BTPhysics_im.btCylinderShapeData_m_upAxis_set(cast(void*)swigCPtr, value);
  }

  public int m_upAxis() @property const {
    auto ret = BTPhysics_im.btCylinderShapeData_m_upAxis_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_padding(string value) @property {
    BTPhysics_im.btCylinderShapeData_m_padding_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_padding() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btCylinderShapeData_m_padding_get(cast(void*)swigCPtr));
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btCylinderShapeData(), true);
  }
}

class btConeShape : btConvexInternalShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btConeShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btConeShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConeShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(float radius, float height) {
    this(BTPhysics_im.new_btConeShape(radius, height), true);
  }

  public override btVector3 localGetSupportingVertex(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btConeShape_localGetSupportingVertex(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btConeShape_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) const {
    BTPhysics_im.btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vectors), btVector3.swigGetCPtr(supportVerticesOut), numVectors);
  }

  public float getRadius() const {
    auto ret = BTPhysics_im.btConeShape_getRadius(cast(void*)swigCPtr);
    return ret;
  }

  public float getHeight() const {
    auto ret = BTPhysics_im.btConeShape_getHeight(cast(void*)swigCPtr);
    return ret;
  }

  public override void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btConeShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btConeShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public void setConeUpIndex(int upIndex) {
    BTPhysics_im.btConeShape_setConeUpIndex(cast(void*)swigCPtr, upIndex);
  }

  public int getConeUpIndex() const {
    auto ret = BTPhysics_im.btConeShape_getConeUpIndex(cast(void*)swigCPtr);
    return ret;
  }

  public override void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btConeShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

class btConeShapeX : btConeShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btConeShapeX_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btConeShapeX obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConeShapeX(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(float radius, float height) {
    this(BTPhysics_im.new_btConeShapeX(radius, height), true);
  }
}

class btConeShapeZ : btConeShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btConeShapeZ_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btConeShapeZ obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConeShapeZ(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(float radius, float height) {
    this(BTPhysics_im.new_btConeShapeZ(radius, height), true);
  }
}

class btStaticPlaneShape {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btStaticPlaneShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btStaticPlaneShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(btVector3 planeNormal, float planeConstant) {
    this(BTPhysics_im.new_btStaticPlaneShape(btVector3.swigGetCPtr(planeNormal), planeConstant), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btStaticPlaneShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void processAllTriangles(SWIGTYPE_p_btTriangleCallback callback, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btStaticPlaneShape_processAllTriangles(cast(void*)swigCPtr, SWIGTYPE_p_btTriangleCallback.swigGetCPtr(callback), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btStaticPlaneShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btStaticPlaneShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getLocalScaling() const {
    btVector3 ret = new btVector3(BTPhysics_im.btStaticPlaneShape_getLocalScaling(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getPlaneNormal() const {
    btVector3 ret = new btVector3(BTPhysics_im.btStaticPlaneShape_getPlaneNormal(cast(void*)swigCPtr), false);
    return ret;
  }

  public float getPlaneConstant() const {
    auto ret = BTPhysics_im.btStaticPlaneShape_getPlaneConstant(cast(void*)swigCPtr);
    return ret;
  }

  public string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btStaticPlaneShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btStaticPlaneShape_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btStaticPlaneShape_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btStaticPlaneShapeData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btStaticPlaneShapeData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btStaticPlaneShapeData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_collisionShapeData(btCollisionShapeData value) @property {
    BTPhysics_im.btStaticPlaneShapeData_m_collisionShapeData_set(cast(void*)swigCPtr, btCollisionShapeData.swigGetCPtr(value));
  }

  public btCollisionShapeData m_collisionShapeData() @property const {
    void* cPtr = BTPhysics_im.btStaticPlaneShapeData_m_collisionShapeData_get(cast(void*)swigCPtr);
    btCollisionShapeData ret = (cPtr is null) ? null : new btCollisionShapeData(cPtr, false);
    return ret;
  }

  public void m_localScaling(btVector3FloatData value) @property {
    BTPhysics_im.btStaticPlaneShapeData_m_localScaling_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_localScaling() @property const {
    void* cPtr = BTPhysics_im.btStaticPlaneShapeData_m_localScaling_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_planeNormal(btVector3FloatData value) @property {
    BTPhysics_im.btStaticPlaneShapeData_m_planeNormal_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_planeNormal() @property const {
    void* cPtr = BTPhysics_im.btStaticPlaneShapeData_m_planeNormal_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_planeConstant(float value) @property {
    BTPhysics_im.btStaticPlaneShapeData_m_planeConstant_set(cast(void*)swigCPtr, value);
  }

  public float m_planeConstant() @property const {
    auto ret = BTPhysics_im.btStaticPlaneShapeData_m_planeConstant_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_pad(string value) @property {
    BTPhysics_im.btStaticPlaneShapeData_m_pad_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_pad() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btStaticPlaneShapeData_m_pad_get(cast(void*)swigCPtr));
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btStaticPlaneShapeData(), true);
  }
}

class btConvexHullShape : btPolyhedralConvexAabbCachingShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btConvexHullShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btConvexHullShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConvexHullShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(float* points, int numPoints, int stride) {
    this(BTPhysics_im.new_btConvexHullShape__SWIG_0(cast(void*)points, numPoints, stride), true);
  }

  public this(float* points, int numPoints) {
    this(BTPhysics_im.new_btConvexHullShape__SWIG_1(cast(void*)points, numPoints), true);
  }

  public this(float* points) {
    this(BTPhysics_im.new_btConvexHullShape__SWIG_2(cast(void*)points), true);
  }

  public this() {
    this(BTPhysics_im.new_btConvexHullShape__SWIG_3(), true);
  }

  public void addPoint(btVector3 point) {
    BTPhysics_im.btConvexHullShape_addPoint(cast(void*)swigCPtr, btVector3.swigGetCPtr(point));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getUnscaledPoints() {
    void* cPtr = BTPhysics_im.btConvexHullShape_getUnscaledPoints__SWIG_0(cast(void*)swigCPtr);
    btVector3 ret = (cPtr is null) ? null : new btVector3(cPtr, false);
    return ret;
  }

  public btVector3 getPoints() const {
    void* cPtr = BTPhysics_im.btConvexHullShape_getPoints(cast(void*)swigCPtr);
    btVector3 ret = (cPtr is null) ? null : new btVector3(cPtr, false);
    return ret;
  }

  public btVector3 getScaledPoint(int i) const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexHullShape_getScaledPoint(cast(void*)swigCPtr, i), true);
    return ret;
  }

  public int getNumPoints() const {
    auto ret = BTPhysics_im.btConvexHullShape_getNumPoints(cast(void*)swigCPtr);
    return ret;
  }

  public override btVector3 localGetSupportingVertex(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexHullShape_localGetSupportingVertex(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexHullShape_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) const {
    BTPhysics_im.btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vectors), btVector3.swigGetCPtr(supportVerticesOut), numVectors);
  }

  public override void project(btTransform trans, btVector3 dir, float* min, float* max) const {
    BTPhysics_im.btConvexHullShape_project(cast(void*)swigCPtr, btTransform.swigGetCPtr(trans), btVector3.swigGetCPtr(dir), cast(void*)min, cast(void*)max);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btConvexHullShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public override int getNumVertices() const {
    auto ret = BTPhysics_im.btConvexHullShape_getNumVertices(cast(void*)swigCPtr);
    return ret;
  }

  public override int getNumEdges() const {
    auto ret = BTPhysics_im.btConvexHullShape_getNumEdges(cast(void*)swigCPtr);
    return ret;
  }

  public override void getEdge(int i, btVector3 pa, btVector3 pb) const {
    BTPhysics_im.btConvexHullShape_getEdge(cast(void*)swigCPtr, i, btVector3.swigGetCPtr(pa), btVector3.swigGetCPtr(pb));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getVertex(int i, btVector3 vtx) const {
    BTPhysics_im.btConvexHullShape_getVertex(cast(void*)swigCPtr, i, btVector3.swigGetCPtr(vtx));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override int getNumPlanes() const {
    auto ret = BTPhysics_im.btConvexHullShape_getNumPlanes(cast(void*)swigCPtr);
    return ret;
  }

  public override void getPlane(btVector3 planeNormal, btVector3 planeSupport, int i) const {
    BTPhysics_im.btConvexHullShape_getPlane(cast(void*)swigCPtr, btVector3.swigGetCPtr(planeNormal), btVector3.swigGetCPtr(planeSupport), i);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override bool isInside(btVector3 pt, float tolerance) const {
    bool ret = BTPhysics_im.btConvexHullShape_isInside(cast(void*)swigCPtr, btVector3.swigGetCPtr(pt), tolerance) ? true : false;
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btConvexHullShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btConvexHullShape_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btConvexHullShape_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btConvexHullShapeData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btConvexHullShapeData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConvexHullShapeData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_convexInternalShapeData(btConvexInternalShapeData value) @property {
    BTPhysics_im.btConvexHullShapeData_m_convexInternalShapeData_set(cast(void*)swigCPtr, btConvexInternalShapeData.swigGetCPtr(value));
  }

  public btConvexInternalShapeData m_convexInternalShapeData() @property const {
    void* cPtr = BTPhysics_im.btConvexHullShapeData_m_convexInternalShapeData_get(cast(void*)swigCPtr);
    btConvexInternalShapeData ret = (cPtr is null) ? null : new btConvexInternalShapeData(cPtr, false);
    return ret;
  }

  public void m_unscaledPointsFloatPtr(btVector3FloatData value) @property {
    BTPhysics_im.btConvexHullShapeData_m_unscaledPointsFloatPtr_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_unscaledPointsFloatPtr() @property const {
    void* cPtr = BTPhysics_im.btConvexHullShapeData_m_unscaledPointsFloatPtr_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_unscaledPointsDoublePtr(btVector3DoubleData value) @property {
    BTPhysics_im.btConvexHullShapeData_m_unscaledPointsDoublePtr_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_unscaledPointsDoublePtr() @property const {
    void* cPtr = BTPhysics_im.btConvexHullShapeData_m_unscaledPointsDoublePtr_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_numUnscaledPoints(int value) @property {
    BTPhysics_im.btConvexHullShapeData_m_numUnscaledPoints_set(cast(void*)swigCPtr, value);
  }

  public int m_numUnscaledPoints() @property const {
    auto ret = BTPhysics_im.btConvexHullShapeData_m_numUnscaledPoints_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_padding3(string value) @property {
    BTPhysics_im.btConvexHullShapeData_m_padding3_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_padding3() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btConvexHullShapeData_m_padding3_get(cast(void*)swigCPtr));
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btConvexHullShapeData(), true);
  }
}

class btTriangleMesh {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btTriangleMesh obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btTriangleMesh(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_weldingThreshold(float value) @property {
    BTPhysics_im.btTriangleMesh_m_weldingThreshold_set(cast(void*)swigCPtr, value);
  }

  public float m_weldingThreshold() @property const {
    auto ret = BTPhysics_im.btTriangleMesh_m_weldingThreshold_get(cast(void*)swigCPtr);
    return ret;
  }

  public this(bool use32bitIndices, bool use4componentVertices) {
    this(BTPhysics_im.new_btTriangleMesh__SWIG_0(use32bitIndices, use4componentVertices), true);
  }

  public this(bool use32bitIndices) {
    this(BTPhysics_im.new_btTriangleMesh__SWIG_1(use32bitIndices), true);
  }

  public this() {
    this(BTPhysics_im.new_btTriangleMesh__SWIG_2(), true);
  }

  public bool getUse32bitIndices() const {
    bool ret = BTPhysics_im.btTriangleMesh_getUse32bitIndices(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool getUse4componentVertices() const {
    bool ret = BTPhysics_im.btTriangleMesh_getUse4componentVertices(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void addTriangle(btVector3 vertex0, btVector3 vertex1, btVector3 vertex2, bool removeDuplicateVertices) {
    BTPhysics_im.btTriangleMesh_addTriangle__SWIG_0(cast(void*)swigCPtr, btVector3.swigGetCPtr(vertex0), btVector3.swigGetCPtr(vertex1), btVector3.swigGetCPtr(vertex2), removeDuplicateVertices);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void addTriangle(btVector3 vertex0, btVector3 vertex1, btVector3 vertex2) {
    BTPhysics_im.btTriangleMesh_addTriangle__SWIG_1(cast(void*)swigCPtr, btVector3.swigGetCPtr(vertex0), btVector3.swigGetCPtr(vertex1), btVector3.swigGetCPtr(vertex2));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public int getNumTriangles() const {
    auto ret = BTPhysics_im.btTriangleMesh_getNumTriangles(cast(void*)swigCPtr);
    return ret;
  }

  public void preallocateVertices(int numverts) {
    BTPhysics_im.btTriangleMesh_preallocateVertices(cast(void*)swigCPtr, numverts);
  }

  public void preallocateIndices(int numindices) {
    BTPhysics_im.btTriangleMesh_preallocateIndices(cast(void*)swigCPtr, numindices);
  }

  public int findOrAddVertex(btVector3 vertex, bool removeDuplicateVertices) {
    auto ret = BTPhysics_im.btTriangleMesh_findOrAddVertex(cast(void*)swigCPtr, btVector3.swigGetCPtr(vertex), removeDuplicateVertices);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void addIndex(int index) {
    BTPhysics_im.btTriangleMesh_addIndex(cast(void*)swigCPtr, index);
  }
}

class btConvexTriangleMeshShape : btPolyhedralConvexAabbCachingShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btConvexTriangleMeshShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btConvexTriangleMeshShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConvexTriangleMeshShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(SWIGTYPE_p_btStridingMeshInterface meshInterface, bool calcAabb) {
    this(BTPhysics_im.new_btConvexTriangleMeshShape__SWIG_0(SWIGTYPE_p_btStridingMeshInterface.swigGetCPtr(meshInterface), calcAabb), true);
  }

  public this(SWIGTYPE_p_btStridingMeshInterface meshInterface) {
    this(BTPhysics_im.new_btConvexTriangleMeshShape__SWIG_1(SWIGTYPE_p_btStridingMeshInterface.swigGetCPtr(meshInterface)), true);
  }

  public SWIGTYPE_p_btStridingMeshInterface getMeshInterface() {
    void* cPtr = BTPhysics_im.btConvexTriangleMeshShape_getMeshInterface__SWIG_0(cast(void*)swigCPtr);
    SWIGTYPE_p_btStridingMeshInterface ret = (cPtr is null) ? null : new SWIGTYPE_p_btStridingMeshInterface(cPtr, false);
    return ret;
  }

  public override btVector3 localGetSupportingVertex(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexTriangleMeshShape_localGetSupportingVertex(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexTriangleMeshShape_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) const {
    BTPhysics_im.btConvexTriangleMeshShape_batchedUnitVectorGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vectors), btVector3.swigGetCPtr(supportVerticesOut), numVectors);
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btConvexTriangleMeshShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public override int getNumVertices() const {
    auto ret = BTPhysics_im.btConvexTriangleMeshShape_getNumVertices(cast(void*)swigCPtr);
    return ret;
  }

  public override int getNumEdges() const {
    auto ret = BTPhysics_im.btConvexTriangleMeshShape_getNumEdges(cast(void*)swigCPtr);
    return ret;
  }

  public override void getEdge(int i, btVector3 pa, btVector3 pb) const {
    BTPhysics_im.btConvexTriangleMeshShape_getEdge(cast(void*)swigCPtr, i, btVector3.swigGetCPtr(pa), btVector3.swigGetCPtr(pb));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getVertex(int i, btVector3 vtx) const {
    BTPhysics_im.btConvexTriangleMeshShape_getVertex(cast(void*)swigCPtr, i, btVector3.swigGetCPtr(vtx));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override int getNumPlanes() const {
    auto ret = BTPhysics_im.btConvexTriangleMeshShape_getNumPlanes(cast(void*)swigCPtr);
    return ret;
  }

  public override void getPlane(btVector3 planeNormal, btVector3 planeSupport, int i) const {
    BTPhysics_im.btConvexTriangleMeshShape_getPlane(cast(void*)swigCPtr, btVector3.swigGetCPtr(planeNormal), btVector3.swigGetCPtr(planeSupport), i);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override bool isInside(btVector3 pt, float tolerance) const {
    bool ret = BTPhysics_im.btConvexTriangleMeshShape_isInside(cast(void*)swigCPtr, btVector3.swigGetCPtr(pt), tolerance) ? true : false;
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btConvexTriangleMeshShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override btVector3 getLocalScaling() const {
    btVector3 ret = new btVector3(BTPhysics_im.btConvexTriangleMeshShape_getLocalScaling(cast(void*)swigCPtr), false);
    return ret;
  }

  public void calculatePrincipalAxisTransform(btTransform principal, btVector3 inertia, float* volume) const {
    BTPhysics_im.btConvexTriangleMeshShape_calculatePrincipalAxisTransform(cast(void*)swigCPtr, btTransform.swigGetCPtr(principal), btVector3.swigGetCPtr(inertia), cast(void*)volume);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

class btBvhTriangleMeshShape {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btBvhTriangleMeshShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btBvhTriangleMeshShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(SWIGTYPE_p_btStridingMeshInterface meshInterface, bool useQuantizedAabbCompression, bool buildBvh) {
    this(BTPhysics_im.new_btBvhTriangleMeshShape__SWIG_0(SWIGTYPE_p_btStridingMeshInterface.swigGetCPtr(meshInterface), useQuantizedAabbCompression, buildBvh), true);
  }

  public this(SWIGTYPE_p_btStridingMeshInterface meshInterface, bool useQuantizedAabbCompression) {
    this(BTPhysics_im.new_btBvhTriangleMeshShape__SWIG_1(SWIGTYPE_p_btStridingMeshInterface.swigGetCPtr(meshInterface), useQuantizedAabbCompression), true);
  }

  public this(SWIGTYPE_p_btStridingMeshInterface meshInterface, bool useQuantizedAabbCompression, btVector3 bvhAabbMin, btVector3 bvhAabbMax, bool buildBvh) {
    this(BTPhysics_im.new_btBvhTriangleMeshShape__SWIG_2(SWIGTYPE_p_btStridingMeshInterface.swigGetCPtr(meshInterface), useQuantizedAabbCompression, btVector3.swigGetCPtr(bvhAabbMin), btVector3.swigGetCPtr(bvhAabbMax), buildBvh), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(SWIGTYPE_p_btStridingMeshInterface meshInterface, bool useQuantizedAabbCompression, btVector3 bvhAabbMin, btVector3 bvhAabbMax) {
    this(BTPhysics_im.new_btBvhTriangleMeshShape__SWIG_3(SWIGTYPE_p_btStridingMeshInterface.swigGetCPtr(meshInterface), useQuantizedAabbCompression, btVector3.swigGetCPtr(bvhAabbMin), btVector3.swigGetCPtr(bvhAabbMax)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public bool getOwnsBvh() const {
    bool ret = BTPhysics_im.btBvhTriangleMeshShape_getOwnsBvh(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void performRaycast(SWIGTYPE_p_btTriangleCallback callback, btVector3 raySource, btVector3 rayTarget) {
    BTPhysics_im.btBvhTriangleMeshShape_performRaycast(cast(void*)swigCPtr, SWIGTYPE_p_btTriangleCallback.swigGetCPtr(callback), btVector3.swigGetCPtr(raySource), btVector3.swigGetCPtr(rayTarget));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void performConvexcast(SWIGTYPE_p_btTriangleCallback callback, btVector3 boxSource, btVector3 boxTarget, btVector3 boxMin, btVector3 boxMax) {
    BTPhysics_im.btBvhTriangleMeshShape_performConvexcast(cast(void*)swigCPtr, SWIGTYPE_p_btTriangleCallback.swigGetCPtr(callback), btVector3.swigGetCPtr(boxSource), btVector3.swigGetCPtr(boxTarget), btVector3.swigGetCPtr(boxMin), btVector3.swigGetCPtr(boxMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void processAllTriangles(SWIGTYPE_p_btTriangleCallback callback, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btBvhTriangleMeshShape_processAllTriangles(cast(void*)swigCPtr, SWIGTYPE_p_btTriangleCallback.swigGetCPtr(callback), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void refitTree(btVector3 aabbMin, btVector3 aabbMax) {
    BTPhysics_im.btBvhTriangleMeshShape_refitTree(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void partialRefitTree(btVector3 aabbMin, btVector3 aabbMax) {
    BTPhysics_im.btBvhTriangleMeshShape_partialRefitTree(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btBvhTriangleMeshShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btBvhTriangleMeshShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_btOptimizedBvh getOptimizedBvh() {
    void* cPtr = BTPhysics_im.btBvhTriangleMeshShape_getOptimizedBvh(cast(void*)swigCPtr);
    SWIGTYPE_p_btOptimizedBvh ret = (cPtr is null) ? null : new SWIGTYPE_p_btOptimizedBvh(cPtr, false);
    return ret;
  }

  public void setOptimizedBvh(SWIGTYPE_p_btOptimizedBvh bvh, btVector3 localScaling) {
    BTPhysics_im.btBvhTriangleMeshShape_setOptimizedBvh__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_btOptimizedBvh.swigGetCPtr(bvh), btVector3.swigGetCPtr(localScaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setOptimizedBvh(SWIGTYPE_p_btOptimizedBvh bvh) {
    BTPhysics_im.btBvhTriangleMeshShape_setOptimizedBvh__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_btOptimizedBvh.swigGetCPtr(bvh));
  }

  public void buildOptimizedBvh() {
    BTPhysics_im.btBvhTriangleMeshShape_buildOptimizedBvh(cast(void*)swigCPtr);
  }

  public bool usesQuantizedAabbCompression() const {
    bool ret = BTPhysics_im.btBvhTriangleMeshShape_usesQuantizedAabbCompression(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setTriangleInfoMap(SWIGTYPE_p_btTriangleInfoMap triangleInfoMap) {
    BTPhysics_im.btBvhTriangleMeshShape_setTriangleInfoMap(cast(void*)swigCPtr, SWIGTYPE_p_btTriangleInfoMap.swigGetCPtr(triangleInfoMap));
  }

  public SWIGTYPE_p_btTriangleInfoMap getTriangleInfoMap() const {
    void* cPtr = BTPhysics_im.btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_0(cast(void*)swigCPtr);
    SWIGTYPE_p_btTriangleInfoMap ret = (cPtr is null) ? null : new SWIGTYPE_p_btTriangleInfoMap(cPtr, false);
    return ret;
  }

  public int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btBvhTriangleMeshShape_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btBvhTriangleMeshShape_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }

  public void serializeSingleBvh(btSerializer serializer) const {
    BTPhysics_im.btBvhTriangleMeshShape_serializeSingleBvh(cast(void*)swigCPtr, btSerializer.swigGetCPtr(serializer));
  }

  public void serializeSingleTriangleInfoMap(btSerializer serializer) const {
    BTPhysics_im.btBvhTriangleMeshShape_serializeSingleTriangleInfoMap(cast(void*)swigCPtr, btSerializer.swigGetCPtr(serializer));
  }
}

class btTriangleMeshShapeData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btTriangleMeshShapeData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btTriangleMeshShapeData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_collisionShapeData(btCollisionShapeData value) @property {
    BTPhysics_im.btTriangleMeshShapeData_m_collisionShapeData_set(cast(void*)swigCPtr, btCollisionShapeData.swigGetCPtr(value));
  }

  public btCollisionShapeData m_collisionShapeData() @property const {
    void* cPtr = BTPhysics_im.btTriangleMeshShapeData_m_collisionShapeData_get(cast(void*)swigCPtr);
    btCollisionShapeData ret = (cPtr is null) ? null : new btCollisionShapeData(cPtr, false);
    return ret;
  }

  public void m_meshInterface(SWIGTYPE_p_btStridingMeshInterfaceData value) @property {
    BTPhysics_im.btTriangleMeshShapeData_m_meshInterface_set(cast(void*)swigCPtr, SWIGTYPE_p_btStridingMeshInterfaceData.swigGetCPtr(value));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_btStridingMeshInterfaceData m_meshInterface() @property const {
    SWIGTYPE_p_btStridingMeshInterfaceData ret = new SWIGTYPE_p_btStridingMeshInterfaceData(BTPhysics_im.btTriangleMeshShapeData_m_meshInterface_get(cast(void*)swigCPtr), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void m_quantizedFloatBvh(SWIGTYPE_p_btQuantizedBvhFloatData value) @property {
    BTPhysics_im.btTriangleMeshShapeData_m_quantizedFloatBvh_set(cast(void*)swigCPtr, SWIGTYPE_p_btQuantizedBvhFloatData.swigGetCPtr(value));
  }

  public SWIGTYPE_p_btQuantizedBvhFloatData m_quantizedFloatBvh() @property const {
    void* cPtr = BTPhysics_im.btTriangleMeshShapeData_m_quantizedFloatBvh_get(cast(void*)swigCPtr);
    SWIGTYPE_p_btQuantizedBvhFloatData ret = (cPtr is null) ? null : new SWIGTYPE_p_btQuantizedBvhFloatData(cPtr, false);
    return ret;
  }

  public void m_quantizedDoubleBvh(SWIGTYPE_p_btQuantizedBvhDoubleData value) @property {
    BTPhysics_im.btTriangleMeshShapeData_m_quantizedDoubleBvh_set(cast(void*)swigCPtr, SWIGTYPE_p_btQuantizedBvhDoubleData.swigGetCPtr(value));
  }

  public SWIGTYPE_p_btQuantizedBvhDoubleData m_quantizedDoubleBvh() @property const {
    void* cPtr = BTPhysics_im.btTriangleMeshShapeData_m_quantizedDoubleBvh_get(cast(void*)swigCPtr);
    SWIGTYPE_p_btQuantizedBvhDoubleData ret = (cPtr is null) ? null : new SWIGTYPE_p_btQuantizedBvhDoubleData(cPtr, false);
    return ret;
  }

  public void m_triangleInfoMap(SWIGTYPE_p_btTriangleInfoMapData value) @property {
    BTPhysics_im.btTriangleMeshShapeData_m_triangleInfoMap_set(cast(void*)swigCPtr, SWIGTYPE_p_btTriangleInfoMapData.swigGetCPtr(value));
  }

  public SWIGTYPE_p_btTriangleInfoMapData m_triangleInfoMap() @property const {
    void* cPtr = BTPhysics_im.btTriangleMeshShapeData_m_triangleInfoMap_get(cast(void*)swigCPtr);
    SWIGTYPE_p_btTriangleInfoMapData ret = (cPtr is null) ? null : new SWIGTYPE_p_btTriangleInfoMapData(cPtr, false);
    return ret;
  }

  public void m_collisionMargin(float value) @property {
    BTPhysics_im.btTriangleMeshShapeData_m_collisionMargin_set(cast(void*)swigCPtr, value);
  }

  public float m_collisionMargin() @property const {
    auto ret = BTPhysics_im.btTriangleMeshShapeData_m_collisionMargin_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_pad3(string value) @property {
    BTPhysics_im.btTriangleMeshShapeData_m_pad3_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_pad3() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btTriangleMeshShapeData_m_pad3_get(cast(void*)swigCPtr));
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btTriangleMeshShapeData(), true);
  }
}

class btScaledBvhTriangleMeshShape {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btScaledBvhTriangleMeshShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btScaledBvhTriangleMeshShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(btBvhTriangleMeshShape childShape, btVector3 localScaling) {
    this(BTPhysics_im.new_btScaledBvhTriangleMeshShape(btBvhTriangleMeshShape.swigGetCPtr(childShape), btVector3.swigGetCPtr(localScaling)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btScaledBvhTriangleMeshShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btScaledBvhTriangleMeshShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getLocalScaling() const {
    btVector3 ret = new btVector3(BTPhysics_im.btScaledBvhTriangleMeshShape_getLocalScaling(cast(void*)swigCPtr), false);
    return ret;
  }

  public void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btScaledBvhTriangleMeshShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void processAllTriangles(SWIGTYPE_p_btTriangleCallback callback, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btScaledBvhTriangleMeshShape_processAllTriangles(cast(void*)swigCPtr, SWIGTYPE_p_btTriangleCallback.swigGetCPtr(callback), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btBvhTriangleMeshShape getChildShape() {
    void* cPtr = BTPhysics_im.btScaledBvhTriangleMeshShape_getChildShape__SWIG_0(cast(void*)swigCPtr);
    btBvhTriangleMeshShape ret = (cPtr is null) ? null : new btBvhTriangleMeshShape(cPtr, false);
    return ret;
  }

  public string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btScaledBvhTriangleMeshShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btScaledBvhTriangleMeshShape_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btScaledBvhTriangleMeshShape_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btScaledTriangleMeshShapeData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btScaledTriangleMeshShapeData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btScaledTriangleMeshShapeData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_trimeshShapeData(btTriangleMeshShapeData value) @property {
    BTPhysics_im.btScaledTriangleMeshShapeData_m_trimeshShapeData_set(cast(void*)swigCPtr, btTriangleMeshShapeData.swigGetCPtr(value));
  }

  public btTriangleMeshShapeData m_trimeshShapeData() @property const {
    void* cPtr = BTPhysics_im.btScaledTriangleMeshShapeData_m_trimeshShapeData_get(cast(void*)swigCPtr);
    btTriangleMeshShapeData ret = (cPtr is null) ? null : new btTriangleMeshShapeData(cPtr, false);
    return ret;
  }

  public void m_localScaling(btVector3FloatData value) @property {
    BTPhysics_im.btScaledTriangleMeshShapeData_m_localScaling_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_localScaling() @property const {
    void* cPtr = BTPhysics_im.btScaledTriangleMeshShapeData_m_localScaling_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btScaledTriangleMeshShapeData(), true);
  }
}

class btTriangleMeshShape {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btTriangleMeshShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btTriangleMeshShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public btVector3 localGetSupportingVertex(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btTriangleMeshShape_localGetSupportingVertex(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btTriangleMeshShape_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void recalcLocalAabb() {
    BTPhysics_im.btTriangleMeshShape_recalcLocalAabb(cast(void*)swigCPtr);
  }

  public void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btTriangleMeshShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void processAllTriangles(SWIGTYPE_p_btTriangleCallback callback, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btTriangleMeshShape_processAllTriangles(cast(void*)swigCPtr, SWIGTYPE_p_btTriangleCallback.swigGetCPtr(callback), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btTriangleMeshShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btTriangleMeshShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getLocalScaling() const {
    btVector3 ret = new btVector3(BTPhysics_im.btTriangleMeshShape_getLocalScaling(cast(void*)swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btStridingMeshInterface getMeshInterface() {
    void* cPtr = BTPhysics_im.btTriangleMeshShape_getMeshInterface__SWIG_0(cast(void*)swigCPtr);
    SWIGTYPE_p_btStridingMeshInterface ret = (cPtr is null) ? null : new SWIGTYPE_p_btStridingMeshInterface(cPtr, false);
    return ret;
  }

  public btVector3 getLocalAabbMin() const {
    btVector3 ret = new btVector3(BTPhysics_im.btTriangleMeshShape_getLocalAabbMin(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getLocalAabbMax() const {
    btVector3 ret = new btVector3(BTPhysics_im.btTriangleMeshShape_getLocalAabbMax(cast(void*)swigCPtr), false);
    return ret;
  }

  public string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btTriangleMeshShape_getName(cast(void*)swigCPtr));
    return ret;
  }
}

class btIndexedMesh {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btIndexedMesh obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btIndexedMesh(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_numTriangles(int value) @property {
    BTPhysics_im.btIndexedMesh_m_numTriangles_set(cast(void*)swigCPtr, value);
  }

  public int m_numTriangles() @property const {
    auto ret = BTPhysics_im.btIndexedMesh_m_numTriangles_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_triangleIndexBase(ubyte* value) @property {
    BTPhysics_im.btIndexedMesh_m_triangleIndexBase_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public ubyte* m_triangleIndexBase() @property const {
    auto ret = cast(ubyte*)BTPhysics_im.btIndexedMesh_m_triangleIndexBase_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_triangleIndexStride(int value) @property {
    BTPhysics_im.btIndexedMesh_m_triangleIndexStride_set(cast(void*)swigCPtr, value);
  }

  public int m_triangleIndexStride() @property const {
    auto ret = BTPhysics_im.btIndexedMesh_m_triangleIndexStride_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_numVertices(int value) @property {
    BTPhysics_im.btIndexedMesh_m_numVertices_set(cast(void*)swigCPtr, value);
  }

  public int m_numVertices() @property const {
    auto ret = BTPhysics_im.btIndexedMesh_m_numVertices_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_vertexBase(ubyte* value) @property {
    BTPhysics_im.btIndexedMesh_m_vertexBase_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public ubyte* m_vertexBase() @property const {
    auto ret = cast(ubyte*)BTPhysics_im.btIndexedMesh_m_vertexBase_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_vertexStride(int value) @property {
    BTPhysics_im.btIndexedMesh_m_vertexStride_set(cast(void*)swigCPtr, value);
  }

  public int m_vertexStride() @property const {
    auto ret = BTPhysics_im.btIndexedMesh_m_vertexStride_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_indexType(SWIGTYPE_p_PHY_ScalarType value) @property {
    BTPhysics_im.btIndexedMesh_m_indexType_set(cast(void*)swigCPtr, SWIGTYPE_p_PHY_ScalarType.swigGetCPtr(value));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_PHY_ScalarType m_indexType() @property const {
    SWIGTYPE_p_PHY_ScalarType ret = new SWIGTYPE_p_PHY_ScalarType(BTPhysics_im.btIndexedMesh_m_indexType_get(cast(void*)swigCPtr), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void m_vertexType(SWIGTYPE_p_PHY_ScalarType value) @property {
    BTPhysics_im.btIndexedMesh_m_vertexType_set(cast(void*)swigCPtr, SWIGTYPE_p_PHY_ScalarType.swigGetCPtr(value));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_PHY_ScalarType m_vertexType() @property const {
    SWIGTYPE_p_PHY_ScalarType ret = new SWIGTYPE_p_PHY_ScalarType(BTPhysics_im.btIndexedMesh_m_vertexType_get(cast(void*)swigCPtr), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btIndexedMesh(), true);
  }
}

class btTriangleIndexVertexArray {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btTriangleIndexVertexArray obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btTriangleIndexVertexArray(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(BTPhysics_im.new_btTriangleIndexVertexArray__SWIG_0(), true);
  }

  public this(int numTriangles, int* triangleIndexBase, int triangleIndexStride, int numVertices, float* vertexBase, int vertexStride) {
    this(BTPhysics_im.new_btTriangleIndexVertexArray__SWIG_1(numTriangles, cast(void*)triangleIndexBase, triangleIndexStride, numVertices, cast(void*)vertexBase, vertexStride), true);
  }

  public void addIndexedMesh(btIndexedMesh mesh, SWIGTYPE_p_PHY_ScalarType indexType) {
    BTPhysics_im.btTriangleIndexVertexArray_addIndexedMesh__SWIG_0(cast(void*)swigCPtr, btIndexedMesh.swigGetCPtr(mesh), SWIGTYPE_p_PHY_ScalarType.swigGetCPtr(indexType));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void addIndexedMesh(btIndexedMesh mesh) {
    BTPhysics_im.btTriangleIndexVertexArray_addIndexedMesh__SWIG_1(cast(void*)swigCPtr, btIndexedMesh.swigGetCPtr(mesh));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getLockedVertexIndexBase(ubyte** vertexbase, int* numverts, SWIGTYPE_p_PHY_ScalarType type, int* vertexStride, ubyte** indexbase, int* indexstride, int* numfaces, SWIGTYPE_p_PHY_ScalarType indicestype, int subpart) {
    BTPhysics_im.btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_0(cast(void*)swigCPtr, cast(void*)vertexbase, cast(void*)numverts, SWIGTYPE_p_PHY_ScalarType.swigGetCPtr(type), cast(void*)vertexStride, cast(void*)indexbase, cast(void*)indexstride, cast(void*)numfaces, SWIGTYPE_p_PHY_ScalarType.swigGetCPtr(indicestype), subpart);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getLockedVertexIndexBase(ubyte** vertexbase, int* numverts, SWIGTYPE_p_PHY_ScalarType type, int* vertexStride, ubyte** indexbase, int* indexstride, int* numfaces, SWIGTYPE_p_PHY_ScalarType indicestype) {
    BTPhysics_im.btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_1(cast(void*)swigCPtr, cast(void*)vertexbase, cast(void*)numverts, SWIGTYPE_p_PHY_ScalarType.swigGetCPtr(type), cast(void*)vertexStride, cast(void*)indexbase, cast(void*)indexstride, cast(void*)numfaces, SWIGTYPE_p_PHY_ScalarType.swigGetCPtr(indicestype));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getLockedReadOnlyVertexIndexBase(ubyte** vertexbase, int* numverts, SWIGTYPE_p_PHY_ScalarType type, int* vertexStride, ubyte** indexbase, int* indexstride, int* numfaces, SWIGTYPE_p_PHY_ScalarType indicestype, int subpart) const {
    BTPhysics_im.btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_0(cast(void*)swigCPtr, cast(void*)vertexbase, cast(void*)numverts, SWIGTYPE_p_PHY_ScalarType.swigGetCPtr(type), cast(void*)vertexStride, cast(void*)indexbase, cast(void*)indexstride, cast(void*)numfaces, SWIGTYPE_p_PHY_ScalarType.swigGetCPtr(indicestype), subpart);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getLockedReadOnlyVertexIndexBase(ubyte** vertexbase, int* numverts, SWIGTYPE_p_PHY_ScalarType type, int* vertexStride, ubyte** indexbase, int* indexstride, int* numfaces, SWIGTYPE_p_PHY_ScalarType indicestype) const {
    BTPhysics_im.btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_1(cast(void*)swigCPtr, cast(void*)vertexbase, cast(void*)numverts, SWIGTYPE_p_PHY_ScalarType.swigGetCPtr(type), cast(void*)vertexStride, cast(void*)indexbase, cast(void*)indexstride, cast(void*)numfaces, SWIGTYPE_p_PHY_ScalarType.swigGetCPtr(indicestype));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void unLockVertexBase(int subpart) {
    BTPhysics_im.btTriangleIndexVertexArray_unLockVertexBase(cast(void*)swigCPtr, subpart);
  }

  public void unLockReadOnlyVertexBase(int subpart) const {
    BTPhysics_im.btTriangleIndexVertexArray_unLockReadOnlyVertexBase(cast(void*)swigCPtr, subpart);
  }

  public int getNumSubParts() const {
    auto ret = BTPhysics_im.btTriangleIndexVertexArray_getNumSubParts(cast(void*)swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t getIndexedMeshArray() {
    SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t ret = new SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t(BTPhysics_im.btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public void preallocateVertices(int numverts) {
    BTPhysics_im.btTriangleIndexVertexArray_preallocateVertices(cast(void*)swigCPtr, numverts);
  }

  public void preallocateIndices(int numindices) {
    BTPhysics_im.btTriangleIndexVertexArray_preallocateIndices(cast(void*)swigCPtr, numindices);
  }

  public bool hasPremadeAabb() const {
    bool ret = BTPhysics_im.btTriangleIndexVertexArray_hasPremadeAabb(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setPremadeAabb(btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btTriangleIndexVertexArray_setPremadeAabb(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getPremadeAabb(btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btTriangleIndexVertexArray_getPremadeAabb(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
  }
}

class btCompoundShapeChild {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btCompoundShapeChild obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCompoundShapeChild(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_transform(btTransform value) @property {
    BTPhysics_im.btCompoundShapeChild_m_transform_set(cast(void*)swigCPtr, btTransform.swigGetCPtr(value));
  }

  public btTransform m_transform() @property const {
    void* cPtr = BTPhysics_im.btCompoundShapeChild_m_transform_get(cast(void*)swigCPtr);
    btTransform ret = (cPtr is null) ? null : new btTransform(cPtr, false);
    return ret;
  }

  public void m_childShape(btCollisionShape value) @property {
    BTPhysics_im.btCompoundShapeChild_m_childShape_set(cast(void*)swigCPtr, btCollisionShape.swigGetCPtr(value));
  }

  public btCollisionShape m_childShape() @property const {
    void* cPtr = BTPhysics_im.btCompoundShapeChild_m_childShape_get(cast(void*)swigCPtr);
    btCollisionShape ret = (cPtr is null) ? null : new btCollisionShape(cPtr, false);
    return ret;
  }

  public void m_childShapeType(int value) @property {
    BTPhysics_im.btCompoundShapeChild_m_childShapeType_set(cast(void*)swigCPtr, value);
  }

  public int m_childShapeType() @property const {
    auto ret = BTPhysics_im.btCompoundShapeChild_m_childShapeType_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_childMargin(float value) @property {
    BTPhysics_im.btCompoundShapeChild_m_childMargin_set(cast(void*)swigCPtr, value);
  }

  public float m_childMargin() @property const {
    auto ret = BTPhysics_im.btCompoundShapeChild_m_childMargin_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_node(SWIGTYPE_p_btDbvtNode value) @property {
    BTPhysics_im.btCompoundShapeChild_m_node_set(cast(void*)swigCPtr, SWIGTYPE_p_btDbvtNode.swigGetCPtr(value));
  }

  public SWIGTYPE_p_btDbvtNode m_node() @property const {
    void* cPtr = BTPhysics_im.btCompoundShapeChild_m_node_get(cast(void*)swigCPtr);
    SWIGTYPE_p_btDbvtNode ret = (cPtr is null) ? null : new SWIGTYPE_p_btDbvtNode(cPtr, false);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btCompoundShapeChild(), true);
  }
}

class btCompoundShape : btCollisionShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btCompoundShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btCompoundShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCompoundShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(bool enableDynamicAabbTree) {
    this(BTPhysics_im.new_btCompoundShape__SWIG_0(enableDynamicAabbTree), true);
  }

  public this() {
    this(BTPhysics_im.new_btCompoundShape__SWIG_1(), true);
  }

  public void addChildShape(btTransform localTransform, btCollisionShape shape) {
    BTPhysics_im.btCompoundShape_addChildShape(cast(void*)swigCPtr, btTransform.swigGetCPtr(localTransform), btCollisionShape.swigGetCPtr(shape));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void removeChildShape(btCollisionShape shape) {
    BTPhysics_im.btCompoundShape_removeChildShape(cast(void*)swigCPtr, btCollisionShape.swigGetCPtr(shape));
  }

  public void removeChildShapeByIndex(int childShapeindex) {
    BTPhysics_im.btCompoundShape_removeChildShapeByIndex(cast(void*)swigCPtr, childShapeindex);
  }

  public int getNumChildShapes() const {
    auto ret = BTPhysics_im.btCompoundShape_getNumChildShapes(cast(void*)swigCPtr);
    return ret;
  }

  public btCollisionShape getChildShape(int index) {
    void* cPtr = BTPhysics_im.btCompoundShape_getChildShape__SWIG_0(cast(void*)swigCPtr, index);
    btCollisionShape ret = (cPtr is null) ? null : new btCollisionShape(cPtr, false);
    return ret;
  }

  public btTransform getChildTransform(int index) {
    btTransform ret = new btTransform(BTPhysics_im.btCompoundShape_getChildTransform__SWIG_0(cast(void*)swigCPtr, index), false);
    return ret;
  }

  public void updateChildTransform(int childIndex, btTransform newChildTransform, bool shouldRecalculateLocalAabb) {
    BTPhysics_im.btCompoundShape_updateChildTransform__SWIG_0(cast(void*)swigCPtr, childIndex, btTransform.swigGetCPtr(newChildTransform), shouldRecalculateLocalAabb);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void updateChildTransform(int childIndex, btTransform newChildTransform) {
    BTPhysics_im.btCompoundShape_updateChildTransform__SWIG_1(cast(void*)swigCPtr, childIndex, btTransform.swigGetCPtr(newChildTransform));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btCompoundShapeChild getChildList() {
    void* cPtr = BTPhysics_im.btCompoundShape_getChildList(cast(void*)swigCPtr);
    btCompoundShapeChild ret = (cPtr is null) ? null : new btCompoundShapeChild(cPtr, false);
    return ret;
  }

  public override void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btCompoundShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void recalculateLocalAabb() {
    BTPhysics_im.btCompoundShape_recalculateLocalAabb(cast(void*)swigCPtr);
  }

  public override void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btCompoundShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override btVector3 getLocalScaling() const {
    btVector3 ret = new btVector3(BTPhysics_im.btCompoundShape_getLocalScaling(cast(void*)swigCPtr), false);
    return ret;
  }

  public override void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btCompoundShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void setMargin(float margin) {
    BTPhysics_im.btCompoundShape_setMargin(cast(void*)swigCPtr, margin);
  }

  public override float getMargin() const {
    auto ret = BTPhysics_im.btCompoundShape_getMargin(cast(void*)swigCPtr);
    return ret;
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btCompoundShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public SWIGTYPE_p_btDbvt getDynamicAabbTree() const {
    void* cPtr = BTPhysics_im.btCompoundShape_getDynamicAabbTree__SWIG_0(cast(void*)swigCPtr);
    SWIGTYPE_p_btDbvt ret = (cPtr is null) ? null : new SWIGTYPE_p_btDbvt(cPtr, false);
    return ret;
  }

  public void createAabbTreeFromChildren() {
    BTPhysics_im.btCompoundShape_createAabbTreeFromChildren(cast(void*)swigCPtr);
  }

  public void calculatePrincipalAxisTransform(float* masses, btTransform principal, btVector3 inertia) const {
    BTPhysics_im.btCompoundShape_calculatePrincipalAxisTransform(cast(void*)swigCPtr, cast(void*)masses, btTransform.swigGetCPtr(principal), btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public int getUpdateRevision() const {
    auto ret = BTPhysics_im.btCompoundShape_getUpdateRevision(cast(void*)swigCPtr);
    return ret;
  }

  public override int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btCompoundShape_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btCompoundShape_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btCompoundShapeChildData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btCompoundShapeChildData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCompoundShapeChildData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_transform(btTransformFloatData value) @property {
    BTPhysics_im.btCompoundShapeChildData_m_transform_set(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(value));
  }

  public btTransformFloatData m_transform() @property const {
    void* cPtr = BTPhysics_im.btCompoundShapeChildData_m_transform_get(cast(void*)swigCPtr);
    btTransformFloatData ret = (cPtr is null) ? null : new btTransformFloatData(cPtr, false);
    return ret;
  }

  public void m_childShape(btCollisionShapeData value) @property {
    BTPhysics_im.btCompoundShapeChildData_m_childShape_set(cast(void*)swigCPtr, btCollisionShapeData.swigGetCPtr(value));
  }

  public btCollisionShapeData m_childShape() @property const {
    void* cPtr = BTPhysics_im.btCompoundShapeChildData_m_childShape_get(cast(void*)swigCPtr);
    btCollisionShapeData ret = (cPtr is null) ? null : new btCollisionShapeData(cPtr, false);
    return ret;
  }

  public void m_childShapeType(int value) @property {
    BTPhysics_im.btCompoundShapeChildData_m_childShapeType_set(cast(void*)swigCPtr, value);
  }

  public int m_childShapeType() @property const {
    auto ret = BTPhysics_im.btCompoundShapeChildData_m_childShapeType_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_childMargin(float value) @property {
    BTPhysics_im.btCompoundShapeChildData_m_childMargin_set(cast(void*)swigCPtr, value);
  }

  public float m_childMargin() @property const {
    auto ret = BTPhysics_im.btCompoundShapeChildData_m_childMargin_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btCompoundShapeChildData(), true);
  }
}

class btCompoundShapeData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btCompoundShapeData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCompoundShapeData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_collisionShapeData(btCollisionShapeData value) @property {
    BTPhysics_im.btCompoundShapeData_m_collisionShapeData_set(cast(void*)swigCPtr, btCollisionShapeData.swigGetCPtr(value));
  }

  public btCollisionShapeData m_collisionShapeData() @property const {
    void* cPtr = BTPhysics_im.btCompoundShapeData_m_collisionShapeData_get(cast(void*)swigCPtr);
    btCollisionShapeData ret = (cPtr is null) ? null : new btCollisionShapeData(cPtr, false);
    return ret;
  }

  public void m_childShapePtr(btCompoundShapeChildData value) @property {
    BTPhysics_im.btCompoundShapeData_m_childShapePtr_set(cast(void*)swigCPtr, btCompoundShapeChildData.swigGetCPtr(value));
  }

  public btCompoundShapeChildData m_childShapePtr() @property const {
    void* cPtr = BTPhysics_im.btCompoundShapeData_m_childShapePtr_get(cast(void*)swigCPtr);
    btCompoundShapeChildData ret = (cPtr is null) ? null : new btCompoundShapeChildData(cPtr, false);
    return ret;
  }

  public void m_numChildShapes(int value) @property {
    BTPhysics_im.btCompoundShapeData_m_numChildShapes_set(cast(void*)swigCPtr, value);
  }

  public int m_numChildShapes() @property const {
    auto ret = BTPhysics_im.btCompoundShapeData_m_numChildShapes_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_collisionMargin(float value) @property {
    BTPhysics_im.btCompoundShapeData_m_collisionMargin_set(cast(void*)swigCPtr, value);
  }

  public float m_collisionMargin() @property const {
    auto ret = BTPhysics_im.btCompoundShapeData_m_collisionMargin_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btCompoundShapeData(), true);
  }
}

class btBU_Simplex1to4 : btPolyhedralConvexAabbCachingShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btBU_Simplex1to4_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btBU_Simplex1to4 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btBU_Simplex1to4(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(BTPhysics_im.new_btBU_Simplex1to4__SWIG_0(), true);
  }

  public this(btVector3 pt0) {
    this(BTPhysics_im.new_btBU_Simplex1to4__SWIG_1(btVector3.swigGetCPtr(pt0)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btVector3 pt0, btVector3 pt1) {
    this(BTPhysics_im.new_btBU_Simplex1to4__SWIG_2(btVector3.swigGetCPtr(pt0), btVector3.swigGetCPtr(pt1)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btVector3 pt0, btVector3 pt1, btVector3 pt2) {
    this(BTPhysics_im.new_btBU_Simplex1to4__SWIG_3(btVector3.swigGetCPtr(pt0), btVector3.swigGetCPtr(pt1), btVector3.swigGetCPtr(pt2)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btVector3 pt0, btVector3 pt1, btVector3 pt2, btVector3 pt3) {
    this(BTPhysics_im.new_btBU_Simplex1to4__SWIG_4(btVector3.swigGetCPtr(pt0), btVector3.swigGetCPtr(pt1), btVector3.swigGetCPtr(pt2), btVector3.swigGetCPtr(pt3)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void reset() {
    BTPhysics_im.btBU_Simplex1to4_reset(cast(void*)swigCPtr);
  }

  public override void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btBU_Simplex1to4_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void addVertex(btVector3 pt) {
    BTPhysics_im.btBU_Simplex1to4_addVertex(cast(void*)swigCPtr, btVector3.swigGetCPtr(pt));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override int getNumVertices() const {
    auto ret = BTPhysics_im.btBU_Simplex1to4_getNumVertices(cast(void*)swigCPtr);
    return ret;
  }

  public override int getNumEdges() const {
    auto ret = BTPhysics_im.btBU_Simplex1to4_getNumEdges(cast(void*)swigCPtr);
    return ret;
  }

  public override void getEdge(int i, btVector3 pa, btVector3 pb) const {
    BTPhysics_im.btBU_Simplex1to4_getEdge(cast(void*)swigCPtr, i, btVector3.swigGetCPtr(pa), btVector3.swigGetCPtr(pb));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getVertex(int i, btVector3 vtx) const {
    BTPhysics_im.btBU_Simplex1to4_getVertex(cast(void*)swigCPtr, i, btVector3.swigGetCPtr(vtx));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override int getNumPlanes() const {
    auto ret = BTPhysics_im.btBU_Simplex1to4_getNumPlanes(cast(void*)swigCPtr);
    return ret;
  }

  public override void getPlane(btVector3 planeNormal, btVector3 planeSupport, int i) const {
    BTPhysics_im.btBU_Simplex1to4_getPlane(cast(void*)swigCPtr, btVector3.swigGetCPtr(planeNormal), btVector3.swigGetCPtr(planeSupport), i);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public int getIndex(int i) const {
    auto ret = BTPhysics_im.btBU_Simplex1to4_getIndex(cast(void*)swigCPtr, i);
    return ret;
  }

  public override bool isInside(btVector3 pt, float tolerance) const {
    bool ret = BTPhysics_im.btBU_Simplex1to4_isInside(cast(void*)swigCPtr, btVector3.swigGetCPtr(pt), tolerance) ? true : false;
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btBU_Simplex1to4_getName(cast(void*)swigCPtr));
    return ret;
  }
}

class btEmptyShape {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btEmptyShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btEmptyShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(BTPhysics_im.new_btEmptyShape(), true);
  }

  public void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btEmptyShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btEmptyShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getLocalScaling() const {
    btVector3 ret = new btVector3(BTPhysics_im.btEmptyShape_getLocalScaling(cast(void*)swigCPtr), false);
    return ret;
  }

  public void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btEmptyShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btEmptyShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public void processAllTriangles(SWIGTYPE_p_btTriangleCallback arg0, btVector3 arg1, btVector3 arg2) const {
    BTPhysics_im.btEmptyShape_processAllTriangles(cast(void*)swigCPtr, SWIGTYPE_p_btTriangleCallback.swigGetCPtr(arg0), btVector3.swigGetCPtr(arg1), btVector3.swigGetCPtr(arg2));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

class btMultiSphereShape : btConvexInternalAabbCachingShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btMultiSphereShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btMultiSphereShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btMultiSphereShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(btVector3 positions, float* radi, int numSpheres) {
    this(BTPhysics_im.new_btMultiSphereShape(btVector3.swigGetCPtr(positions), cast(void*)radi, numSpheres), true);
  }

  public override void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btMultiSphereShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btMultiSphereShape_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) const {
    BTPhysics_im.btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vectors), btVector3.swigGetCPtr(supportVerticesOut), numVectors);
  }

  public int getSphereCount() const {
    auto ret = BTPhysics_im.btMultiSphereShape_getSphereCount(cast(void*)swigCPtr);
    return ret;
  }

  public btVector3 getSpherePosition(int index) const {
    btVector3 ret = new btVector3(BTPhysics_im.btMultiSphereShape_getSpherePosition(cast(void*)swigCPtr, index), false);
    return ret;
  }

  public float getSphereRadius(int index) const {
    auto ret = BTPhysics_im.btMultiSphereShape_getSphereRadius(cast(void*)swigCPtr, index);
    return ret;
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btMultiSphereShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public override int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btMultiSphereShape_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btMultiSphereShape_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btPositionAndRadius {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btPositionAndRadius obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btPositionAndRadius(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_pos(btVector3FloatData value) @property {
    BTPhysics_im.btPositionAndRadius_m_pos_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_pos() @property const {
    void* cPtr = BTPhysics_im.btPositionAndRadius_m_pos_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_radius(float value) @property {
    BTPhysics_im.btPositionAndRadius_m_radius_set(cast(void*)swigCPtr, value);
  }

  public float m_radius() @property const {
    auto ret = BTPhysics_im.btPositionAndRadius_m_radius_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btPositionAndRadius(), true);
  }
}

class btMultiSphereShapeData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btMultiSphereShapeData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btMultiSphereShapeData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_convexInternalShapeData(btConvexInternalShapeData value) @property {
    BTPhysics_im.btMultiSphereShapeData_m_convexInternalShapeData_set(cast(void*)swigCPtr, btConvexInternalShapeData.swigGetCPtr(value));
  }

  public btConvexInternalShapeData m_convexInternalShapeData() @property const {
    void* cPtr = BTPhysics_im.btMultiSphereShapeData_m_convexInternalShapeData_get(cast(void*)swigCPtr);
    btConvexInternalShapeData ret = (cPtr is null) ? null : new btConvexInternalShapeData(cPtr, false);
    return ret;
  }

  public void m_localPositionArrayPtr(btPositionAndRadius value) @property {
    BTPhysics_im.btMultiSphereShapeData_m_localPositionArrayPtr_set(cast(void*)swigCPtr, btPositionAndRadius.swigGetCPtr(value));
  }

  public btPositionAndRadius m_localPositionArrayPtr() @property const {
    void* cPtr = BTPhysics_im.btMultiSphereShapeData_m_localPositionArrayPtr_get(cast(void*)swigCPtr);
    btPositionAndRadius ret = (cPtr is null) ? null : new btPositionAndRadius(cPtr, false);
    return ret;
  }

  public void m_localPositionArraySize(int value) @property {
    BTPhysics_im.btMultiSphereShapeData_m_localPositionArraySize_set(cast(void*)swigCPtr, value);
  }

  public int m_localPositionArraySize() @property const {
    auto ret = BTPhysics_im.btMultiSphereShapeData_m_localPositionArraySize_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_padding(string value) @property {
    BTPhysics_im.btMultiSphereShapeData_m_padding_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_padding() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btMultiSphereShapeData_m_padding_get(cast(void*)swigCPtr));
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btMultiSphereShapeData(), true);
  }
}

class btUniformScalingShape : btConvexShape {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btUniformScalingShape_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btUniformScalingShape obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btUniformScalingShape(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(btConvexShape convexChildShape, float uniformScalingFactor) {
    this(BTPhysics_im.new_btUniformScalingShape(btConvexShape.swigGetCPtr(convexChildShape), uniformScalingFactor), true);
  }

  public override btVector3 localGetSupportingVertexWithoutMargin(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btUniformScalingShape_localGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override btVector3 localGetSupportingVertex(btVector3 vec) const {
    btVector3 ret = new btVector3(BTPhysics_im.btUniformScalingShape_localGetSupportingVertex(cast(void*)swigCPtr, btVector3.swigGetCPtr(vec)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void batchedUnitVectorGetSupportingVertexWithoutMargin(btVector3 vectors, btVector3 supportVerticesOut, int numVectors) const {
    BTPhysics_im.btUniformScalingShape_batchedUnitVectorGetSupportingVertexWithoutMargin(cast(void*)swigCPtr, btVector3.swigGetCPtr(vectors), btVector3.swigGetCPtr(supportVerticesOut), numVectors);
  }

  public override void calculateLocalInertia(float mass, btVector3 inertia) const {
    BTPhysics_im.btUniformScalingShape_calculateLocalInertia(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public float getUniformScalingFactor() const {
    auto ret = BTPhysics_im.btUniformScalingShape_getUniformScalingFactor(cast(void*)swigCPtr);
    return ret;
  }

  public btConvexShape getChildShape() {
    void* cPtr = BTPhysics_im.btUniformScalingShape_getChildShape__SWIG_0(cast(void*)swigCPtr);
    btConvexShape ret = (cPtr is null) ? null : new btConvexShape(cPtr, false);
    return ret;
  }

  public override string getName() const {
    string ret = std.conv.to!string(BTPhysics_im.btUniformScalingShape_getName(cast(void*)swigCPtr));
    return ret;
  }

  public override void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btUniformScalingShape_getAabb(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getAabbSlow(btTransform t, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btUniformScalingShape_getAabbSlow(cast(void*)swigCPtr, btTransform.swigGetCPtr(t), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void setLocalScaling(btVector3 scaling) {
    BTPhysics_im.btUniformScalingShape_setLocalScaling(cast(void*)swigCPtr, btVector3.swigGetCPtr(scaling));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override btVector3 getLocalScaling() const {
    btVector3 ret = new btVector3(BTPhysics_im.btUniformScalingShape_getLocalScaling(cast(void*)swigCPtr), false);
    return ret;
  }

  public override void setMargin(float margin) {
    BTPhysics_im.btUniformScalingShape_setMargin(cast(void*)swigCPtr, margin);
  }

  public override float getMargin() const {
    auto ret = BTPhysics_im.btUniformScalingShape_getMargin(cast(void*)swigCPtr);
    return ret;
  }

  public override int getNumPreferredPenetrationDirections() const {
    auto ret = BTPhysics_im.btUniformScalingShape_getNumPreferredPenetrationDirections(cast(void*)swigCPtr);
    return ret;
  }

  public override void getPreferredPenetrationDirection(int index, btVector3 penetrationVector) const {
    BTPhysics_im.btUniformScalingShape_getPreferredPenetrationDirection(cast(void*)swigCPtr, index, btVector3.swigGetCPtr(penetrationVector));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

class btCollisionConfiguration {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btCollisionConfiguration obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCollisionConfiguration(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public SWIGTYPE_p_btPoolAllocator getPersistentManifoldPool() {
    void* cPtr = BTPhysics_im.btCollisionConfiguration_getPersistentManifoldPool(cast(void*)swigCPtr);
    SWIGTYPE_p_btPoolAllocator ret = (cPtr is null) ? null : new SWIGTYPE_p_btPoolAllocator(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btPoolAllocator getCollisionAlgorithmPool() {
    void* cPtr = BTPhysics_im.btCollisionConfiguration_getCollisionAlgorithmPool(cast(void*)swigCPtr);
    SWIGTYPE_p_btPoolAllocator ret = (cPtr is null) ? null : new SWIGTYPE_p_btPoolAllocator(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btStackAlloc getStackAllocator() {
    void* cPtr = BTPhysics_im.btCollisionConfiguration_getStackAllocator(cast(void*)swigCPtr);
    SWIGTYPE_p_btStackAlloc ret = (cPtr is null) ? null : new SWIGTYPE_p_btStackAlloc(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btCollisionAlgorithmCreateFunc getCollisionAlgorithmCreateFunc(int proxyType0, int proxyType1) {
    void* cPtr = BTPhysics_im.btCollisionConfiguration_getCollisionAlgorithmCreateFunc(cast(void*)swigCPtr, proxyType0, proxyType1);
    SWIGTYPE_p_btCollisionAlgorithmCreateFunc ret = (cPtr is null) ? null : new SWIGTYPE_p_btCollisionAlgorithmCreateFunc(cPtr, false);
    return ret;
  }
}

class btSphereSphereCollisionAlgorithm {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btSphereSphereCollisionAlgorithm obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btSphereSphereCollisionAlgorithm(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(SWIGTYPE_p_btPersistentManifold mf, SWIGTYPE_p_btCollisionAlgorithmConstructionInfo ci, btCollisionObject body0, btCollisionObject body1) {
    this(BTPhysics_im.new_btSphereSphereCollisionAlgorithm__SWIG_0(SWIGTYPE_p_btPersistentManifold.swigGetCPtr(mf), SWIGTYPE_p_btCollisionAlgorithmConstructionInfo.swigGetCPtr(ci), btCollisionObject.swigGetCPtr(body0), btCollisionObject.swigGetCPtr(body1)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(SWIGTYPE_p_btCollisionAlgorithmConstructionInfo ci) {
    this(BTPhysics_im.new_btSphereSphereCollisionAlgorithm__SWIG_1(SWIGTYPE_p_btCollisionAlgorithmConstructionInfo.swigGetCPtr(ci)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void processCollision(btCollisionObject body0, btCollisionObject body1, btDispatcherInfo dispatchInfo, SWIGTYPE_p_btManifoldResult resultOut) {
    BTPhysics_im.btSphereSphereCollisionAlgorithm_processCollision(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(body0), btCollisionObject.swigGetCPtr(body1), btDispatcherInfo.swigGetCPtr(dispatchInfo), SWIGTYPE_p_btManifoldResult.swigGetCPtr(resultOut));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public float calculateTimeOfImpact(btCollisionObject body0, btCollisionObject body1, btDispatcherInfo dispatchInfo, SWIGTYPE_p_btManifoldResult resultOut) {
    auto ret = BTPhysics_im.btSphereSphereCollisionAlgorithm_calculateTimeOfImpact(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(body0), btCollisionObject.swigGetCPtr(body1), btDispatcherInfo.swigGetCPtr(dispatchInfo), SWIGTYPE_p_btManifoldResult.swigGetCPtr(resultOut));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void getAllContactManifolds(SWIGTYPE_p_btManifoldArray manifoldArray) {
    BTPhysics_im.btSphereSphereCollisionAlgorithm_getAllContactManifolds(cast(void*)swigCPtr, SWIGTYPE_p_btManifoldArray.swigGetCPtr(manifoldArray));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

class btDefaultCollisionConstructionInfo {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btDefaultCollisionConstructionInfo obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btDefaultCollisionConstructionInfo(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_stackAlloc(SWIGTYPE_p_btStackAlloc value) @property {
    BTPhysics_im.btDefaultCollisionConstructionInfo_m_stackAlloc_set(cast(void*)swigCPtr, SWIGTYPE_p_btStackAlloc.swigGetCPtr(value));
  }

  public SWIGTYPE_p_btStackAlloc m_stackAlloc() @property const {
    void* cPtr = BTPhysics_im.btDefaultCollisionConstructionInfo_m_stackAlloc_get(cast(void*)swigCPtr);
    SWIGTYPE_p_btStackAlloc ret = (cPtr is null) ? null : new SWIGTYPE_p_btStackAlloc(cPtr, false);
    return ret;
  }

  public void m_persistentManifoldPool(SWIGTYPE_p_btPoolAllocator value) @property {
    BTPhysics_im.btDefaultCollisionConstructionInfo_m_persistentManifoldPool_set(cast(void*)swigCPtr, SWIGTYPE_p_btPoolAllocator.swigGetCPtr(value));
  }

  public SWIGTYPE_p_btPoolAllocator m_persistentManifoldPool() @property const {
    void* cPtr = BTPhysics_im.btDefaultCollisionConstructionInfo_m_persistentManifoldPool_get(cast(void*)swigCPtr);
    SWIGTYPE_p_btPoolAllocator ret = (cPtr is null) ? null : new SWIGTYPE_p_btPoolAllocator(cPtr, false);
    return ret;
  }

  public void m_collisionAlgorithmPool(SWIGTYPE_p_btPoolAllocator value) @property {
    BTPhysics_im.btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_set(cast(void*)swigCPtr, SWIGTYPE_p_btPoolAllocator.swigGetCPtr(value));
  }

  public SWIGTYPE_p_btPoolAllocator m_collisionAlgorithmPool() @property const {
    void* cPtr = BTPhysics_im.btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_get(cast(void*)swigCPtr);
    SWIGTYPE_p_btPoolAllocator ret = (cPtr is null) ? null : new SWIGTYPE_p_btPoolAllocator(cPtr, false);
    return ret;
  }

  public void m_defaultMaxPersistentManifoldPoolSize(int value) @property {
    BTPhysics_im.btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_set(cast(void*)swigCPtr, value);
  }

  public int m_defaultMaxPersistentManifoldPoolSize() @property const {
    auto ret = BTPhysics_im.btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_defaultMaxCollisionAlgorithmPoolSize(int value) @property {
    BTPhysics_im.btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_set(cast(void*)swigCPtr, value);
  }

  public int m_defaultMaxCollisionAlgorithmPoolSize() @property const {
    auto ret = BTPhysics_im.btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_customCollisionAlgorithmMaxElementSize(int value) @property {
    BTPhysics_im.btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_set(cast(void*)swigCPtr, value);
  }

  public int m_customCollisionAlgorithmMaxElementSize() @property const {
    auto ret = BTPhysics_im.btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_defaultStackAllocatorSize(int value) @property {
    BTPhysics_im.btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_set(cast(void*)swigCPtr, value);
  }

  public int m_defaultStackAllocatorSize() @property const {
    auto ret = BTPhysics_im.btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_useEpaPenetrationAlgorithm(int value) @property {
    BTPhysics_im.btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_set(cast(void*)swigCPtr, value);
  }

  public int m_useEpaPenetrationAlgorithm() @property const {
    auto ret = BTPhysics_im.btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btDefaultCollisionConstructionInfo(), true);
  }
}

class btDefaultCollisionConfiguration : btCollisionConfiguration {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btDefaultCollisionConfiguration_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btDefaultCollisionConfiguration obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btDefaultCollisionConfiguration(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(btDefaultCollisionConstructionInfo constructionInfo) {
    this(BTPhysics_im.new_btDefaultCollisionConfiguration__SWIG_0(btDefaultCollisionConstructionInfo.swigGetCPtr(constructionInfo)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this() {
    this(BTPhysics_im.new_btDefaultCollisionConfiguration__SWIG_1(), true);
  }

  public override SWIGTYPE_p_btPoolAllocator getPersistentManifoldPool() {
    void* cPtr = BTPhysics_im.btDefaultCollisionConfiguration_getPersistentManifoldPool(cast(void*)swigCPtr);
    SWIGTYPE_p_btPoolAllocator ret = (cPtr is null) ? null : new SWIGTYPE_p_btPoolAllocator(cPtr, false);
    return ret;
  }

  public override SWIGTYPE_p_btPoolAllocator getCollisionAlgorithmPool() {
    void* cPtr = BTPhysics_im.btDefaultCollisionConfiguration_getCollisionAlgorithmPool(cast(void*)swigCPtr);
    SWIGTYPE_p_btPoolAllocator ret = (cPtr is null) ? null : new SWIGTYPE_p_btPoolAllocator(cPtr, false);
    return ret;
  }

  public override SWIGTYPE_p_btStackAlloc getStackAllocator() {
    void* cPtr = BTPhysics_im.btDefaultCollisionConfiguration_getStackAllocator(cast(void*)swigCPtr);
    SWIGTYPE_p_btStackAlloc ret = (cPtr is null) ? null : new SWIGTYPE_p_btStackAlloc(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btVoronoiSimplexSolver getSimplexSolver() {
    void* cPtr = BTPhysics_im.btDefaultCollisionConfiguration_getSimplexSolver(cast(void*)swigCPtr);
    SWIGTYPE_p_btVoronoiSimplexSolver ret = (cPtr is null) ? null : new SWIGTYPE_p_btVoronoiSimplexSolver(cPtr, false);
    return ret;
  }

  public override SWIGTYPE_p_btCollisionAlgorithmCreateFunc getCollisionAlgorithmCreateFunc(int proxyType0, int proxyType1) {
    void* cPtr = BTPhysics_im.btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc(cast(void*)swigCPtr, proxyType0, proxyType1);
    SWIGTYPE_p_btCollisionAlgorithmCreateFunc ret = (cPtr is null) ? null : new SWIGTYPE_p_btCollisionAlgorithmCreateFunc(cPtr, false);
    return ret;
  }

  public void setConvexConvexMultipointIterations(int numPerturbationIterations, int minimumPointsPerturbationThreshold) {
    BTPhysics_im.btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_0(cast(void*)swigCPtr, numPerturbationIterations, minimumPointsPerturbationThreshold);
  }

  public void setConvexConvexMultipointIterations(int numPerturbationIterations) {
    BTPhysics_im.btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_1(cast(void*)swigCPtr, numPerturbationIterations);
  }

  public void setConvexConvexMultipointIterations() {
    BTPhysics_im.btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_2(cast(void*)swigCPtr);
  }

  public void setPlaneConvexMultipointIterations(int numPerturbationIterations, int minimumPointsPerturbationThreshold) {
    BTPhysics_im.btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_0(cast(void*)swigCPtr, numPerturbationIterations, minimumPointsPerturbationThreshold);
  }

  public void setPlaneConvexMultipointIterations(int numPerturbationIterations) {
    BTPhysics_im.btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_1(cast(void*)swigCPtr, numPerturbationIterations);
  }

  public void setPlaneConvexMultipointIterations() {
    BTPhysics_im.btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_2(cast(void*)swigCPtr);
  }
}

class btDispatcherInfo {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btDispatcherInfo obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btDispatcherInfo(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum DispatchFunc {
    DISPATCH_DISCRETE = 1,
    DISPATCH_CONTINUOUS
  }

  public this() {
    this(BTPhysics_im.new_btDispatcherInfo(), true);
  }

  public void m_timeStep(float value) @property {
    BTPhysics_im.btDispatcherInfo_m_timeStep_set(cast(void*)swigCPtr, value);
  }

  public float m_timeStep() @property const {
    auto ret = BTPhysics_im.btDispatcherInfo_m_timeStep_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_stepCount(int value) @property {
    BTPhysics_im.btDispatcherInfo_m_stepCount_set(cast(void*)swigCPtr, value);
  }

  public int m_stepCount() @property const {
    auto ret = BTPhysics_im.btDispatcherInfo_m_stepCount_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_dispatchFunc(int value) @property {
    BTPhysics_im.btDispatcherInfo_m_dispatchFunc_set(cast(void*)swigCPtr, value);
  }

  public int m_dispatchFunc() @property const {
    auto ret = BTPhysics_im.btDispatcherInfo_m_dispatchFunc_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_timeOfImpact(float value) @property {
    BTPhysics_im.btDispatcherInfo_m_timeOfImpact_set(cast(void*)swigCPtr, value);
  }

  public float m_timeOfImpact() @property const {
    auto ret = BTPhysics_im.btDispatcherInfo_m_timeOfImpact_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_useContinuous(bool value) @property {
    BTPhysics_im.btDispatcherInfo_m_useContinuous_set(cast(void*)swigCPtr, value);
  }

  public bool m_useContinuous() @property const {
    bool ret = BTPhysics_im.btDispatcherInfo_m_useContinuous_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void m_debugDraw(btIDebugDraw value) @property {
    BTPhysics_im.btDispatcherInfo_m_debugDraw_set(cast(void*)swigCPtr, btIDebugDraw.swigGetCPtr(value));
  }

  public btIDebugDraw m_debugDraw() @property const {
    void* cPtr = BTPhysics_im.btDispatcherInfo_m_debugDraw_get(cast(void*)swigCPtr);
    btIDebugDraw ret = (cPtr is null) ? null : new btIDebugDraw(cPtr, false);
    return ret;
  }

  public void m_enableSatConvex(bool value) @property {
    BTPhysics_im.btDispatcherInfo_m_enableSatConvex_set(cast(void*)swigCPtr, value);
  }

  public bool m_enableSatConvex() @property const {
    bool ret = BTPhysics_im.btDispatcherInfo_m_enableSatConvex_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void m_enableSPU(bool value) @property {
    BTPhysics_im.btDispatcherInfo_m_enableSPU_set(cast(void*)swigCPtr, value);
  }

  public bool m_enableSPU() @property const {
    bool ret = BTPhysics_im.btDispatcherInfo_m_enableSPU_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void m_useEpa(bool value) @property {
    BTPhysics_im.btDispatcherInfo_m_useEpa_set(cast(void*)swigCPtr, value);
  }

  public bool m_useEpa() @property const {
    bool ret = BTPhysics_im.btDispatcherInfo_m_useEpa_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void m_allowedCcdPenetration(float value) @property {
    BTPhysics_im.btDispatcherInfo_m_allowedCcdPenetration_set(cast(void*)swigCPtr, value);
  }

  public float m_allowedCcdPenetration() @property const {
    auto ret = BTPhysics_im.btDispatcherInfo_m_allowedCcdPenetration_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_useConvexConservativeDistanceUtil(bool value) @property {
    BTPhysics_im.btDispatcherInfo_m_useConvexConservativeDistanceUtil_set(cast(void*)swigCPtr, value);
  }

  public bool m_useConvexConservativeDistanceUtil() @property const {
    bool ret = BTPhysics_im.btDispatcherInfo_m_useConvexConservativeDistanceUtil_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void m_convexConservativeDistanceThreshold(float value) @property {
    BTPhysics_im.btDispatcherInfo_m_convexConservativeDistanceThreshold_set(cast(void*)swigCPtr, value);
  }

  public float m_convexConservativeDistanceThreshold() @property const {
    auto ret = BTPhysics_im.btDispatcherInfo_m_convexConservativeDistanceThreshold_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_stackAllocator(SWIGTYPE_p_btStackAlloc value) @property {
    BTPhysics_im.btDispatcherInfo_m_stackAllocator_set(cast(void*)swigCPtr, SWIGTYPE_p_btStackAlloc.swigGetCPtr(value));
  }

  public SWIGTYPE_p_btStackAlloc m_stackAllocator() @property const {
    void* cPtr = BTPhysics_im.btDispatcherInfo_m_stackAllocator_get(cast(void*)swigCPtr);
    SWIGTYPE_p_btStackAlloc ret = (cPtr is null) ? null : new SWIGTYPE_p_btStackAlloc(cPtr, false);
    return ret;
  }
}

class btDispatcher {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btDispatcher obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btDispatcher(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public SWIGTYPE_p_btCollisionAlgorithm findAlgorithm(btCollisionObject body0, btCollisionObject body1, SWIGTYPE_p_btPersistentManifold sharedManifold) {
    void* cPtr = BTPhysics_im.btDispatcher_findAlgorithm__SWIG_0(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(body0), btCollisionObject.swigGetCPtr(body1), SWIGTYPE_p_btPersistentManifold.swigGetCPtr(sharedManifold));
    SWIGTYPE_p_btCollisionAlgorithm ret = (cPtr is null) ? null : new SWIGTYPE_p_btCollisionAlgorithm(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btCollisionAlgorithm findAlgorithm(btCollisionObject body0, btCollisionObject body1) {
    void* cPtr = BTPhysics_im.btDispatcher_findAlgorithm__SWIG_1(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(body0), btCollisionObject.swigGetCPtr(body1));
    SWIGTYPE_p_btCollisionAlgorithm ret = (cPtr is null) ? null : new SWIGTYPE_p_btCollisionAlgorithm(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btPersistentManifold getNewManifold(void* body0, void* body1) {
    void* cPtr = BTPhysics_im.btDispatcher_getNewManifold(cast(void*)swigCPtr, cast(void*)body0, cast(void*)body1);
    SWIGTYPE_p_btPersistentManifold ret = (cPtr is null) ? null : new SWIGTYPE_p_btPersistentManifold(cPtr, false);
    return ret;
  }

  public void releaseManifold(SWIGTYPE_p_btPersistentManifold manifold) {
    BTPhysics_im.btDispatcher_releaseManifold(cast(void*)swigCPtr, SWIGTYPE_p_btPersistentManifold.swigGetCPtr(manifold));
  }

  public void clearManifold(SWIGTYPE_p_btPersistentManifold manifold) {
    BTPhysics_im.btDispatcher_clearManifold(cast(void*)swigCPtr, SWIGTYPE_p_btPersistentManifold.swigGetCPtr(manifold));
  }

  public bool needsCollision(btCollisionObject body0, btCollisionObject body1) {
    bool ret = BTPhysics_im.btDispatcher_needsCollision(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(body0), btCollisionObject.swigGetCPtr(body1)) ? true : false;
    return ret;
  }

  public bool needsResponse(btCollisionObject body0, btCollisionObject body1) {
    bool ret = BTPhysics_im.btDispatcher_needsResponse(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(body0), btCollisionObject.swigGetCPtr(body1)) ? true : false;
    return ret;
  }

  public void dispatchAllCollisionPairs(SWIGTYPE_p_btOverlappingPairCache pairCache, btDispatcherInfo dispatchInfo, btDispatcher dispatcher) {
    BTPhysics_im.btDispatcher_dispatchAllCollisionPairs(cast(void*)swigCPtr, SWIGTYPE_p_btOverlappingPairCache.swigGetCPtr(pairCache), btDispatcherInfo.swigGetCPtr(dispatchInfo), btDispatcher.swigGetCPtr(dispatcher));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public int getNumManifolds() const {
    auto ret = BTPhysics_im.btDispatcher_getNumManifolds(cast(void*)swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_btPersistentManifold getManifoldByIndexInternal(int index) {
    void* cPtr = BTPhysics_im.btDispatcher_getManifoldByIndexInternal(cast(void*)swigCPtr, index);
    SWIGTYPE_p_btPersistentManifold ret = (cPtr is null) ? null : new SWIGTYPE_p_btPersistentManifold(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_p_btPersistentManifold getInternalManifoldPointer() {
    void* cPtr = BTPhysics_im.btDispatcher_getInternalManifoldPointer(cast(void*)swigCPtr);
    SWIGTYPE_p_p_btPersistentManifold ret = (cPtr is null) ? null : new SWIGTYPE_p_p_btPersistentManifold(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btPoolAllocator getInternalManifoldPool() {
    void* cPtr = BTPhysics_im.btDispatcher_getInternalManifoldPool__SWIG_0(cast(void*)swigCPtr);
    SWIGTYPE_p_btPoolAllocator ret = (cPtr is null) ? null : new SWIGTYPE_p_btPoolAllocator(cPtr, false);
    return ret;
  }

  public void* allocateCollisionAlgorithm(int size) {
    auto ret = cast(void*)BTPhysics_im.btDispatcher_allocateCollisionAlgorithm(cast(void*)swigCPtr, size);
    return ret;
  }

  public void freeCollisionAlgorithm(void* ptr) {
    BTPhysics_im.btDispatcher_freeCollisionAlgorithm(cast(void*)swigCPtr, cast(void*)ptr);
  }
}

int USE_DISPATCH_REGISTRY_ARRAY() @property {
  auto ret = BTPhysics_im.USE_DISPATCH_REGISTRY_ARRAY_get();
  return ret;
}

class btCollisionDispatcher : btDispatcher {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btCollisionDispatcher_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btCollisionDispatcher obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btCollisionDispatcher(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum DispatcherFlags {
    CD_STATIC_STATIC_REPORTED = 1,
    CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD = 2,
    CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION = 4
  }

  public int getDispatcherFlags() const {
    auto ret = BTPhysics_im.btCollisionDispatcher_getDispatcherFlags(cast(void*)swigCPtr);
    return ret;
  }

  public void setDispatcherFlags(int flags) {
    BTPhysics_im.btCollisionDispatcher_setDispatcherFlags(cast(void*)swigCPtr, flags);
  }

  public void registerCollisionCreateFunc(int proxyType0, int proxyType1, SWIGTYPE_p_btCollisionAlgorithmCreateFunc createFunc) {
    BTPhysics_im.btCollisionDispatcher_registerCollisionCreateFunc(cast(void*)swigCPtr, proxyType0, proxyType1, SWIGTYPE_p_btCollisionAlgorithmCreateFunc.swigGetCPtr(createFunc));
  }

  public override int getNumManifolds() const {
    auto ret = BTPhysics_im.btCollisionDispatcher_getNumManifolds(cast(void*)swigCPtr);
    return ret;
  }

  public override SWIGTYPE_p_p_btPersistentManifold getInternalManifoldPointer() {
    void* cPtr = BTPhysics_im.btCollisionDispatcher_getInternalManifoldPointer(cast(void*)swigCPtr);
    SWIGTYPE_p_p_btPersistentManifold ret = (cPtr is null) ? null : new SWIGTYPE_p_p_btPersistentManifold(cPtr, false);
    return ret;
  }

  public override SWIGTYPE_p_btPersistentManifold getManifoldByIndexInternal(int index) {
    void* cPtr = BTPhysics_im.btCollisionDispatcher_getManifoldByIndexInternal__SWIG_0(cast(void*)swigCPtr, index);
    SWIGTYPE_p_btPersistentManifold ret = (cPtr is null) ? null : new SWIGTYPE_p_btPersistentManifold(cPtr, false);
    return ret;
  }

  alias btDispatcher.getManifoldByIndexInternal getManifoldByIndexInternal;

  public this(btCollisionConfiguration collisionConfiguration) {
    this(BTPhysics_im.new_btCollisionDispatcher(btCollisionConfiguration.swigGetCPtr(collisionConfiguration)), true);
  }

  public override SWIGTYPE_p_btPersistentManifold getNewManifold(void* b0, void* b1) {
    void* cPtr = BTPhysics_im.btCollisionDispatcher_getNewManifold(cast(void*)swigCPtr, cast(void*)b0, cast(void*)b1);
    SWIGTYPE_p_btPersistentManifold ret = (cPtr is null) ? null : new SWIGTYPE_p_btPersistentManifold(cPtr, false);
    return ret;
  }

  public override void releaseManifold(SWIGTYPE_p_btPersistentManifold manifold) {
    BTPhysics_im.btCollisionDispatcher_releaseManifold(cast(void*)swigCPtr, SWIGTYPE_p_btPersistentManifold.swigGetCPtr(manifold));
  }

  public override void clearManifold(SWIGTYPE_p_btPersistentManifold manifold) {
    BTPhysics_im.btCollisionDispatcher_clearManifold(cast(void*)swigCPtr, SWIGTYPE_p_btPersistentManifold.swigGetCPtr(manifold));
  }

  public override SWIGTYPE_p_btCollisionAlgorithm findAlgorithm(btCollisionObject body0, btCollisionObject body1, SWIGTYPE_p_btPersistentManifold sharedManifold) {
    void* cPtr = BTPhysics_im.btCollisionDispatcher_findAlgorithm__SWIG_0(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(body0), btCollisionObject.swigGetCPtr(body1), SWIGTYPE_p_btPersistentManifold.swigGetCPtr(sharedManifold));
    SWIGTYPE_p_btCollisionAlgorithm ret = (cPtr is null) ? null : new SWIGTYPE_p_btCollisionAlgorithm(cPtr, false);
    return ret;
  }

  public override SWIGTYPE_p_btCollisionAlgorithm findAlgorithm(btCollisionObject body0, btCollisionObject body1) {
    void* cPtr = BTPhysics_im.btCollisionDispatcher_findAlgorithm__SWIG_1(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(body0), btCollisionObject.swigGetCPtr(body1));
    SWIGTYPE_p_btCollisionAlgorithm ret = (cPtr is null) ? null : new SWIGTYPE_p_btCollisionAlgorithm(cPtr, false);
    return ret;
  }

  public override bool needsCollision(btCollisionObject body0, btCollisionObject body1) {
    bool ret = BTPhysics_im.btCollisionDispatcher_needsCollision(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(body0), btCollisionObject.swigGetCPtr(body1)) ? true : false;
    return ret;
  }

  public override bool needsResponse(btCollisionObject body0, btCollisionObject body1) {
    bool ret = BTPhysics_im.btCollisionDispatcher_needsResponse(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(body0), btCollisionObject.swigGetCPtr(body1)) ? true : false;
    return ret;
  }

  public override void dispatchAllCollisionPairs(SWIGTYPE_p_btOverlappingPairCache pairCache, btDispatcherInfo dispatchInfo, btDispatcher dispatcher) {
    BTPhysics_im.btCollisionDispatcher_dispatchAllCollisionPairs(cast(void*)swigCPtr, SWIGTYPE_p_btOverlappingPairCache.swigGetCPtr(pairCache), btDispatcherInfo.swigGetCPtr(dispatchInfo), btDispatcher.swigGetCPtr(dispatcher));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setNearCallback(SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void nearCallback) {
    BTPhysics_im.btCollisionDispatcher_setNearCallback(cast(void*)swigCPtr, SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void.swigGetCPtr(nearCallback));
  }

  public SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void getNearCallback() const {
    void* cPtr = BTPhysics_im.btCollisionDispatcher_getNearCallback(cast(void*)swigCPtr);
    SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void ret = (cPtr is null) ? null : new SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void(cPtr, false);
    return ret;
  }

  public static void defaultNearCallback(SWIGTYPE_p_btBroadphasePair collisionPair, btCollisionDispatcher dispatcher, btDispatcherInfo dispatchInfo) {
    BTPhysics_im.btCollisionDispatcher_defaultNearCallback(SWIGTYPE_p_btBroadphasePair.swigGetCPtr(collisionPair), btCollisionDispatcher.swigGetCPtr(dispatcher), btDispatcherInfo.swigGetCPtr(dispatchInfo));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void* allocateCollisionAlgorithm(int size) {
    auto ret = cast(void*)BTPhysics_im.btCollisionDispatcher_allocateCollisionAlgorithm(cast(void*)swigCPtr, size);
    return ret;
  }

  public override void freeCollisionAlgorithm(void* ptr) {
    BTPhysics_im.btCollisionDispatcher_freeCollisionAlgorithm(cast(void*)swigCPtr, cast(void*)ptr);
  }

  public btCollisionConfiguration getCollisionConfiguration() {
    void* cPtr = BTPhysics_im.btCollisionDispatcher_getCollisionConfiguration__SWIG_0(cast(void*)swigCPtr);
    btCollisionConfiguration ret = (cPtr is null) ? null : new btCollisionConfiguration(cPtr, false);
    return ret;
  }

  public void setCollisionConfiguration(btCollisionConfiguration config) {
    BTPhysics_im.btCollisionDispatcher_setCollisionConfiguration(cast(void*)swigCPtr, btCollisionConfiguration.swigGetCPtr(config));
  }

  public override SWIGTYPE_p_btPoolAllocator getInternalManifoldPool() {
    void* cPtr = BTPhysics_im.btCollisionDispatcher_getInternalManifoldPool__SWIG_0(cast(void*)swigCPtr);
    SWIGTYPE_p_btPoolAllocator ret = (cPtr is null) ? null : new SWIGTYPE_p_btPoolAllocator(cPtr, false);
    return ret;
  }
}

class btBroadphaseAabbCallback {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btBroadphaseAabbCallback obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btBroadphaseAabbCallback(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public bool process(SWIGTYPE_p_btBroadphaseProxy proxy) {
    bool ret = BTPhysics_im.btBroadphaseAabbCallback_process(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(proxy)) ? true : false;
    return ret;
  }
}

class btBroadphaseRayCallback : btBroadphaseAabbCallback {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btBroadphaseRayCallback_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btBroadphaseRayCallback obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btBroadphaseRayCallback(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void m_rayDirectionInverse(btVector3 value) @property {
    BTPhysics_im.btBroadphaseRayCallback_m_rayDirectionInverse_set(cast(void*)swigCPtr, btVector3.swigGetCPtr(value));
  }

  public btVector3 m_rayDirectionInverse() @property const {
    void* cPtr = BTPhysics_im.btBroadphaseRayCallback_m_rayDirectionInverse_get(cast(void*)swigCPtr);
    btVector3 ret = (cPtr is null) ? null : new btVector3(cPtr, false);
    return ret;
  }

  public void m_signs(SWIGTYPE_p_unsigned_int value) @property {
    BTPhysics_im.btBroadphaseRayCallback_m_signs_set(cast(void*)swigCPtr, SWIGTYPE_p_unsigned_int.swigGetCPtr(value));
  }

  public SWIGTYPE_p_unsigned_int m_signs() @property const {
    void* cPtr = BTPhysics_im.btBroadphaseRayCallback_m_signs_get(cast(void*)swigCPtr);
    SWIGTYPE_p_unsigned_int ret = (cPtr is null) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
    return ret;
  }

  public void m_lambda_max(float value) @property {
    BTPhysics_im.btBroadphaseRayCallback_m_lambda_max_set(cast(void*)swigCPtr, value);
  }

  public float m_lambda_max() @property const {
    auto ret = BTPhysics_im.btBroadphaseRayCallback_m_lambda_max_get(cast(void*)swigCPtr);
    return ret;
  }
}

class btBroadphaseInterface {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btBroadphaseInterface obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btBroadphaseInterface(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public SWIGTYPE_p_btBroadphaseProxy createProxy(btVector3 aabbMin, btVector3 aabbMax, int shapeType, void* userPtr, short collisionFilterGroup, short collisionFilterMask, btDispatcher dispatcher, void* multiSapProxy) {
    void* cPtr = BTPhysics_im.btBroadphaseInterface_createProxy(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax), shapeType, cast(void*)userPtr, collisionFilterGroup, collisionFilterMask, btDispatcher.swigGetCPtr(dispatcher), cast(void*)multiSapProxy);
    SWIGTYPE_p_btBroadphaseProxy ret = (cPtr is null) ? null : new SWIGTYPE_p_btBroadphaseProxy(cPtr, false);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void destroyProxy(SWIGTYPE_p_btBroadphaseProxy proxy, btDispatcher dispatcher) {
    BTPhysics_im.btBroadphaseInterface_destroyProxy(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(proxy), btDispatcher.swigGetCPtr(dispatcher));
  }

  public void setAabb(SWIGTYPE_p_btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax, btDispatcher dispatcher) {
    BTPhysics_im.btBroadphaseInterface_setAabb(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(proxy), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax), btDispatcher.swigGetCPtr(dispatcher));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getAabb(SWIGTYPE_p_btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btBroadphaseInterface_getAabb(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(proxy), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin, btVector3 aabbMax) {
    BTPhysics_im.btBroadphaseInterface_rayTest__SWIG_0(cast(void*)swigCPtr, btVector3.swigGetCPtr(rayFrom), btVector3.swigGetCPtr(rayTo), btBroadphaseRayCallback.swigGetCPtr(rayCallback), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin) {
    BTPhysics_im.btBroadphaseInterface_rayTest__SWIG_1(cast(void*)swigCPtr, btVector3.swigGetCPtr(rayFrom), btVector3.swigGetCPtr(rayTo), btBroadphaseRayCallback.swigGetCPtr(rayCallback), btVector3.swigGetCPtr(aabbMin));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback) {
    BTPhysics_im.btBroadphaseInterface_rayTest__SWIG_2(cast(void*)swigCPtr, btVector3.swigGetCPtr(rayFrom), btVector3.swigGetCPtr(rayTo), btBroadphaseRayCallback.swigGetCPtr(rayCallback));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void aabbTest(btVector3 aabbMin, btVector3 aabbMax, btBroadphaseAabbCallback callback) {
    BTPhysics_im.btBroadphaseInterface_aabbTest(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax), btBroadphaseAabbCallback.swigGetCPtr(callback));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void calculateOverlappingPairs(btDispatcher dispatcher) {
    BTPhysics_im.btBroadphaseInterface_calculateOverlappingPairs(cast(void*)swigCPtr, btDispatcher.swigGetCPtr(dispatcher));
  }

  public SWIGTYPE_p_btOverlappingPairCache getOverlappingPairCache() {
    void* cPtr = BTPhysics_im.btBroadphaseInterface_getOverlappingPairCache__SWIG_0(cast(void*)swigCPtr);
    SWIGTYPE_p_btOverlappingPairCache ret = (cPtr is null) ? null : new SWIGTYPE_p_btOverlappingPairCache(cPtr, false);
    return ret;
  }

  public void getBroadphaseAabb(btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btBroadphaseInterface_getBroadphaseAabb(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void resetPool(btDispatcher dispatcher) {
    BTPhysics_im.btBroadphaseInterface_resetPool(cast(void*)swigCPtr, btDispatcher.swigGetCPtr(dispatcher));
  }

  public void printStats() {
    BTPhysics_im.btBroadphaseInterface_printStats(cast(void*)swigCPtr);
  }
}

class btSimpleBroadphaseProxy {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btSimpleBroadphaseProxy obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btSimpleBroadphaseProxy(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_nextFree(int value) @property {
    BTPhysics_im.btSimpleBroadphaseProxy_m_nextFree_set(cast(void*)swigCPtr, value);
  }

  public int m_nextFree() @property const {
    auto ret = BTPhysics_im.btSimpleBroadphaseProxy_m_nextFree_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btSimpleBroadphaseProxy__SWIG_0(), true);
  }

  public this(btVector3 minpt, btVector3 maxpt, int shapeType, void* userPtr, short collisionFilterGroup, short collisionFilterMask, void* multiSapProxy) {
    this(BTPhysics_im.new_btSimpleBroadphaseProxy__SWIG_1(btVector3.swigGetCPtr(minpt), btVector3.swigGetCPtr(maxpt), shapeType, cast(void*)userPtr, collisionFilterGroup, collisionFilterMask, cast(void*)multiSapProxy), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void SetNextFree(int next) {
    BTPhysics_im.btSimpleBroadphaseProxy_SetNextFree(cast(void*)swigCPtr, next);
  }

  public int GetNextFree() const {
    auto ret = BTPhysics_im.btSimpleBroadphaseProxy_GetNextFree(cast(void*)swigCPtr);
    return ret;
  }
}

class btSimpleBroadphase : btBroadphaseInterface {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btSimpleBroadphase_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btSimpleBroadphase obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btSimpleBroadphase(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(int maxProxies, SWIGTYPE_p_btOverlappingPairCache overlappingPairCache) {
    this(BTPhysics_im.new_btSimpleBroadphase__SWIG_0(maxProxies, SWIGTYPE_p_btOverlappingPairCache.swigGetCPtr(overlappingPairCache)), true);
  }

  public this(int maxProxies) {
    this(BTPhysics_im.new_btSimpleBroadphase__SWIG_1(maxProxies), true);
  }

  public this() {
    this(BTPhysics_im.new_btSimpleBroadphase__SWIG_2(), true);
  }

  public static bool aabbOverlap(btSimpleBroadphaseProxy proxy0, btSimpleBroadphaseProxy proxy1) {
    bool ret = BTPhysics_im.btSimpleBroadphase_aabbOverlap(btSimpleBroadphaseProxy.swigGetCPtr(proxy0), btSimpleBroadphaseProxy.swigGetCPtr(proxy1)) ? true : false;
    return ret;
  }

  public override SWIGTYPE_p_btBroadphaseProxy createProxy(btVector3 aabbMin, btVector3 aabbMax, int shapeType, void* userPtr, short collisionFilterGroup, short collisionFilterMask, btDispatcher dispatcher, void* multiSapProxy) {
    void* cPtr = BTPhysics_im.btSimpleBroadphase_createProxy(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax), shapeType, cast(void*)userPtr, collisionFilterGroup, collisionFilterMask, btDispatcher.swigGetCPtr(dispatcher), cast(void*)multiSapProxy);
    SWIGTYPE_p_btBroadphaseProxy ret = (cPtr is null) ? null : new SWIGTYPE_p_btBroadphaseProxy(cPtr, false);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void calculateOverlappingPairs(btDispatcher dispatcher) {
    BTPhysics_im.btSimpleBroadphase_calculateOverlappingPairs(cast(void*)swigCPtr, btDispatcher.swigGetCPtr(dispatcher));
  }

  public override void destroyProxy(SWIGTYPE_p_btBroadphaseProxy proxy, btDispatcher dispatcher) {
    BTPhysics_im.btSimpleBroadphase_destroyProxy(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(proxy), btDispatcher.swigGetCPtr(dispatcher));
  }

  public override void setAabb(SWIGTYPE_p_btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax, btDispatcher dispatcher) {
    BTPhysics_im.btSimpleBroadphase_setAabb(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(proxy), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax), btDispatcher.swigGetCPtr(dispatcher));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getAabb(SWIGTYPE_p_btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btSimpleBroadphase_getAabb(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(proxy), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin, btVector3 aabbMax) {
    BTPhysics_im.btSimpleBroadphase_rayTest__SWIG_0(cast(void*)swigCPtr, btVector3.swigGetCPtr(rayFrom), btVector3.swigGetCPtr(rayTo), btBroadphaseRayCallback.swigGetCPtr(rayCallback), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin) {
    BTPhysics_im.btSimpleBroadphase_rayTest__SWIG_1(cast(void*)swigCPtr, btVector3.swigGetCPtr(rayFrom), btVector3.swigGetCPtr(rayTo), btBroadphaseRayCallback.swigGetCPtr(rayCallback), btVector3.swigGetCPtr(aabbMin));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback) {
    BTPhysics_im.btSimpleBroadphase_rayTest__SWIG_2(cast(void*)swigCPtr, btVector3.swigGetCPtr(rayFrom), btVector3.swigGetCPtr(rayTo), btBroadphaseRayCallback.swigGetCPtr(rayCallback));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void aabbTest(btVector3 aabbMin, btVector3 aabbMax, btBroadphaseAabbCallback callback) {
    BTPhysics_im.btSimpleBroadphase_aabbTest(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax), btBroadphaseAabbCallback.swigGetCPtr(callback));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override SWIGTYPE_p_btOverlappingPairCache getOverlappingPairCache() {
    void* cPtr = BTPhysics_im.btSimpleBroadphase_getOverlappingPairCache__SWIG_0(cast(void*)swigCPtr);
    SWIGTYPE_p_btOverlappingPairCache ret = (cPtr is null) ? null : new SWIGTYPE_p_btOverlappingPairCache(cPtr, false);
    return ret;
  }

  public bool testAabbOverlap(SWIGTYPE_p_btBroadphaseProxy proxy0, SWIGTYPE_p_btBroadphaseProxy proxy1) {
    bool ret = BTPhysics_im.btSimpleBroadphase_testAabbOverlap(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(proxy0), SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(proxy1)) ? true : false;
    return ret;
  }

  public override void getBroadphaseAabb(btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btSimpleBroadphase_getBroadphaseAabb(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void printStats() {
    BTPhysics_im.btSimpleBroadphase_printStats(cast(void*)swigCPtr);
  }
}

int USE_OVERLAP_TEST_ON_REMOVES() @property {
  auto ret = BTPhysics_im.USE_OVERLAP_TEST_ON_REMOVES_get();
  return ret;
}

void gOverlappingPairs(int value) @property {
  BTPhysics_im.gOverlappingPairs_set(value);
}

int gOverlappingPairs() @property {
  auto ret = BTPhysics_im.gOverlappingPairs_get();
  return ret;
}

class btAxisSweep3 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btAxisSweep3 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btAxisSweep3(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(btVector3 worldAabbMin, btVector3 worldAabbMax, ushort maxHandles, SWIGTYPE_p_btOverlappingPairCache pairCache, bool disableRaycastAccelerator) {
    this(BTPhysics_im.new_btAxisSweep3__SWIG_0(btVector3.swigGetCPtr(worldAabbMin), btVector3.swigGetCPtr(worldAabbMax), maxHandles, SWIGTYPE_p_btOverlappingPairCache.swigGetCPtr(pairCache), disableRaycastAccelerator), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btVector3 worldAabbMin, btVector3 worldAabbMax, ushort maxHandles, SWIGTYPE_p_btOverlappingPairCache pairCache) {
    this(BTPhysics_im.new_btAxisSweep3__SWIG_1(btVector3.swigGetCPtr(worldAabbMin), btVector3.swigGetCPtr(worldAabbMax), maxHandles, SWIGTYPE_p_btOverlappingPairCache.swigGetCPtr(pairCache)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btVector3 worldAabbMin, btVector3 worldAabbMax, ushort maxHandles) {
    this(BTPhysics_im.new_btAxisSweep3__SWIG_2(btVector3.swigGetCPtr(worldAabbMin), btVector3.swigGetCPtr(worldAabbMax), maxHandles), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btVector3 worldAabbMin, btVector3 worldAabbMax) {
    this(BTPhysics_im.new_btAxisSweep3__SWIG_3(btVector3.swigGetCPtr(worldAabbMin), btVector3.swigGetCPtr(worldAabbMax)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

class bt32BitAxisSweep3 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(bt32BitAxisSweep3 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_bt32BitAxisSweep3(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(btVector3 worldAabbMin, btVector3 worldAabbMax, uint maxHandles, SWIGTYPE_p_btOverlappingPairCache pairCache, bool disableRaycastAccelerator) {
    this(BTPhysics_im.new_bt32BitAxisSweep3__SWIG_0(btVector3.swigGetCPtr(worldAabbMin), btVector3.swigGetCPtr(worldAabbMax), maxHandles, SWIGTYPE_p_btOverlappingPairCache.swigGetCPtr(pairCache), disableRaycastAccelerator), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btVector3 worldAabbMin, btVector3 worldAabbMax, uint maxHandles, SWIGTYPE_p_btOverlappingPairCache pairCache) {
    this(BTPhysics_im.new_bt32BitAxisSweep3__SWIG_1(btVector3.swigGetCPtr(worldAabbMin), btVector3.swigGetCPtr(worldAabbMax), maxHandles, SWIGTYPE_p_btOverlappingPairCache.swigGetCPtr(pairCache)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btVector3 worldAabbMin, btVector3 worldAabbMax, uint maxHandles) {
    this(BTPhysics_im.new_bt32BitAxisSweep3__SWIG_2(btVector3.swigGetCPtr(worldAabbMin), btVector3.swigGetCPtr(worldAabbMax), maxHandles), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btVector3 worldAabbMin, btVector3 worldAabbMax) {
    this(BTPhysics_im.new_bt32BitAxisSweep3__SWIG_3(btVector3.swigGetCPtr(worldAabbMin), btVector3.swigGetCPtr(worldAabbMax)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

int DBVT_BP_PROFILE() @property {
  auto ret = BTPhysics_im.DBVT_BP_PROFILE_get();
  return ret;
}

int DBVT_BP_PREVENTFALSEUPDATE() @property {
  auto ret = BTPhysics_im.DBVT_BP_PREVENTFALSEUPDATE_get();
  return ret;
}

int DBVT_BP_ACCURATESLEEPING() @property {
  auto ret = BTPhysics_im.DBVT_BP_ACCURATESLEEPING_get();
  return ret;
}

int DBVT_BP_ENABLE_BENCHMARK() @property {
  auto ret = BTPhysics_im.DBVT_BP_ENABLE_BENCHMARK_get();
  return ret;
}

class btDbvtProxy {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btDbvtProxy obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btDbvtProxy(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void leaf(SWIGTYPE_p_btDbvtNode value) @property {
    BTPhysics_im.btDbvtProxy_leaf_set(cast(void*)swigCPtr, SWIGTYPE_p_btDbvtNode.swigGetCPtr(value));
  }

  public SWIGTYPE_p_btDbvtNode leaf() @property const {
    void* cPtr = BTPhysics_im.btDbvtProxy_leaf_get(cast(void*)swigCPtr);
    SWIGTYPE_p_btDbvtNode ret = (cPtr is null) ? null : new SWIGTYPE_p_btDbvtNode(cPtr, false);
    return ret;
  }

  public void links(SWIGTYPE_p_p_btDbvtProxy value) @property {
    BTPhysics_im.btDbvtProxy_links_set(cast(void*)swigCPtr, SWIGTYPE_p_p_btDbvtProxy.swigGetCPtr(value));
  }

  public SWIGTYPE_p_p_btDbvtProxy links() @property const {
    void* cPtr = BTPhysics_im.btDbvtProxy_links_get(cast(void*)swigCPtr);
    SWIGTYPE_p_p_btDbvtProxy ret = (cPtr is null) ? null : new SWIGTYPE_p_p_btDbvtProxy(cPtr, false);
    return ret;
  }

  public void stage(int value) @property {
    BTPhysics_im.btDbvtProxy_stage_set(cast(void*)swigCPtr, value);
  }

  public int stage() @property const {
    auto ret = BTPhysics_im.btDbvtProxy_stage_get(cast(void*)swigCPtr);
    return ret;
  }

  public this(btVector3 aabbMin, btVector3 aabbMax, void* userPtr, short collisionFilterGroup, short collisionFilterMask) {
    this(BTPhysics_im.new_btDbvtProxy(btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax), cast(void*)userPtr, collisionFilterGroup, collisionFilterMask), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }
}

class btDbvtBroadphase : btBroadphaseInterface {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btDbvtBroadphase_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btDbvtBroadphase obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btDbvtBroadphase(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum {
    DYNAMIC_SET = 0,
    FIXED_SET = 1,
    STAGECOUNT = 2
  }

  public void m_sets(SWIGTYPE_p_btDbvt value) @property {
    BTPhysics_im.btDbvtBroadphase_m_sets_set(cast(void*)swigCPtr, SWIGTYPE_p_btDbvt.swigGetCPtr(value));
  }

  public SWIGTYPE_p_btDbvt m_sets() @property const {
    void* cPtr = BTPhysics_im.btDbvtBroadphase_m_sets_get(cast(void*)swigCPtr);
    SWIGTYPE_p_btDbvt ret = (cPtr is null) ? null : new SWIGTYPE_p_btDbvt(cPtr, false);
    return ret;
  }

  public void m_stageRoots(SWIGTYPE_p_p_btDbvtProxy value) @property {
    BTPhysics_im.btDbvtBroadphase_m_stageRoots_set(cast(void*)swigCPtr, SWIGTYPE_p_p_btDbvtProxy.swigGetCPtr(value));
  }

  public SWIGTYPE_p_p_btDbvtProxy m_stageRoots() @property const {
    void* cPtr = BTPhysics_im.btDbvtBroadphase_m_stageRoots_get(cast(void*)swigCPtr);
    SWIGTYPE_p_p_btDbvtProxy ret = (cPtr is null) ? null : new SWIGTYPE_p_p_btDbvtProxy(cPtr, false);
    return ret;
  }

  public void m_paircache(SWIGTYPE_p_btOverlappingPairCache value) @property {
    BTPhysics_im.btDbvtBroadphase_m_paircache_set(cast(void*)swigCPtr, SWIGTYPE_p_btOverlappingPairCache.swigGetCPtr(value));
  }

  public SWIGTYPE_p_btOverlappingPairCache m_paircache() @property const {
    void* cPtr = BTPhysics_im.btDbvtBroadphase_m_paircache_get(cast(void*)swigCPtr);
    SWIGTYPE_p_btOverlappingPairCache ret = (cPtr is null) ? null : new SWIGTYPE_p_btOverlappingPairCache(cPtr, false);
    return ret;
  }

  public void m_prediction(float value) @property {
    BTPhysics_im.btDbvtBroadphase_m_prediction_set(cast(void*)swigCPtr, value);
  }

  public float m_prediction() @property const {
    auto ret = BTPhysics_im.btDbvtBroadphase_m_prediction_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_stageCurrent(int value) @property {
    BTPhysics_im.btDbvtBroadphase_m_stageCurrent_set(cast(void*)swigCPtr, value);
  }

  public int m_stageCurrent() @property const {
    auto ret = BTPhysics_im.btDbvtBroadphase_m_stageCurrent_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_fupdates(int value) @property {
    BTPhysics_im.btDbvtBroadphase_m_fupdates_set(cast(void*)swigCPtr, value);
  }

  public int m_fupdates() @property const {
    auto ret = BTPhysics_im.btDbvtBroadphase_m_fupdates_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_dupdates(int value) @property {
    BTPhysics_im.btDbvtBroadphase_m_dupdates_set(cast(void*)swigCPtr, value);
  }

  public int m_dupdates() @property const {
    auto ret = BTPhysics_im.btDbvtBroadphase_m_dupdates_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_cupdates(int value) @property {
    BTPhysics_im.btDbvtBroadphase_m_cupdates_set(cast(void*)swigCPtr, value);
  }

  public int m_cupdates() @property const {
    auto ret = BTPhysics_im.btDbvtBroadphase_m_cupdates_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_newpairs(int value) @property {
    BTPhysics_im.btDbvtBroadphase_m_newpairs_set(cast(void*)swigCPtr, value);
  }

  public int m_newpairs() @property const {
    auto ret = BTPhysics_im.btDbvtBroadphase_m_newpairs_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_fixedleft(int value) @property {
    BTPhysics_im.btDbvtBroadphase_m_fixedleft_set(cast(void*)swigCPtr, value);
  }

  public int m_fixedleft() @property const {
    auto ret = BTPhysics_im.btDbvtBroadphase_m_fixedleft_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_updates_call(uint value) @property {
    BTPhysics_im.btDbvtBroadphase_m_updates_call_set(cast(void*)swigCPtr, value);
  }

  public uint m_updates_call() @property const {
    auto ret = BTPhysics_im.btDbvtBroadphase_m_updates_call_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_updates_done(uint value) @property {
    BTPhysics_im.btDbvtBroadphase_m_updates_done_set(cast(void*)swigCPtr, value);
  }

  public uint m_updates_done() @property const {
    auto ret = BTPhysics_im.btDbvtBroadphase_m_updates_done_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_updates_ratio(float value) @property {
    BTPhysics_im.btDbvtBroadphase_m_updates_ratio_set(cast(void*)swigCPtr, value);
  }

  public float m_updates_ratio() @property const {
    auto ret = BTPhysics_im.btDbvtBroadphase_m_updates_ratio_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_pid(int value) @property {
    BTPhysics_im.btDbvtBroadphase_m_pid_set(cast(void*)swigCPtr, value);
  }

  public int m_pid() @property const {
    auto ret = BTPhysics_im.btDbvtBroadphase_m_pid_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_cid(int value) @property {
    BTPhysics_im.btDbvtBroadphase_m_cid_set(cast(void*)swigCPtr, value);
  }

  public int m_cid() @property const {
    auto ret = BTPhysics_im.btDbvtBroadphase_m_cid_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_gid(int value) @property {
    BTPhysics_im.btDbvtBroadphase_m_gid_set(cast(void*)swigCPtr, value);
  }

  public int m_gid() @property const {
    auto ret = BTPhysics_im.btDbvtBroadphase_m_gid_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_releasepaircache(bool value) @property {
    BTPhysics_im.btDbvtBroadphase_m_releasepaircache_set(cast(void*)swigCPtr, value);
  }

  public bool m_releasepaircache() @property const {
    bool ret = BTPhysics_im.btDbvtBroadphase_m_releasepaircache_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void m_deferedcollide(bool value) @property {
    BTPhysics_im.btDbvtBroadphase_m_deferedcollide_set(cast(void*)swigCPtr, value);
  }

  public bool m_deferedcollide() @property const {
    bool ret = BTPhysics_im.btDbvtBroadphase_m_deferedcollide_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void m_needcleanup(bool value) @property {
    BTPhysics_im.btDbvtBroadphase_m_needcleanup_set(cast(void*)swigCPtr, value);
  }

  public bool m_needcleanup() @property const {
    bool ret = BTPhysics_im.btDbvtBroadphase_m_needcleanup_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public this(SWIGTYPE_p_btOverlappingPairCache paircache) {
    this(BTPhysics_im.new_btDbvtBroadphase__SWIG_0(SWIGTYPE_p_btOverlappingPairCache.swigGetCPtr(paircache)), true);
  }

  public this() {
    this(BTPhysics_im.new_btDbvtBroadphase__SWIG_1(), true);
  }

  public void collide(btDispatcher dispatcher) {
    BTPhysics_im.btDbvtBroadphase_collide(cast(void*)swigCPtr, btDispatcher.swigGetCPtr(dispatcher));
  }

  public void optimize() {
    BTPhysics_im.btDbvtBroadphase_optimize(cast(void*)swigCPtr);
  }

  public override SWIGTYPE_p_btBroadphaseProxy createProxy(btVector3 aabbMin, btVector3 aabbMax, int shapeType, void* userPtr, short collisionFilterGroup, short collisionFilterMask, btDispatcher dispatcher, void* multiSapProxy) {
    void* cPtr = BTPhysics_im.btDbvtBroadphase_createProxy(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax), shapeType, cast(void*)userPtr, collisionFilterGroup, collisionFilterMask, btDispatcher.swigGetCPtr(dispatcher), cast(void*)multiSapProxy);
    SWIGTYPE_p_btBroadphaseProxy ret = (cPtr is null) ? null : new SWIGTYPE_p_btBroadphaseProxy(cPtr, false);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void destroyProxy(SWIGTYPE_p_btBroadphaseProxy proxy, btDispatcher dispatcher) {
    BTPhysics_im.btDbvtBroadphase_destroyProxy(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(proxy), btDispatcher.swigGetCPtr(dispatcher));
  }

  public override void setAabb(SWIGTYPE_p_btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax, btDispatcher dispatcher) {
    BTPhysics_im.btDbvtBroadphase_setAabb(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(proxy), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax), btDispatcher.swigGetCPtr(dispatcher));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin, btVector3 aabbMax) {
    BTPhysics_im.btDbvtBroadphase_rayTest__SWIG_0(cast(void*)swigCPtr, btVector3.swigGetCPtr(rayFrom), btVector3.swigGetCPtr(rayTo), btBroadphaseRayCallback.swigGetCPtr(rayCallback), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin) {
    BTPhysics_im.btDbvtBroadphase_rayTest__SWIG_1(cast(void*)swigCPtr, btVector3.swigGetCPtr(rayFrom), btVector3.swigGetCPtr(rayTo), btBroadphaseRayCallback.swigGetCPtr(rayCallback), btVector3.swigGetCPtr(aabbMin));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback) {
    BTPhysics_im.btDbvtBroadphase_rayTest__SWIG_2(cast(void*)swigCPtr, btVector3.swigGetCPtr(rayFrom), btVector3.swigGetCPtr(rayTo), btBroadphaseRayCallback.swigGetCPtr(rayCallback));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void aabbTest(btVector3 aabbMin, btVector3 aabbMax, btBroadphaseAabbCallback callback) {
    BTPhysics_im.btDbvtBroadphase_aabbTest(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax), btBroadphaseAabbCallback.swigGetCPtr(callback));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getAabb(SWIGTYPE_p_btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btDbvtBroadphase_getAabb(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(proxy), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void calculateOverlappingPairs(btDispatcher dispatcher) {
    BTPhysics_im.btDbvtBroadphase_calculateOverlappingPairs(cast(void*)swigCPtr, btDispatcher.swigGetCPtr(dispatcher));
  }

  public override SWIGTYPE_p_btOverlappingPairCache getOverlappingPairCache() {
    void* cPtr = BTPhysics_im.btDbvtBroadphase_getOverlappingPairCache__SWIG_0(cast(void*)swigCPtr);
    SWIGTYPE_p_btOverlappingPairCache ret = (cPtr is null) ? null : new SWIGTYPE_p_btOverlappingPairCache(cPtr, false);
    return ret;
  }

  public override void getBroadphaseAabb(btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btDbvtBroadphase_getBroadphaseAabb(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void printStats() {
    BTPhysics_im.btDbvtBroadphase_printStats(cast(void*)swigCPtr);
  }

  public override void resetPool(btDispatcher dispatcher) {
    BTPhysics_im.btDbvtBroadphase_resetPool(cast(void*)swigCPtr, btDispatcher.swigGetCPtr(dispatcher));
  }

  public void performDeferredRemoval(btDispatcher dispatcher) {
    BTPhysics_im.btDbvtBroadphase_performDeferredRemoval(cast(void*)swigCPtr, btDispatcher.swigGetCPtr(dispatcher));
  }

  public void setVelocityPrediction(float prediction) {
    BTPhysics_im.btDbvtBroadphase_setVelocityPrediction(cast(void*)swigCPtr, prediction);
  }

  public float getVelocityPrediction() const {
    auto ret = BTPhysics_im.btDbvtBroadphase_getVelocityPrediction(cast(void*)swigCPtr);
    return ret;
  }

  public void setAabbForceUpdate(SWIGTYPE_p_btBroadphaseProxy absproxy, btVector3 aabbMin, btVector3 aabbMax, btDispatcher arg3) {
    BTPhysics_im.btDbvtBroadphase_setAabbForceUpdate(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(absproxy), btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax), btDispatcher.swigGetCPtr(arg3));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public static void benchmark(btBroadphaseInterface arg0) {
    BTPhysics_im.btDbvtBroadphase_benchmark(btBroadphaseInterface.swigGetCPtr(arg0));
  }
}

class btDiscreteDynamicsWorld {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btDiscreteDynamicsWorld obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btDiscreteDynamicsWorld(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(btDispatcher dispatcher, btBroadphaseInterface pairCache, btConstraintSolver constraintSolver, btCollisionConfiguration collisionConfiguration) {
    this(BTPhysics_im.new_btDiscreteDynamicsWorld(btDispatcher.swigGetCPtr(dispatcher), btBroadphaseInterface.swigGetCPtr(pairCache), btConstraintSolver.swigGetCPtr(constraintSolver), btCollisionConfiguration.swigGetCPtr(collisionConfiguration)), true);
  }

  public int stepSimulation(float timeStep, int maxSubSteps, float fixedTimeStep) {
    auto ret = BTPhysics_im.btDiscreteDynamicsWorld_stepSimulation__SWIG_0(cast(void*)swigCPtr, timeStep, maxSubSteps, fixedTimeStep);
    return ret;
  }

  public int stepSimulation(float timeStep, int maxSubSteps) {
    auto ret = BTPhysics_im.btDiscreteDynamicsWorld_stepSimulation__SWIG_1(cast(void*)swigCPtr, timeStep, maxSubSteps);
    return ret;
  }

  public int stepSimulation(float timeStep) {
    auto ret = BTPhysics_im.btDiscreteDynamicsWorld_stepSimulation__SWIG_2(cast(void*)swigCPtr, timeStep);
    return ret;
  }

  public void synchronizeMotionStates() {
    BTPhysics_im.btDiscreteDynamicsWorld_synchronizeMotionStates(cast(void*)swigCPtr);
  }

  public void synchronizeSingleMotionState(btRigidBody arg0) {
    BTPhysics_im.btDiscreteDynamicsWorld_synchronizeSingleMotionState(cast(void*)swigCPtr, btRigidBody.swigGetCPtr(arg0));
  }

  public void addConstraint(btTypedConstraint constraint, bool disableCollisionsBetweenLinkedBodies) {
    BTPhysics_im.btDiscreteDynamicsWorld_addConstraint__SWIG_0(cast(void*)swigCPtr, btTypedConstraint.swigGetCPtr(constraint), disableCollisionsBetweenLinkedBodies);
  }

  public void addConstraint(btTypedConstraint constraint) {
    BTPhysics_im.btDiscreteDynamicsWorld_addConstraint__SWIG_1(cast(void*)swigCPtr, btTypedConstraint.swigGetCPtr(constraint));
  }

  public void removeConstraint(btTypedConstraint constraint) {
    BTPhysics_im.btDiscreteDynamicsWorld_removeConstraint(cast(void*)swigCPtr, btTypedConstraint.swigGetCPtr(constraint));
  }

  public void addAction(SWIGTYPE_p_btActionInterface arg0) {
    BTPhysics_im.btDiscreteDynamicsWorld_addAction(cast(void*)swigCPtr, SWIGTYPE_p_btActionInterface.swigGetCPtr(arg0));
  }

  public void removeAction(SWIGTYPE_p_btActionInterface arg0) {
    BTPhysics_im.btDiscreteDynamicsWorld_removeAction(cast(void*)swigCPtr, SWIGTYPE_p_btActionInterface.swigGetCPtr(arg0));
  }

  public SWIGTYPE_p_btSimulationIslandManager getSimulationIslandManager() {
    void* cPtr = BTPhysics_im.btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_0(cast(void*)swigCPtr);
    SWIGTYPE_p_btSimulationIslandManager ret = (cPtr is null) ? null : new SWIGTYPE_p_btSimulationIslandManager(cPtr, false);
    return ret;
  }

  public btCollisionWorld getCollisionWorld() {
    void* cPtr = BTPhysics_im.btDiscreteDynamicsWorld_getCollisionWorld(cast(void*)swigCPtr);
    btCollisionWorld ret = (cPtr is null) ? null : new btCollisionWorld(cPtr, false);
    return ret;
  }

  public void setGravity(btVector3 gravity) {
    BTPhysics_im.btDiscreteDynamicsWorld_setGravity(cast(void*)swigCPtr, btVector3.swigGetCPtr(gravity));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getGravity() const {
    btVector3 ret = new btVector3(BTPhysics_im.btDiscreteDynamicsWorld_getGravity(cast(void*)swigCPtr), true);
    return ret;
  }

  public void addCollisionObject(btCollisionObject collisionObject, short collisionFilterGroup, short collisionFilterMask) {
    BTPhysics_im.btDiscreteDynamicsWorld_addCollisionObject__SWIG_0(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(collisionObject), collisionFilterGroup, collisionFilterMask);
  }

  public void addCollisionObject(btCollisionObject collisionObject, short collisionFilterGroup) {
    BTPhysics_im.btDiscreteDynamicsWorld_addCollisionObject__SWIG_1(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(collisionObject), collisionFilterGroup);
  }

  public void addCollisionObject(btCollisionObject collisionObject) {
    BTPhysics_im.btDiscreteDynamicsWorld_addCollisionObject__SWIG_2(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(collisionObject));
  }

  public void addRigidBody(btRigidBody arg0) {
    BTPhysics_im.btDiscreteDynamicsWorld_addRigidBody__SWIG_0(cast(void*)swigCPtr, btRigidBody.swigGetCPtr(arg0));
  }

  public void addRigidBody(btRigidBody arg0, short group, short mask) {
    BTPhysics_im.btDiscreteDynamicsWorld_addRigidBody__SWIG_1(cast(void*)swigCPtr, btRigidBody.swigGetCPtr(arg0), group, mask);
  }

  public void removeRigidBody(btRigidBody arg0) {
    BTPhysics_im.btDiscreteDynamicsWorld_removeRigidBody(cast(void*)swigCPtr, btRigidBody.swigGetCPtr(arg0));
  }

  public void removeCollisionObject(btCollisionObject collisionObject) {
    BTPhysics_im.btDiscreteDynamicsWorld_removeCollisionObject(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(collisionObject));
  }

  public void debugDrawConstraint(btTypedConstraint constraint) {
    BTPhysics_im.btDiscreteDynamicsWorld_debugDrawConstraint(cast(void*)swigCPtr, btTypedConstraint.swigGetCPtr(constraint));
  }

  public void debugDrawWorld() {
    BTPhysics_im.btDiscreteDynamicsWorld_debugDrawWorld(cast(void*)swigCPtr);
  }

  public void setConstraintSolver(btConstraintSolver solver) {
    BTPhysics_im.btDiscreteDynamicsWorld_setConstraintSolver(cast(void*)swigCPtr, btConstraintSolver.swigGetCPtr(solver));
  }

  public btConstraintSolver getConstraintSolver() {
    void* cPtr = BTPhysics_im.btDiscreteDynamicsWorld_getConstraintSolver(cast(void*)swigCPtr);
    btConstraintSolver ret = (cPtr is null) ? null : new btConstraintSolver(cPtr, false);
    return ret;
  }

  public int getNumConstraints() const {
    auto ret = BTPhysics_im.btDiscreteDynamicsWorld_getNumConstraints(cast(void*)swigCPtr);
    return ret;
  }

  public btTypedConstraint getConstraint(int index) {
    void* cPtr = BTPhysics_im.btDiscreteDynamicsWorld_getConstraint__SWIG_0(cast(void*)swigCPtr, index);
    btTypedConstraint ret = (cPtr is null) ? null : new btTypedConstraint(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btDynamicsWorldType getWorldType() const {
    SWIGTYPE_p_btDynamicsWorldType ret = new SWIGTYPE_p_btDynamicsWorldType(BTPhysics_im.btDiscreteDynamicsWorld_getWorldType(cast(void*)swigCPtr), true);
    return ret;
  }

  public void clearForces() {
    BTPhysics_im.btDiscreteDynamicsWorld_clearForces(cast(void*)swigCPtr);
  }

  public void applyGravity() {
    BTPhysics_im.btDiscreteDynamicsWorld_applyGravity(cast(void*)swigCPtr);
  }

  public void setNumTasks(int numTasks) {
    BTPhysics_im.btDiscreteDynamicsWorld_setNumTasks(cast(void*)swigCPtr, numTasks);
  }

  public void updateVehicles(float timeStep) {
    BTPhysics_im.btDiscreteDynamicsWorld_updateVehicles(cast(void*)swigCPtr, timeStep);
  }

  public void addVehicle(SWIGTYPE_p_btActionInterface vehicle) {
    BTPhysics_im.btDiscreteDynamicsWorld_addVehicle(cast(void*)swigCPtr, SWIGTYPE_p_btActionInterface.swigGetCPtr(vehicle));
  }

  public void removeVehicle(SWIGTYPE_p_btActionInterface vehicle) {
    BTPhysics_im.btDiscreteDynamicsWorld_removeVehicle(cast(void*)swigCPtr, SWIGTYPE_p_btActionInterface.swigGetCPtr(vehicle));
  }

  public void addCharacter(SWIGTYPE_p_btActionInterface character) {
    BTPhysics_im.btDiscreteDynamicsWorld_addCharacter(cast(void*)swigCPtr, SWIGTYPE_p_btActionInterface.swigGetCPtr(character));
  }

  public void removeCharacter(SWIGTYPE_p_btActionInterface character) {
    BTPhysics_im.btDiscreteDynamicsWorld_removeCharacter(cast(void*)swigCPtr, SWIGTYPE_p_btActionInterface.swigGetCPtr(character));
  }

  public void setSynchronizeAllMotionStates(bool synchronizeAll) {
    BTPhysics_im.btDiscreteDynamicsWorld_setSynchronizeAllMotionStates(cast(void*)swigCPtr, synchronizeAll);
  }

  public bool getSynchronizeAllMotionStates() const {
    bool ret = BTPhysics_im.btDiscreteDynamicsWorld_getSynchronizeAllMotionStates(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void serialize(btSerializer serializer) {
    BTPhysics_im.btDiscreteDynamicsWorld_serialize(cast(void*)swigCPtr, btSerializer.swigGetCPtr(serializer));
  }
}

class btSimpleDynamicsWorld {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btSimpleDynamicsWorld obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btSimpleDynamicsWorld(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(btDispatcher dispatcher, btBroadphaseInterface pairCache, btConstraintSolver constraintSolver, btCollisionConfiguration collisionConfiguration) {
    this(BTPhysics_im.new_btSimpleDynamicsWorld(btDispatcher.swigGetCPtr(dispatcher), btBroadphaseInterface.swigGetCPtr(pairCache), btConstraintSolver.swigGetCPtr(constraintSolver), btCollisionConfiguration.swigGetCPtr(collisionConfiguration)), true);
  }

  public int stepSimulation(float timeStep, int maxSubSteps, float fixedTimeStep) {
    auto ret = BTPhysics_im.btSimpleDynamicsWorld_stepSimulation__SWIG_0(cast(void*)swigCPtr, timeStep, maxSubSteps, fixedTimeStep);
    return ret;
  }

  public int stepSimulation(float timeStep, int maxSubSteps) {
    auto ret = BTPhysics_im.btSimpleDynamicsWorld_stepSimulation__SWIG_1(cast(void*)swigCPtr, timeStep, maxSubSteps);
    return ret;
  }

  public int stepSimulation(float timeStep) {
    auto ret = BTPhysics_im.btSimpleDynamicsWorld_stepSimulation__SWIG_2(cast(void*)swigCPtr, timeStep);
    return ret;
  }

  public void setGravity(btVector3 gravity) {
    BTPhysics_im.btSimpleDynamicsWorld_setGravity(cast(void*)swigCPtr, btVector3.swigGetCPtr(gravity));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getGravity() const {
    btVector3 ret = new btVector3(BTPhysics_im.btSimpleDynamicsWorld_getGravity(cast(void*)swigCPtr), true);
    return ret;
  }

  public void addRigidBody(btRigidBody arg0) {
    BTPhysics_im.btSimpleDynamicsWorld_addRigidBody__SWIG_0(cast(void*)swigCPtr, btRigidBody.swigGetCPtr(arg0));
  }

  public void addRigidBody(btRigidBody arg0, short group, short mask) {
    BTPhysics_im.btSimpleDynamicsWorld_addRigidBody__SWIG_1(cast(void*)swigCPtr, btRigidBody.swigGetCPtr(arg0), group, mask);
  }

  public void removeRigidBody(btRigidBody arg0) {
    BTPhysics_im.btSimpleDynamicsWorld_removeRigidBody(cast(void*)swigCPtr, btRigidBody.swigGetCPtr(arg0));
  }

  public void debugDrawWorld() {
    BTPhysics_im.btSimpleDynamicsWorld_debugDrawWorld(cast(void*)swigCPtr);
  }

  public void addAction(SWIGTYPE_p_btActionInterface action) {
    BTPhysics_im.btSimpleDynamicsWorld_addAction(cast(void*)swigCPtr, SWIGTYPE_p_btActionInterface.swigGetCPtr(action));
  }

  public void removeAction(SWIGTYPE_p_btActionInterface action) {
    BTPhysics_im.btSimpleDynamicsWorld_removeAction(cast(void*)swigCPtr, SWIGTYPE_p_btActionInterface.swigGetCPtr(action));
  }

  public void removeCollisionObject(btCollisionObject collisionObject) {
    BTPhysics_im.btSimpleDynamicsWorld_removeCollisionObject(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(collisionObject));
  }

  public void updateAabbs() {
    BTPhysics_im.btSimpleDynamicsWorld_updateAabbs(cast(void*)swigCPtr);
  }

  public void synchronizeMotionStates() {
    BTPhysics_im.btSimpleDynamicsWorld_synchronizeMotionStates(cast(void*)swigCPtr);
  }

  public void setConstraintSolver(btConstraintSolver solver) {
    BTPhysics_im.btSimpleDynamicsWorld_setConstraintSolver(cast(void*)swigCPtr, btConstraintSolver.swigGetCPtr(solver));
  }

  public btConstraintSolver getConstraintSolver() {
    void* cPtr = BTPhysics_im.btSimpleDynamicsWorld_getConstraintSolver(cast(void*)swigCPtr);
    btConstraintSolver ret = (cPtr is null) ? null : new btConstraintSolver(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_btDynamicsWorldType getWorldType() const {
    SWIGTYPE_p_btDynamicsWorldType ret = new SWIGTYPE_p_btDynamicsWorldType(BTPhysics_im.btSimpleDynamicsWorld_getWorldType(cast(void*)swigCPtr), true);
    return ret;
  }

  public void clearForces() {
    BTPhysics_im.btSimpleDynamicsWorld_clearForces(cast(void*)swigCPtr);
  }
}

void gDeactivationTime(float value) @property {
  BTPhysics_im.gDeactivationTime_set(value);
}

float gDeactivationTime() @property {
  auto ret = BTPhysics_im.gDeactivationTime_get();
  return ret;
}

void gDisableDeactivation(bool value) @property {
  BTPhysics_im.gDisableDeactivation_set(value);
}

bool gDisableDeactivation() @property {
  bool ret = BTPhysics_im.gDisableDeactivation_get() ? true : false;
  return ret;
}

string btRigidBodyDataName() @property {
  string ret = std.conv.to!string(BTPhysics_im.btRigidBodyDataName_get());
  return ret;
}

enum btRigidBodyFlags {
  BT_DISABLE_WORLD_GRAVITY = 1
}

class btRigidBody : btCollisionObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btRigidBody_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btRigidBody obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btRigidBody(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(SWIGTYPE_p_btRigidBody__btRigidBodyConstructionInfo constructionInfo) {
    this(BTPhysics_im.new_btRigidBody__SWIG_0(SWIGTYPE_p_btRigidBody__btRigidBodyConstructionInfo.swigGetCPtr(constructionInfo)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(float mass, btMotionState motionState, btCollisionShape collisionShape, btVector3 localInertia) {
    this(BTPhysics_im.new_btRigidBody__SWIG_1(mass, btMotionState.swigGetCPtr(motionState), btCollisionShape.swigGetCPtr(collisionShape), btVector3.swigGetCPtr(localInertia)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(float mass, btMotionState motionState, btCollisionShape collisionShape) {
    this(BTPhysics_im.new_btRigidBody__SWIG_2(mass, btMotionState.swigGetCPtr(motionState), btCollisionShape.swigGetCPtr(collisionShape)), true);
  }

  public void proceedToTransform(btTransform newTrans) {
    BTPhysics_im.btRigidBody_proceedToTransform(cast(void*)swigCPtr, btTransform.swigGetCPtr(newTrans));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public static btRigidBody upcast(btCollisionObject colObj) {
    void* cPtr = BTPhysics_im.btRigidBody_upcast__SWIG_0(btCollisionObject.swigGetCPtr(colObj));
    btRigidBody ret = (cPtr is null) ? null : new btRigidBody(cPtr, false);
    return ret;
  }

  public void predictIntegratedTransform(float step, btTransform predictedTransform) {
    BTPhysics_im.btRigidBody_predictIntegratedTransform(cast(void*)swigCPtr, step, btTransform.swigGetCPtr(predictedTransform));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void saveKinematicState(float step) {
    BTPhysics_im.btRigidBody_saveKinematicState(cast(void*)swigCPtr, step);
  }

  public void applyGravity() {
    BTPhysics_im.btRigidBody_applyGravity(cast(void*)swigCPtr);
  }

  public void setGravity(btVector3 acceleration) {
    BTPhysics_im.btRigidBody_setGravity(cast(void*)swigCPtr, btVector3.swigGetCPtr(acceleration));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getGravity() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getGravity(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setDamping(float lin_damping, float ang_damping) {
    BTPhysics_im.btRigidBody_setDamping(cast(void*)swigCPtr, lin_damping, ang_damping);
  }

  public float getLinearDamping() const {
    auto ret = BTPhysics_im.btRigidBody_getLinearDamping(cast(void*)swigCPtr);
    return ret;
  }

  public float getAngularDamping() const {
    auto ret = BTPhysics_im.btRigidBody_getAngularDamping(cast(void*)swigCPtr);
    return ret;
  }

  public float getLinearSleepingThreshold() const {
    auto ret = BTPhysics_im.btRigidBody_getLinearSleepingThreshold(cast(void*)swigCPtr);
    return ret;
  }

  public float getAngularSleepingThreshold() const {
    auto ret = BTPhysics_im.btRigidBody_getAngularSleepingThreshold(cast(void*)swigCPtr);
    return ret;
  }

  public void applyDamping(float timeStep) {
    BTPhysics_im.btRigidBody_applyDamping(cast(void*)swigCPtr, timeStep);
  }

  public btCollisionShape getCollisionShape() const {
    void* cPtr = BTPhysics_im.btRigidBody_getCollisionShape__SWIG_0(cast(void*)swigCPtr);
    btCollisionShape ret = (cPtr is null) ? null : new btCollisionShape(cPtr, false);
    return ret;
  }

  alias btCollisionObject.getCollisionShape getCollisionShape;

  public void setMassProps(float mass, btVector3 inertia) {
    BTPhysics_im.btRigidBody_setMassProps(cast(void*)swigCPtr, mass, btVector3.swigGetCPtr(inertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getLinearFactor() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getLinearFactor(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setLinearFactor(btVector3 linearFactor) {
    BTPhysics_im.btRigidBody_setLinearFactor(cast(void*)swigCPtr, btVector3.swigGetCPtr(linearFactor));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public float getInvMass() const {
    auto ret = BTPhysics_im.btRigidBody_getInvMass(cast(void*)swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_btMatrix3x3 getInvInertiaTensorWorld() const {
    SWIGTYPE_p_btMatrix3x3 ret = new SWIGTYPE_p_btMatrix3x3(BTPhysics_im.btRigidBody_getInvInertiaTensorWorld(cast(void*)swigCPtr), false);
    return ret;
  }

  public void integrateVelocities(float step) {
    BTPhysics_im.btRigidBody_integrateVelocities(cast(void*)swigCPtr, step);
  }

  public void setCenterOfMassTransform(btTransform xform) {
    BTPhysics_im.btRigidBody_setCenterOfMassTransform(cast(void*)swigCPtr, btTransform.swigGetCPtr(xform));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void applyCentralForce(btVector3 force) {
    BTPhysics_im.btRigidBody_applyCentralForce(cast(void*)swigCPtr, btVector3.swigGetCPtr(force));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getTotalForce() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getTotalForce(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getTotalTorque() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getTotalTorque(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getInvInertiaDiagLocal() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getInvInertiaDiagLocal(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setInvInertiaDiagLocal(btVector3 diagInvInertia) {
    BTPhysics_im.btRigidBody_setInvInertiaDiagLocal(cast(void*)swigCPtr, btVector3.swigGetCPtr(diagInvInertia));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setSleepingThresholds(float linear, float angular) {
    BTPhysics_im.btRigidBody_setSleepingThresholds(cast(void*)swigCPtr, linear, angular);
  }

  public void applyTorque(btVector3 torque) {
    BTPhysics_im.btRigidBody_applyTorque(cast(void*)swigCPtr, btVector3.swigGetCPtr(torque));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void applyForce(btVector3 force, btVector3 rel_pos) {
    BTPhysics_im.btRigidBody_applyForce(cast(void*)swigCPtr, btVector3.swigGetCPtr(force), btVector3.swigGetCPtr(rel_pos));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void applyCentralImpulse(btVector3 impulse) {
    BTPhysics_im.btRigidBody_applyCentralImpulse(cast(void*)swigCPtr, btVector3.swigGetCPtr(impulse));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void applyTorqueImpulse(btVector3 torque) {
    BTPhysics_im.btRigidBody_applyTorqueImpulse(cast(void*)swigCPtr, btVector3.swigGetCPtr(torque));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void applyImpulse(btVector3 impulse, btVector3 rel_pos) {
    BTPhysics_im.btRigidBody_applyImpulse(cast(void*)swigCPtr, btVector3.swigGetCPtr(impulse), btVector3.swigGetCPtr(rel_pos));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void clearForces() {
    BTPhysics_im.btRigidBody_clearForces(cast(void*)swigCPtr);
  }

  public void updateInertiaTensor() {
    BTPhysics_im.btRigidBody_updateInertiaTensor(cast(void*)swigCPtr);
  }

  public btVector3 getCenterOfMassPosition() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getCenterOfMassPosition(cast(void*)swigCPtr), false);
    return ret;
  }

  public btQuaternion getOrientation() const {
    btQuaternion ret = new btQuaternion(BTPhysics_im.btRigidBody_getOrientation(cast(void*)swigCPtr), true);
    return ret;
  }

  public btTransform getCenterOfMassTransform() const {
    btTransform ret = new btTransform(BTPhysics_im.btRigidBody_getCenterOfMassTransform(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getLinearVelocity() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getLinearVelocity(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getAngularVelocity() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getAngularVelocity(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setLinearVelocity(btVector3 lin_vel) {
    BTPhysics_im.btRigidBody_setLinearVelocity(cast(void*)swigCPtr, btVector3.swigGetCPtr(lin_vel));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setAngularVelocity(btVector3 ang_vel) {
    BTPhysics_im.btRigidBody_setAngularVelocity(cast(void*)swigCPtr, btVector3.swigGetCPtr(ang_vel));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getVelocityInLocalPoint(btVector3 rel_pos) const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getVelocityInLocalPoint(cast(void*)swigCPtr, btVector3.swigGetCPtr(rel_pos)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void translate(btVector3 v) {
    BTPhysics_im.btRigidBody_translate(cast(void*)swigCPtr, btVector3.swigGetCPtr(v));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getAabb(btVector3 aabbMin, btVector3 aabbMax) const {
    BTPhysics_im.btRigidBody_getAabb(cast(void*)swigCPtr, btVector3.swigGetCPtr(aabbMin), btVector3.swigGetCPtr(aabbMax));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public float computeImpulseDenominator(btVector3 pos, btVector3 normal) const {
    auto ret = BTPhysics_im.btRigidBody_computeImpulseDenominator(cast(void*)swigCPtr, btVector3.swigGetCPtr(pos), btVector3.swigGetCPtr(normal));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public float computeAngularImpulseDenominator(btVector3 axis) const {
    auto ret = BTPhysics_im.btRigidBody_computeAngularImpulseDenominator(cast(void*)swigCPtr, btVector3.swigGetCPtr(axis));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void updateDeactivation(float timeStep) {
    BTPhysics_im.btRigidBody_updateDeactivation(cast(void*)swigCPtr, timeStep);
  }

  public bool wantsSleeping() {
    bool ret = BTPhysics_im.btRigidBody_wantsSleeping(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public SWIGTYPE_p_btBroadphaseProxy getBroadphaseProxy() const {
    void* cPtr = BTPhysics_im.btRigidBody_getBroadphaseProxy__SWIG_0(cast(void*)swigCPtr);
    SWIGTYPE_p_btBroadphaseProxy ret = (cPtr is null) ? null : new SWIGTYPE_p_btBroadphaseProxy(cPtr, false);
    return ret;
  }

  public void setNewBroadphaseProxy(SWIGTYPE_p_btBroadphaseProxy broadphaseProxy) {
    BTPhysics_im.btRigidBody_setNewBroadphaseProxy(cast(void*)swigCPtr, SWIGTYPE_p_btBroadphaseProxy.swigGetCPtr(broadphaseProxy));
  }

  public btMotionState getMotionState() {
    void* cPtr = BTPhysics_im.btRigidBody_getMotionState__SWIG_0(cast(void*)swigCPtr);
    btMotionState ret = (cPtr is null) ? null : new btMotionState(cPtr, false);
    return ret;
  }

  public void setMotionState(btMotionState motionState) {
    BTPhysics_im.btRigidBody_setMotionState(cast(void*)swigCPtr, btMotionState.swigGetCPtr(motionState));
  }

  public void m_contactSolverType(int value) @property {
    BTPhysics_im.btRigidBody_m_contactSolverType_set(cast(void*)swigCPtr, value);
  }

  public int m_contactSolverType() @property const {
    auto ret = BTPhysics_im.btRigidBody_m_contactSolverType_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_frictionSolverType(int value) @property {
    BTPhysics_im.btRigidBody_m_frictionSolverType_set(cast(void*)swigCPtr, value);
  }

  public int m_frictionSolverType() @property const {
    auto ret = BTPhysics_im.btRigidBody_m_frictionSolverType_get(cast(void*)swigCPtr);
    return ret;
  }

  public void setAngularFactor(btVector3 angFac) {
    BTPhysics_im.btRigidBody_setAngularFactor__SWIG_0(cast(void*)swigCPtr, btVector3.swigGetCPtr(angFac));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setAngularFactor(float angFac) {
    BTPhysics_im.btRigidBody_setAngularFactor__SWIG_1(cast(void*)swigCPtr, angFac);
  }

  public btVector3 getAngularFactor() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getAngularFactor(cast(void*)swigCPtr), false);
    return ret;
  }

  public bool isInWorld() const {
    bool ret = BTPhysics_im.btRigidBody_isInWorld(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool checkCollideWithOverride(btCollisionObject co) {
    bool ret = BTPhysics_im.btRigidBody_checkCollideWithOverride(cast(void*)swigCPtr, btCollisionObject.swigGetCPtr(co)) ? true : false;
    return ret;
  }

  public void addConstraintRef(btTypedConstraint c) {
    BTPhysics_im.btRigidBody_addConstraintRef(cast(void*)swigCPtr, btTypedConstraint.swigGetCPtr(c));
  }

  public void removeConstraintRef(btTypedConstraint c) {
    BTPhysics_im.btRigidBody_removeConstraintRef(cast(void*)swigCPtr, btTypedConstraint.swigGetCPtr(c));
  }

  public btTypedConstraint getConstraintRef(int index) {
    void* cPtr = BTPhysics_im.btRigidBody_getConstraintRef(cast(void*)swigCPtr, index);
    btTypedConstraint ret = (cPtr is null) ? null : new btTypedConstraint(cPtr, false);
    return ret;
  }

  public int getNumConstraintRefs() const {
    auto ret = BTPhysics_im.btRigidBody_getNumConstraintRefs(cast(void*)swigCPtr);
    return ret;
  }

  public void setFlags(int flags) {
    BTPhysics_im.btRigidBody_setFlags(cast(void*)swigCPtr, flags);
  }

  public int getFlags() const {
    auto ret = BTPhysics_im.btRigidBody_getFlags(cast(void*)swigCPtr);
    return ret;
  }

  public btVector3 getDeltaLinearVelocity() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getDeltaLinearVelocity(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getDeltaAngularVelocity() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getDeltaAngularVelocity(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getPushVelocity() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getPushVelocity(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getTurnVelocity() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_getTurnVelocity(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 internalGetDeltaLinearVelocity() {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_internalGetDeltaLinearVelocity(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 internalGetDeltaAngularVelocity() {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_internalGetDeltaAngularVelocity(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 internalGetAngularFactor() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_internalGetAngularFactor(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 internalGetInvMass() const {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_internalGetInvMass(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 internalGetPushVelocity() {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_internalGetPushVelocity(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 internalGetTurnVelocity() {
    btVector3 ret = new btVector3(BTPhysics_im.btRigidBody_internalGetTurnVelocity(cast(void*)swigCPtr), false);
    return ret;
  }

  public void internalGetVelocityInLocalPointObsolete(btVector3 rel_pos, btVector3 velocity) const {
    BTPhysics_im.btRigidBody_internalGetVelocityInLocalPointObsolete(cast(void*)swigCPtr, btVector3.swigGetCPtr(rel_pos), btVector3.swigGetCPtr(velocity));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void internalGetAngularVelocity(btVector3 angVel) const {
    BTPhysics_im.btRigidBody_internalGetAngularVelocity(cast(void*)swigCPtr, btVector3.swigGetCPtr(angVel));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void internalApplyImpulse(btVector3 linearComponent, btVector3 angularComponent, float impulseMagnitude) {
    BTPhysics_im.btRigidBody_internalApplyImpulse(cast(void*)swigCPtr, btVector3.swigGetCPtr(linearComponent), btVector3.swigGetCPtr(angularComponent), impulseMagnitude);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void internalApplyPushImpulse(btVector3 linearComponent, btVector3 angularComponent, float impulseMagnitude) {
    BTPhysics_im.btRigidBody_internalApplyPushImpulse(cast(void*)swigCPtr, btVector3.swigGetCPtr(linearComponent), btVector3.swigGetCPtr(angularComponent), impulseMagnitude);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void internalWritebackVelocity() {
    BTPhysics_im.btRigidBody_internalWritebackVelocity__SWIG_0(cast(void*)swigCPtr);
  }

  public void internalWritebackVelocity(float timeStep) {
    BTPhysics_im.btRigidBody_internalWritebackVelocity__SWIG_1(cast(void*)swigCPtr, timeStep);
  }

  public override int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btRigidBody_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btRigidBody_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }

  public override void serializeSingleObject(btSerializer serializer) const {
    BTPhysics_im.btRigidBody_serializeSingleObject(cast(void*)swigCPtr, btSerializer.swigGetCPtr(serializer));
  }
}

class btRigidBodyFloatData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btRigidBodyFloatData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btRigidBodyFloatData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_collisionObjectData(btCollisionObjectFloatData value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_collisionObjectData_set(cast(void*)swigCPtr, btCollisionObjectFloatData.swigGetCPtr(value));
  }

  public btCollisionObjectFloatData m_collisionObjectData() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyFloatData_m_collisionObjectData_get(cast(void*)swigCPtr);
    btCollisionObjectFloatData ret = (cPtr is null) ? null : new btCollisionObjectFloatData(cPtr, false);
    return ret;
  }

  public void m_invInertiaTensorWorld(SWIGTYPE_p_btMatrix3x3FloatData value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_invInertiaTensorWorld_set(cast(void*)swigCPtr, SWIGTYPE_p_btMatrix3x3FloatData.swigGetCPtr(value));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_btMatrix3x3FloatData m_invInertiaTensorWorld() @property const {
    SWIGTYPE_p_btMatrix3x3FloatData ret = new SWIGTYPE_p_btMatrix3x3FloatData(BTPhysics_im.btRigidBodyFloatData_m_invInertiaTensorWorld_get(cast(void*)swigCPtr), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void m_linearVelocity(btVector3FloatData value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_linearVelocity_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_linearVelocity() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyFloatData_m_linearVelocity_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_angularVelocity(btVector3FloatData value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_angularVelocity_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_angularVelocity() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyFloatData_m_angularVelocity_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_angularFactor(btVector3FloatData value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_angularFactor_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_angularFactor() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyFloatData_m_angularFactor_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_linearFactor(btVector3FloatData value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_linearFactor_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_linearFactor() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyFloatData_m_linearFactor_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_gravity(btVector3FloatData value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_gravity_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_gravity() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyFloatData_m_gravity_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_gravity_acceleration(btVector3FloatData value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_gravity_acceleration_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_gravity_acceleration() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyFloatData_m_gravity_acceleration_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_invInertiaLocal(btVector3FloatData value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_invInertiaLocal_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_invInertiaLocal() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyFloatData_m_invInertiaLocal_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_totalForce(btVector3FloatData value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_totalForce_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_totalForce() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyFloatData_m_totalForce_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_totalTorque(btVector3FloatData value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_totalTorque_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_totalTorque() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyFloatData_m_totalTorque_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_inverseMass(float value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_inverseMass_set(cast(void*)swigCPtr, value);
  }

  public float m_inverseMass() @property const {
    auto ret = BTPhysics_im.btRigidBodyFloatData_m_inverseMass_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_linearDamping(float value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_linearDamping_set(cast(void*)swigCPtr, value);
  }

  public float m_linearDamping() @property const {
    auto ret = BTPhysics_im.btRigidBodyFloatData_m_linearDamping_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_angularDamping(float value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_angularDamping_set(cast(void*)swigCPtr, value);
  }

  public float m_angularDamping() @property const {
    auto ret = BTPhysics_im.btRigidBodyFloatData_m_angularDamping_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_additionalDampingFactor(float value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_additionalDampingFactor_set(cast(void*)swigCPtr, value);
  }

  public float m_additionalDampingFactor() @property const {
    auto ret = BTPhysics_im.btRigidBodyFloatData_m_additionalDampingFactor_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_additionalLinearDampingThresholdSqr(float value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set(cast(void*)swigCPtr, value);
  }

  public float m_additionalLinearDampingThresholdSqr() @property const {
    auto ret = BTPhysics_im.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_additionalAngularDampingThresholdSqr(float value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set(cast(void*)swigCPtr, value);
  }

  public float m_additionalAngularDampingThresholdSqr() @property const {
    auto ret = BTPhysics_im.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_additionalAngularDampingFactor(float value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_additionalAngularDampingFactor_set(cast(void*)swigCPtr, value);
  }

  public float m_additionalAngularDampingFactor() @property const {
    auto ret = BTPhysics_im.btRigidBodyFloatData_m_additionalAngularDampingFactor_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_linearSleepingThreshold(float value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_linearSleepingThreshold_set(cast(void*)swigCPtr, value);
  }

  public float m_linearSleepingThreshold() @property const {
    auto ret = BTPhysics_im.btRigidBodyFloatData_m_linearSleepingThreshold_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_angularSleepingThreshold(float value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_angularSleepingThreshold_set(cast(void*)swigCPtr, value);
  }

  public float m_angularSleepingThreshold() @property const {
    auto ret = BTPhysics_im.btRigidBodyFloatData_m_angularSleepingThreshold_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_additionalDamping(int value) @property {
    BTPhysics_im.btRigidBodyFloatData_m_additionalDamping_set(cast(void*)swigCPtr, value);
  }

  public int m_additionalDamping() @property const {
    auto ret = BTPhysics_im.btRigidBodyFloatData_m_additionalDamping_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btRigidBodyFloatData(), true);
  }
}

class btRigidBodyDoubleData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btRigidBodyDoubleData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btRigidBodyDoubleData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_collisionObjectData(btCollisionObjectDoubleData value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_collisionObjectData_set(cast(void*)swigCPtr, btCollisionObjectDoubleData.swigGetCPtr(value));
  }

  public btCollisionObjectDoubleData m_collisionObjectData() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyDoubleData_m_collisionObjectData_get(cast(void*)swigCPtr);
    btCollisionObjectDoubleData ret = (cPtr is null) ? null : new btCollisionObjectDoubleData(cPtr, false);
    return ret;
  }

  public void m_invInertiaTensorWorld(SWIGTYPE_p_btMatrix3x3DoubleData value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_invInertiaTensorWorld_set(cast(void*)swigCPtr, SWIGTYPE_p_btMatrix3x3DoubleData.swigGetCPtr(value));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_btMatrix3x3DoubleData m_invInertiaTensorWorld() @property const {
    SWIGTYPE_p_btMatrix3x3DoubleData ret = new SWIGTYPE_p_btMatrix3x3DoubleData(BTPhysics_im.btRigidBodyDoubleData_m_invInertiaTensorWorld_get(cast(void*)swigCPtr), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void m_linearVelocity(btVector3DoubleData value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_linearVelocity_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_linearVelocity() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyDoubleData_m_linearVelocity_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_angularVelocity(btVector3DoubleData value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_angularVelocity_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_angularVelocity() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyDoubleData_m_angularVelocity_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_angularFactor(btVector3DoubleData value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_angularFactor_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_angularFactor() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyDoubleData_m_angularFactor_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_linearFactor(btVector3DoubleData value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_linearFactor_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_linearFactor() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyDoubleData_m_linearFactor_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_gravity(btVector3DoubleData value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_gravity_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_gravity() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyDoubleData_m_gravity_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_gravity_acceleration(btVector3DoubleData value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_gravity_acceleration_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_gravity_acceleration() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyDoubleData_m_gravity_acceleration_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_invInertiaLocal(btVector3DoubleData value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_invInertiaLocal_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_invInertiaLocal() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyDoubleData_m_invInertiaLocal_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_totalForce(btVector3DoubleData value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_totalForce_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_totalForce() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyDoubleData_m_totalForce_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_totalTorque(btVector3DoubleData value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_totalTorque_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_totalTorque() @property const {
    void* cPtr = BTPhysics_im.btRigidBodyDoubleData_m_totalTorque_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_inverseMass(double value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_inverseMass_set(cast(void*)swigCPtr, value);
  }

  public double m_inverseMass() @property const {
    auto ret = BTPhysics_im.btRigidBodyDoubleData_m_inverseMass_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_linearDamping(double value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_linearDamping_set(cast(void*)swigCPtr, value);
  }

  public double m_linearDamping() @property const {
    auto ret = BTPhysics_im.btRigidBodyDoubleData_m_linearDamping_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_angularDamping(double value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_angularDamping_set(cast(void*)swigCPtr, value);
  }

  public double m_angularDamping() @property const {
    auto ret = BTPhysics_im.btRigidBodyDoubleData_m_angularDamping_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_additionalDampingFactor(double value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_additionalDampingFactor_set(cast(void*)swigCPtr, value);
  }

  public double m_additionalDampingFactor() @property const {
    auto ret = BTPhysics_im.btRigidBodyDoubleData_m_additionalDampingFactor_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_additionalLinearDampingThresholdSqr(double value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set(cast(void*)swigCPtr, value);
  }

  public double m_additionalLinearDampingThresholdSqr() @property const {
    auto ret = BTPhysics_im.btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_additionalAngularDampingThresholdSqr(double value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set(cast(void*)swigCPtr, value);
  }

  public double m_additionalAngularDampingThresholdSqr() @property const {
    auto ret = BTPhysics_im.btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_additionalAngularDampingFactor(double value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_additionalAngularDampingFactor_set(cast(void*)swigCPtr, value);
  }

  public double m_additionalAngularDampingFactor() @property const {
    auto ret = BTPhysics_im.btRigidBodyDoubleData_m_additionalAngularDampingFactor_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_linearSleepingThreshold(double value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_linearSleepingThreshold_set(cast(void*)swigCPtr, value);
  }

  public double m_linearSleepingThreshold() @property const {
    auto ret = BTPhysics_im.btRigidBodyDoubleData_m_linearSleepingThreshold_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_angularSleepingThreshold(double value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_angularSleepingThreshold_set(cast(void*)swigCPtr, value);
  }

  public double m_angularSleepingThreshold() @property const {
    auto ret = BTPhysics_im.btRigidBodyDoubleData_m_angularSleepingThreshold_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_additionalDamping(int value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_additionalDamping_set(cast(void*)swigCPtr, value);
  }

  public int m_additionalDamping() @property const {
    auto ret = BTPhysics_im.btRigidBodyDoubleData_m_additionalDamping_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_padding(string value) @property {
    BTPhysics_im.btRigidBodyDoubleData_m_padding_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_padding() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btRigidBodyDoubleData_m_padding_get(cast(void*)swigCPtr));
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btRigidBodyDoubleData(), true);
  }
}

class btConstraintSolver {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btConstraintSolver obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConstraintSolver(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void prepareSolve(int arg0, int arg1) {
    BTPhysics_im.btConstraintSolver_prepareSolve(cast(void*)swigCPtr, arg0, arg1);
  }

  public float solveGroup(SWIGTYPE_p_p_btCollisionObject bodies, int numBodies, SWIGTYPE_p_p_btPersistentManifold manifold, int numManifolds, SWIGTYPE_p_p_btTypedConstraint constraints, int numConstraints, SWIGTYPE_p_btContactSolverInfo info, btIDebugDraw debugDrawer, SWIGTYPE_p_btStackAlloc stackAlloc, btDispatcher dispatcher) {
    auto ret = BTPhysics_im.btConstraintSolver_solveGroup(cast(void*)swigCPtr, SWIGTYPE_p_p_btCollisionObject.swigGetCPtr(bodies), numBodies, SWIGTYPE_p_p_btPersistentManifold.swigGetCPtr(manifold), numManifolds, SWIGTYPE_p_p_btTypedConstraint.swigGetCPtr(constraints), numConstraints, SWIGTYPE_p_btContactSolverInfo.swigGetCPtr(info), btIDebugDraw.swigGetCPtr(debugDrawer), SWIGTYPE_p_btStackAlloc.swigGetCPtr(stackAlloc), btDispatcher.swigGetCPtr(dispatcher));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void allSolved(SWIGTYPE_p_btContactSolverInfo arg0, btIDebugDraw arg1, SWIGTYPE_p_btStackAlloc arg2) {
    BTPhysics_im.btConstraintSolver_allSolved(cast(void*)swigCPtr, SWIGTYPE_p_btContactSolverInfo.swigGetCPtr(arg0), btIDebugDraw.swigGetCPtr(arg1), SWIGTYPE_p_btStackAlloc.swigGetCPtr(arg2));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void reset() {
    BTPhysics_im.btConstraintSolver_reset(cast(void*)swigCPtr);
  }
}

enum btTypedConstraintType {
  POINT2POINT_CONSTRAINT_TYPE = 3,
  HINGE_CONSTRAINT_TYPE,
  CONETWIST_CONSTRAINT_TYPE,
  D6_CONSTRAINT_TYPE,
  SLIDER_CONSTRAINT_TYPE,
  CONTACT_CONSTRAINT_TYPE,
  D6_SPRING_CONSTRAINT_TYPE,
  MAX_CONSTRAINT_TYPE
}

enum btConstraintParams {
  BT_CONSTRAINT_ERP = 1,
  BT_CONSTRAINT_STOP_ERP,
  BT_CONSTRAINT_CFM,
  BT_CONSTRAINT_STOP_CFM
}

class btTypedConstraint : btTypedObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btTypedConstraint_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btTypedConstraint obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btTypedConstraint(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void buildJacobian() {
    BTPhysics_im.btTypedConstraint_buildJacobian(cast(void*)swigCPtr);
  }

  public void setupSolverConstraint(SWIGTYPE_p_btConstraintArray ca, int solverBodyA, int solverBodyB, float timeStep) {
    BTPhysics_im.btTypedConstraint_setupSolverConstraint(cast(void*)swigCPtr, SWIGTYPE_p_btConstraintArray.swigGetCPtr(ca), solverBodyA, solverBodyB, timeStep);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getInfo1(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 info) {
    BTPhysics_im.btTypedConstraint_getInfo1(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.swigGetCPtr(info));
  }

  public void getInfo2(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info) {
    BTPhysics_im.btTypedConstraint_getInfo2(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info));
  }

  public void internalSetAppliedImpulse(float appliedImpulse) {
    BTPhysics_im.btTypedConstraint_internalSetAppliedImpulse(cast(void*)swigCPtr, appliedImpulse);
  }

  public float internalGetAppliedImpulse() {
    auto ret = BTPhysics_im.btTypedConstraint_internalGetAppliedImpulse(cast(void*)swigCPtr);
    return ret;
  }

  public float getBreakingImpulseThreshold() const {
    auto ret = BTPhysics_im.btTypedConstraint_getBreakingImpulseThreshold(cast(void*)swigCPtr);
    return ret;
  }

  public void setBreakingImpulseThreshold(float threshold) {
    BTPhysics_im.btTypedConstraint_setBreakingImpulseThreshold(cast(void*)swigCPtr, threshold);
  }

  public bool isEnabled() const {
    bool ret = BTPhysics_im.btTypedConstraint_isEnabled(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setEnabled(bool enabled) {
    BTPhysics_im.btTypedConstraint_setEnabled(cast(void*)swigCPtr, enabled);
  }

  public void solveConstraintObsolete(btRigidBody arg0, btRigidBody arg1, float arg2) {
    BTPhysics_im.btTypedConstraint_solveConstraintObsolete(cast(void*)swigCPtr, btRigidBody.swigGetCPtr(arg0), btRigidBody.swigGetCPtr(arg1), arg2);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btRigidBody getRigidBodyA() const {
    btRigidBody ret = new btRigidBody(BTPhysics_im.btTypedConstraint_getRigidBodyA__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public btRigidBody getRigidBodyB() const {
    btRigidBody ret = new btRigidBody(BTPhysics_im.btTypedConstraint_getRigidBodyB__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public int getUserConstraintType() const {
    auto ret = BTPhysics_im.btTypedConstraint_getUserConstraintType(cast(void*)swigCPtr);
    return ret;
  }

  public void setUserConstraintType(int userConstraintType) {
    BTPhysics_im.btTypedConstraint_setUserConstraintType(cast(void*)swigCPtr, userConstraintType);
  }

  public void setUserConstraintId(int uid) {
    BTPhysics_im.btTypedConstraint_setUserConstraintId(cast(void*)swigCPtr, uid);
  }

  public int getUserConstraintId() const {
    auto ret = BTPhysics_im.btTypedConstraint_getUserConstraintId(cast(void*)swigCPtr);
    return ret;
  }

  public void setUserConstraintPtr(void* ptr) {
    BTPhysics_im.btTypedConstraint_setUserConstraintPtr(cast(void*)swigCPtr, cast(void*)ptr);
  }

  public void* getUserConstraintPtr() {
    auto ret = cast(void*)BTPhysics_im.btTypedConstraint_getUserConstraintPtr(cast(void*)swigCPtr);
    return ret;
  }

  public int getUid() const {
    auto ret = BTPhysics_im.btTypedConstraint_getUid(cast(void*)swigCPtr);
    return ret;
  }

  public bool needsFeedback() const {
    bool ret = BTPhysics_im.btTypedConstraint_needsFeedback(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void enableFeedback(bool needsFeedback) {
    BTPhysics_im.btTypedConstraint_enableFeedback(cast(void*)swigCPtr, needsFeedback);
  }

  public float getAppliedImpulse() const {
    auto ret = BTPhysics_im.btTypedConstraint_getAppliedImpulse(cast(void*)swigCPtr);
    return ret;
  }

  public btTypedConstraintType getConstraintType() const {
    btTypedConstraintType ret = cast(btTypedConstraintType)BTPhysics_im.btTypedConstraint_getConstraintType(cast(void*)swigCPtr);
    return ret;
  }

  public void setDbgDrawSize(float dbgDrawSize) {
    BTPhysics_im.btTypedConstraint_setDbgDrawSize(cast(void*)swigCPtr, dbgDrawSize);
  }

  public float getDbgDrawSize() {
    auto ret = BTPhysics_im.btTypedConstraint_getDbgDrawSize(cast(void*)swigCPtr);
    return ret;
  }

  public void setParam(int num, float value, int axis) {
    BTPhysics_im.btTypedConstraint_setParam__SWIG_0(cast(void*)swigCPtr, num, value, axis);
  }

  public void setParam(int num, float value) {
    BTPhysics_im.btTypedConstraint_setParam__SWIG_1(cast(void*)swigCPtr, num, value);
  }

  public float getParam(int num, int axis) const {
    auto ret = BTPhysics_im.btTypedConstraint_getParam__SWIG_0(cast(void*)swigCPtr, num, axis);
    return ret;
  }

  public float getParam(int num) const {
    auto ret = BTPhysics_im.btTypedConstraint_getParam__SWIG_1(cast(void*)swigCPtr, num);
    return ret;
  }

  public int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btTypedConstraint_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btTypedConstraint_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

float btAdjustAngleToLimits(float angleInRadians, float angleLowerLimitInRadians, float angleUpperLimitInRadians) {
  auto ret = BTPhysics_im.btAdjustAngleToLimits(angleInRadians, angleLowerLimitInRadians, angleUpperLimitInRadians);
  return ret;
}

class btTypedConstraintData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btTypedConstraintData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btTypedConstraintData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_rbA(btRigidBodyFloatData value) @property {
    BTPhysics_im.btTypedConstraintData_m_rbA_set(cast(void*)swigCPtr, btRigidBodyFloatData.swigGetCPtr(value));
  }

  public btRigidBodyFloatData m_rbA() @property const {
    void* cPtr = BTPhysics_im.btTypedConstraintData_m_rbA_get(cast(void*)swigCPtr);
    btRigidBodyFloatData ret = (cPtr is null) ? null : new btRigidBodyFloatData(cPtr, false);
    return ret;
  }

  public void m_rbB(btRigidBodyFloatData value) @property {
    BTPhysics_im.btTypedConstraintData_m_rbB_set(cast(void*)swigCPtr, btRigidBodyFloatData.swigGetCPtr(value));
  }

  public btRigidBodyFloatData m_rbB() @property const {
    void* cPtr = BTPhysics_im.btTypedConstraintData_m_rbB_get(cast(void*)swigCPtr);
    btRigidBodyFloatData ret = (cPtr is null) ? null : new btRigidBodyFloatData(cPtr, false);
    return ret;
  }

  public void m_name(string value) @property {
    BTPhysics_im.btTypedConstraintData_m_name_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_name() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btTypedConstraintData_m_name_get(cast(void*)swigCPtr));
    return ret;
  }

  public void m_objectType(int value) @property {
    BTPhysics_im.btTypedConstraintData_m_objectType_set(cast(void*)swigCPtr, value);
  }

  public int m_objectType() @property const {
    auto ret = BTPhysics_im.btTypedConstraintData_m_objectType_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_userConstraintType(int value) @property {
    BTPhysics_im.btTypedConstraintData_m_userConstraintType_set(cast(void*)swigCPtr, value);
  }

  public int m_userConstraintType() @property const {
    auto ret = BTPhysics_im.btTypedConstraintData_m_userConstraintType_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_userConstraintId(int value) @property {
    BTPhysics_im.btTypedConstraintData_m_userConstraintId_set(cast(void*)swigCPtr, value);
  }

  public int m_userConstraintId() @property const {
    auto ret = BTPhysics_im.btTypedConstraintData_m_userConstraintId_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_needsFeedback(int value) @property {
    BTPhysics_im.btTypedConstraintData_m_needsFeedback_set(cast(void*)swigCPtr, value);
  }

  public int m_needsFeedback() @property const {
    auto ret = BTPhysics_im.btTypedConstraintData_m_needsFeedback_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_appliedImpulse(float value) @property {
    BTPhysics_im.btTypedConstraintData_m_appliedImpulse_set(cast(void*)swigCPtr, value);
  }

  public float m_appliedImpulse() @property const {
    auto ret = BTPhysics_im.btTypedConstraintData_m_appliedImpulse_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_dbgDrawSize(float value) @property {
    BTPhysics_im.btTypedConstraintData_m_dbgDrawSize_set(cast(void*)swigCPtr, value);
  }

  public float m_dbgDrawSize() @property const {
    auto ret = BTPhysics_im.btTypedConstraintData_m_dbgDrawSize_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_disableCollisionsBetweenLinkedBodies(int value) @property {
    BTPhysics_im.btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_set(cast(void*)swigCPtr, value);
  }

  public int m_disableCollisionsBetweenLinkedBodies() @property const {
    auto ret = BTPhysics_im.btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_pad4(string value) @property {
    BTPhysics_im.btTypedConstraintData_m_pad4_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_pad4() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btTypedConstraintData_m_pad4_get(cast(void*)swigCPtr));
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btTypedConstraintData(), true);
  }
}

class btAngularLimit {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btAngularLimit obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btAngularLimit(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(BTPhysics_im.new_btAngularLimit(), true);
  }

  public void set(float low, float high, float _softness, float _biasFactor, float _relaxationFactor) {
    BTPhysics_im.btAngularLimit_set__SWIG_0(cast(void*)swigCPtr, low, high, _softness, _biasFactor, _relaxationFactor);
  }

  public void set(float low, float high, float _softness, float _biasFactor) {
    BTPhysics_im.btAngularLimit_set__SWIG_1(cast(void*)swigCPtr, low, high, _softness, _biasFactor);
  }

  public void set(float low, float high, float _softness) {
    BTPhysics_im.btAngularLimit_set__SWIG_2(cast(void*)swigCPtr, low, high, _softness);
  }

  public void set(float low, float high) {
    BTPhysics_im.btAngularLimit_set__SWIG_3(cast(void*)swigCPtr, low, high);
  }

  public void test(float angle) {
    BTPhysics_im.btAngularLimit_test(cast(void*)swigCPtr, angle);
  }

  public float getSoftness() const {
    auto ret = BTPhysics_im.btAngularLimit_getSoftness(cast(void*)swigCPtr);
    return ret;
  }

  public float getBiasFactor() const {
    auto ret = BTPhysics_im.btAngularLimit_getBiasFactor(cast(void*)swigCPtr);
    return ret;
  }

  public float getRelaxationFactor() const {
    auto ret = BTPhysics_im.btAngularLimit_getRelaxationFactor(cast(void*)swigCPtr);
    return ret;
  }

  public float getCorrection() const {
    auto ret = BTPhysics_im.btAngularLimit_getCorrection(cast(void*)swigCPtr);
    return ret;
  }

  public float getSign() const {
    auto ret = BTPhysics_im.btAngularLimit_getSign(cast(void*)swigCPtr);
    return ret;
  }

  public float getHalfRange() const {
    auto ret = BTPhysics_im.btAngularLimit_getHalfRange(cast(void*)swigCPtr);
    return ret;
  }

  public bool isLimit() const {
    bool ret = BTPhysics_im.btAngularLimit_isLimit(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void fit(float* angle) const {
    BTPhysics_im.btAngularLimit_fit(cast(void*)swigCPtr, cast(void*)angle);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public float getError() const {
    auto ret = BTPhysics_im.btAngularLimit_getError(cast(void*)swigCPtr);
    return ret;
  }

  public float getLow() const {
    auto ret = BTPhysics_im.btAngularLimit_getLow(cast(void*)swigCPtr);
    return ret;
  }

  public float getHigh() const {
    auto ret = BTPhysics_im.btAngularLimit_getHigh(cast(void*)swigCPtr);
    return ret;
  }
}

string btPoint2PointConstraintDataName() @property {
  string ret = std.conv.to!string(BTPhysics_im.btPoint2PointConstraintDataName_get());
  return ret;
}

class btConstraintSetting {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btConstraintSetting obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConstraintSetting(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(BTPhysics_im.new_btConstraintSetting(), true);
  }

  public void m_tau(float value) @property {
    BTPhysics_im.btConstraintSetting_m_tau_set(cast(void*)swigCPtr, value);
  }

  public float m_tau() @property const {
    auto ret = BTPhysics_im.btConstraintSetting_m_tau_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_damping(float value) @property {
    BTPhysics_im.btConstraintSetting_m_damping_set(cast(void*)swigCPtr, value);
  }

  public float m_damping() @property const {
    auto ret = BTPhysics_im.btConstraintSetting_m_damping_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_impulseClamp(float value) @property {
    BTPhysics_im.btConstraintSetting_m_impulseClamp_set(cast(void*)swigCPtr, value);
  }

  public float m_impulseClamp() @property const {
    auto ret = BTPhysics_im.btConstraintSetting_m_impulseClamp_get(cast(void*)swigCPtr);
    return ret;
  }
}

enum btPoint2PointFlags {
  BT_P2P_FLAGS_ERP = 1,
  BT_P2P_FLAGS_CFM = 2
}

class btPoint2PointConstraint : btTypedConstraint {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btPoint2PointConstraint_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btPoint2PointConstraint obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btPoint2PointConstraint(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void m_useSolveConstraintObsolete(bool value) @property {
    BTPhysics_im.btPoint2PointConstraint_m_useSolveConstraintObsolete_set(cast(void*)swigCPtr, value);
  }

  public bool m_useSolveConstraintObsolete() @property const {
    bool ret = BTPhysics_im.btPoint2PointConstraint_m_useSolveConstraintObsolete_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void m_setting(btConstraintSetting value) @property {
    BTPhysics_im.btPoint2PointConstraint_m_setting_set(cast(void*)swigCPtr, btConstraintSetting.swigGetCPtr(value));
  }

  public btConstraintSetting m_setting() @property const {
    void* cPtr = BTPhysics_im.btPoint2PointConstraint_m_setting_get(cast(void*)swigCPtr);
    btConstraintSetting ret = (cPtr is null) ? null : new btConstraintSetting(cPtr, false);
    return ret;
  }

  public this(btRigidBody rbA, btRigidBody rbB, btVector3 pivotInA, btVector3 pivotInB) {
    this(BTPhysics_im.new_btPoint2PointConstraint__SWIG_0(btRigidBody.swigGetCPtr(rbA), btRigidBody.swigGetCPtr(rbB), btVector3.swigGetCPtr(pivotInA), btVector3.swigGetCPtr(pivotInB)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btRigidBody rbA, btVector3 pivotInA) {
    this(BTPhysics_im.new_btPoint2PointConstraint__SWIG_1(btRigidBody.swigGetCPtr(rbA), btVector3.swigGetCPtr(pivotInA)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void buildJacobian() {
    BTPhysics_im.btPoint2PointConstraint_buildJacobian(cast(void*)swigCPtr);
  }

  public override void getInfo1(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 info) {
    BTPhysics_im.btPoint2PointConstraint_getInfo1(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.swigGetCPtr(info));
  }

  public void getInfo1NonVirtual(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 info) {
    BTPhysics_im.btPoint2PointConstraint_getInfo1NonVirtual(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.swigGetCPtr(info));
  }

  public override void getInfo2(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info) {
    BTPhysics_im.btPoint2PointConstraint_getInfo2(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info));
  }

  public void getInfo2NonVirtual(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info, btTransform body0_trans, btTransform body1_trans) {
    BTPhysics_im.btPoint2PointConstraint_getInfo2NonVirtual(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info), btTransform.swigGetCPtr(body0_trans), btTransform.swigGetCPtr(body1_trans));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void updateRHS(float timeStep) {
    BTPhysics_im.btPoint2PointConstraint_updateRHS(cast(void*)swigCPtr, timeStep);
  }

  public void setPivotA(btVector3 pivotA) {
    BTPhysics_im.btPoint2PointConstraint_setPivotA(cast(void*)swigCPtr, btVector3.swigGetCPtr(pivotA));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setPivotB(btVector3 pivotB) {
    BTPhysics_im.btPoint2PointConstraint_setPivotB(cast(void*)swigCPtr, btVector3.swigGetCPtr(pivotB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getPivotInA() const {
    btVector3 ret = new btVector3(BTPhysics_im.btPoint2PointConstraint_getPivotInA(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getPivotInB() const {
    btVector3 ret = new btVector3(BTPhysics_im.btPoint2PointConstraint_getPivotInB(cast(void*)swigCPtr), false);
    return ret;
  }

  public override void setParam(int num, float value, int axis) {
    BTPhysics_im.btPoint2PointConstraint_setParam__SWIG_0(cast(void*)swigCPtr, num, value, axis);
  }

  public override void setParam(int num, float value) {
    BTPhysics_im.btPoint2PointConstraint_setParam__SWIG_1(cast(void*)swigCPtr, num, value);
  }

  public override float getParam(int num, int axis) const {
    auto ret = BTPhysics_im.btPoint2PointConstraint_getParam__SWIG_0(cast(void*)swigCPtr, num, axis);
    return ret;
  }

  public override float getParam(int num) const {
    auto ret = BTPhysics_im.btPoint2PointConstraint_getParam__SWIG_1(cast(void*)swigCPtr, num);
    return ret;
  }

  public override int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btPoint2PointConstraint_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btPoint2PointConstraint_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btPoint2PointConstraintFloatData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btPoint2PointConstraintFloatData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btPoint2PointConstraintFloatData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_typeConstraintData(btTypedConstraintData value) @property {
    BTPhysics_im.btPoint2PointConstraintFloatData_m_typeConstraintData_set(cast(void*)swigCPtr, btTypedConstraintData.swigGetCPtr(value));
  }

  public btTypedConstraintData m_typeConstraintData() @property const {
    void* cPtr = BTPhysics_im.btPoint2PointConstraintFloatData_m_typeConstraintData_get(cast(void*)swigCPtr);
    btTypedConstraintData ret = (cPtr is null) ? null : new btTypedConstraintData(cPtr, false);
    return ret;
  }

  public void m_pivotInA(btVector3FloatData value) @property {
    BTPhysics_im.btPoint2PointConstraintFloatData_m_pivotInA_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_pivotInA() @property const {
    void* cPtr = BTPhysics_im.btPoint2PointConstraintFloatData_m_pivotInA_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_pivotInB(btVector3FloatData value) @property {
    BTPhysics_im.btPoint2PointConstraintFloatData_m_pivotInB_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_pivotInB() @property const {
    void* cPtr = BTPhysics_im.btPoint2PointConstraintFloatData_m_pivotInB_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btPoint2PointConstraintFloatData(), true);
  }
}

class btPoint2PointConstraintDoubleData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btPoint2PointConstraintDoubleData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btPoint2PointConstraintDoubleData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_typeConstraintData(btTypedConstraintData value) @property {
    BTPhysics_im.btPoint2PointConstraintDoubleData_m_typeConstraintData_set(cast(void*)swigCPtr, btTypedConstraintData.swigGetCPtr(value));
  }

  public btTypedConstraintData m_typeConstraintData() @property const {
    void* cPtr = BTPhysics_im.btPoint2PointConstraintDoubleData_m_typeConstraintData_get(cast(void*)swigCPtr);
    btTypedConstraintData ret = (cPtr is null) ? null : new btTypedConstraintData(cPtr, false);
    return ret;
  }

  public void m_pivotInA(btVector3DoubleData value) @property {
    BTPhysics_im.btPoint2PointConstraintDoubleData_m_pivotInA_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_pivotInA() @property const {
    void* cPtr = BTPhysics_im.btPoint2PointConstraintDoubleData_m_pivotInA_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public void m_pivotInB(btVector3DoubleData value) @property {
    BTPhysics_im.btPoint2PointConstraintDoubleData_m_pivotInB_set(cast(void*)swigCPtr, btVector3DoubleData.swigGetCPtr(value));
  }

  public btVector3DoubleData m_pivotInB() @property const {
    void* cPtr = BTPhysics_im.btPoint2PointConstraintDoubleData_m_pivotInB_get(cast(void*)swigCPtr);
    btVector3DoubleData ret = (cPtr is null) ? null : new btVector3DoubleData(cPtr, false);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btPoint2PointConstraintDoubleData(), true);
  }
}

int _BT_USE_CENTER_LIMIT_() @property {
  auto ret = BTPhysics_im._BT_USE_CENTER_LIMIT__get();
  return ret;
}

string btHingeConstraintDataName() @property {
  string ret = std.conv.to!string(BTPhysics_im.btHingeConstraintDataName_get());
  return ret;
}

enum btHingeFlags {
  BT_HINGE_FLAGS_CFM_STOP = 1,
  BT_HINGE_FLAGS_ERP_STOP = 2,
  BT_HINGE_FLAGS_CFM_NORM = 4
}

class btHingeConstraint : btTypedConstraint {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btHingeConstraint_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btHingeConstraint obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btHingeConstraint(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(btRigidBody rbA, btRigidBody rbB, btVector3 pivotInA, btVector3 pivotInB, btVector3 axisInA, btVector3 axisInB, bool useReferenceFrameA) {
    this(BTPhysics_im.new_btHingeConstraint__SWIG_0(btRigidBody.swigGetCPtr(rbA), btRigidBody.swigGetCPtr(rbB), btVector3.swigGetCPtr(pivotInA), btVector3.swigGetCPtr(pivotInB), btVector3.swigGetCPtr(axisInA), btVector3.swigGetCPtr(axisInB), useReferenceFrameA), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btRigidBody rbA, btRigidBody rbB, btVector3 pivotInA, btVector3 pivotInB, btVector3 axisInA, btVector3 axisInB) {
    this(BTPhysics_im.new_btHingeConstraint__SWIG_1(btRigidBody.swigGetCPtr(rbA), btRigidBody.swigGetCPtr(rbB), btVector3.swigGetCPtr(pivotInA), btVector3.swigGetCPtr(pivotInB), btVector3.swigGetCPtr(axisInA), btVector3.swigGetCPtr(axisInB)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btRigidBody rbA, btVector3 pivotInA, btVector3 axisInA, bool useReferenceFrameA) {
    this(BTPhysics_im.new_btHingeConstraint__SWIG_2(btRigidBody.swigGetCPtr(rbA), btVector3.swigGetCPtr(pivotInA), btVector3.swigGetCPtr(axisInA), useReferenceFrameA), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btRigidBody rbA, btVector3 pivotInA, btVector3 axisInA) {
    this(BTPhysics_im.new_btHingeConstraint__SWIG_3(btRigidBody.swigGetCPtr(rbA), btVector3.swigGetCPtr(pivotInA), btVector3.swigGetCPtr(axisInA)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btRigidBody rbA, btRigidBody rbB, btTransform rbAFrame, btTransform rbBFrame, bool useReferenceFrameA) {
    this(BTPhysics_im.new_btHingeConstraint__SWIG_4(btRigidBody.swigGetCPtr(rbA), btRigidBody.swigGetCPtr(rbB), btTransform.swigGetCPtr(rbAFrame), btTransform.swigGetCPtr(rbBFrame), useReferenceFrameA), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btRigidBody rbA, btRigidBody rbB, btTransform rbAFrame, btTransform rbBFrame) {
    this(BTPhysics_im.new_btHingeConstraint__SWIG_5(btRigidBody.swigGetCPtr(rbA), btRigidBody.swigGetCPtr(rbB), btTransform.swigGetCPtr(rbAFrame), btTransform.swigGetCPtr(rbBFrame)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btRigidBody rbA, btTransform rbAFrame, bool useReferenceFrameA) {
    this(BTPhysics_im.new_btHingeConstraint__SWIG_6(btRigidBody.swigGetCPtr(rbA), btTransform.swigGetCPtr(rbAFrame), useReferenceFrameA), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btRigidBody rbA, btTransform rbAFrame) {
    this(BTPhysics_im.new_btHingeConstraint__SWIG_7(btRigidBody.swigGetCPtr(rbA), btTransform.swigGetCPtr(rbAFrame)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void buildJacobian() {
    BTPhysics_im.btHingeConstraint_buildJacobian(cast(void*)swigCPtr);
  }

  public override void getInfo1(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 info) {
    BTPhysics_im.btHingeConstraint_getInfo1(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.swigGetCPtr(info));
  }

  public void getInfo1NonVirtual(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 info) {
    BTPhysics_im.btHingeConstraint_getInfo1NonVirtual(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.swigGetCPtr(info));
  }

  public override void getInfo2(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info) {
    BTPhysics_im.btHingeConstraint_getInfo2(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info));
  }

  public void getInfo2NonVirtual(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info, btTransform transA, btTransform transB, btVector3 angVelA, btVector3 angVelB) {
    BTPhysics_im.btHingeConstraint_getInfo2NonVirtual(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info), btTransform.swigGetCPtr(transA), btTransform.swigGetCPtr(transB), btVector3.swigGetCPtr(angVelA), btVector3.swigGetCPtr(angVelB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getInfo2Internal(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info, btTransform transA, btTransform transB, btVector3 angVelA, btVector3 angVelB) {
    BTPhysics_im.btHingeConstraint_getInfo2Internal(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info), btTransform.swigGetCPtr(transA), btTransform.swigGetCPtr(transB), btVector3.swigGetCPtr(angVelA), btVector3.swigGetCPtr(angVelB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getInfo2InternalUsingFrameOffset(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info, btTransform transA, btTransform transB, btVector3 angVelA, btVector3 angVelB) {
    BTPhysics_im.btHingeConstraint_getInfo2InternalUsingFrameOffset(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info), btTransform.swigGetCPtr(transA), btTransform.swigGetCPtr(transB), btVector3.swigGetCPtr(angVelA), btVector3.swigGetCPtr(angVelB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void updateRHS(float timeStep) {
    BTPhysics_im.btHingeConstraint_updateRHS(cast(void*)swigCPtr, timeStep);
  }

  public btRigidBody getRigidBodyA() const {
    btRigidBody ret = new btRigidBody(BTPhysics_im.btHingeConstraint_getRigidBodyA__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public btRigidBody getRigidBodyB() const {
    btRigidBody ret = new btRigidBody(BTPhysics_im.btHingeConstraint_getRigidBodyB__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  alias btTypedConstraint.getRigidBodyA getRigidBodyA;

  alias btTypedConstraint.getRigidBodyB getRigidBodyB;

  public btTransform getFrameOffsetA() {
    btTransform ret = new btTransform(BTPhysics_im.btHingeConstraint_getFrameOffsetA(cast(void*)swigCPtr), false);
    return ret;
  }

  public btTransform getFrameOffsetB() {
    btTransform ret = new btTransform(BTPhysics_im.btHingeConstraint_getFrameOffsetB(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setFrames(btTransform frameA, btTransform frameB) {
    BTPhysics_im.btHingeConstraint_setFrames(cast(void*)swigCPtr, btTransform.swigGetCPtr(frameA), btTransform.swigGetCPtr(frameB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setAngularOnly(bool angularOnly) {
    BTPhysics_im.btHingeConstraint_setAngularOnly(cast(void*)swigCPtr, angularOnly);
  }

  public void enableAngularMotor(bool enableMotor, float targetVelocity, float maxMotorImpulse) {
    BTPhysics_im.btHingeConstraint_enableAngularMotor(cast(void*)swigCPtr, enableMotor, targetVelocity, maxMotorImpulse);
  }

  public void enableMotor(bool enableMotor) {
    BTPhysics_im.btHingeConstraint_enableMotor(cast(void*)swigCPtr, enableMotor);
  }

  public void setMaxMotorImpulse(float maxMotorImpulse) {
    BTPhysics_im.btHingeConstraint_setMaxMotorImpulse(cast(void*)swigCPtr, maxMotorImpulse);
  }

  public void setMotorTarget(btQuaternion qAinB, float dt) {
    BTPhysics_im.btHingeConstraint_setMotorTarget__SWIG_0(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(qAinB), dt);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setMotorTarget(float targetAngle, float dt) {
    BTPhysics_im.btHingeConstraint_setMotorTarget__SWIG_1(cast(void*)swigCPtr, targetAngle, dt);
  }

  public void setLimit(float low, float high, float _softness, float _biasFactor, float _relaxationFactor) {
    BTPhysics_im.btHingeConstraint_setLimit__SWIG_0(cast(void*)swigCPtr, low, high, _softness, _biasFactor, _relaxationFactor);
  }

  public void setLimit(float low, float high, float _softness, float _biasFactor) {
    BTPhysics_im.btHingeConstraint_setLimit__SWIG_1(cast(void*)swigCPtr, low, high, _softness, _biasFactor);
  }

  public void setLimit(float low, float high, float _softness) {
    BTPhysics_im.btHingeConstraint_setLimit__SWIG_2(cast(void*)swigCPtr, low, high, _softness);
  }

  public void setLimit(float low, float high) {
    BTPhysics_im.btHingeConstraint_setLimit__SWIG_3(cast(void*)swigCPtr, low, high);
  }

  public void setAxis(btVector3 axisInA) {
    BTPhysics_im.btHingeConstraint_setAxis(cast(void*)swigCPtr, btVector3.swigGetCPtr(axisInA));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public float getLowerLimit() const {
    auto ret = BTPhysics_im.btHingeConstraint_getLowerLimit(cast(void*)swigCPtr);
    return ret;
  }

  public float getUpperLimit() const {
    auto ret = BTPhysics_im.btHingeConstraint_getUpperLimit(cast(void*)swigCPtr);
    return ret;
  }

  public float getHingeAngle() {
    auto ret = BTPhysics_im.btHingeConstraint_getHingeAngle__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public float getHingeAngle(btTransform transA, btTransform transB) {
    auto ret = BTPhysics_im.btHingeConstraint_getHingeAngle__SWIG_1(cast(void*)swigCPtr, btTransform.swigGetCPtr(transA), btTransform.swigGetCPtr(transB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public void testLimit(btTransform transA, btTransform transB) {
    BTPhysics_im.btHingeConstraint_testLimit(cast(void*)swigCPtr, btTransform.swigGetCPtr(transA), btTransform.swigGetCPtr(transB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btTransform getAFrame() const {
    btTransform ret = new btTransform(BTPhysics_im.btHingeConstraint_getAFrame__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public btTransform getBFrame() const {
    btTransform ret = new btTransform(BTPhysics_im.btHingeConstraint_getBFrame__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public int getSolveLimit() {
    auto ret = BTPhysics_im.btHingeConstraint_getSolveLimit(cast(void*)swigCPtr);
    return ret;
  }

  public float getLimitSign() {
    auto ret = BTPhysics_im.btHingeConstraint_getLimitSign(cast(void*)swigCPtr);
    return ret;
  }

  public bool getAngularOnly() {
    bool ret = BTPhysics_im.btHingeConstraint_getAngularOnly(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool getEnableAngularMotor() {
    bool ret = BTPhysics_im.btHingeConstraint_getEnableAngularMotor(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public float getMotorTargetVelosity() {
    auto ret = BTPhysics_im.btHingeConstraint_getMotorTargetVelosity(cast(void*)swigCPtr);
    return ret;
  }

  public float getMaxMotorImpulse() {
    auto ret = BTPhysics_im.btHingeConstraint_getMaxMotorImpulse(cast(void*)swigCPtr);
    return ret;
  }

  public bool getUseFrameOffset() {
    bool ret = BTPhysics_im.btHingeConstraint_getUseFrameOffset(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setUseFrameOffset(bool frameOffsetOnOff) {
    BTPhysics_im.btHingeConstraint_setUseFrameOffset(cast(void*)swigCPtr, frameOffsetOnOff);
  }

  public override void setParam(int num, float value, int axis) {
    BTPhysics_im.btHingeConstraint_setParam__SWIG_0(cast(void*)swigCPtr, num, value, axis);
  }

  public override void setParam(int num, float value) {
    BTPhysics_im.btHingeConstraint_setParam__SWIG_1(cast(void*)swigCPtr, num, value);
  }

  public override float getParam(int num, int axis) const {
    auto ret = BTPhysics_im.btHingeConstraint_getParam__SWIG_0(cast(void*)swigCPtr, num, axis);
    return ret;
  }

  public override float getParam(int num) const {
    auto ret = BTPhysics_im.btHingeConstraint_getParam__SWIG_1(cast(void*)swigCPtr, num);
    return ret;
  }

  public override int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btHingeConstraint_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btHingeConstraint_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btHingeConstraintDoubleData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btHingeConstraintDoubleData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btHingeConstraintDoubleData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_typeConstraintData(btTypedConstraintData value) @property {
    BTPhysics_im.btHingeConstraintDoubleData_m_typeConstraintData_set(cast(void*)swigCPtr, btTypedConstraintData.swigGetCPtr(value));
  }

  public btTypedConstraintData m_typeConstraintData() @property const {
    void* cPtr = BTPhysics_im.btHingeConstraintDoubleData_m_typeConstraintData_get(cast(void*)swigCPtr);
    btTypedConstraintData ret = (cPtr is null) ? null : new btTypedConstraintData(cPtr, false);
    return ret;
  }

  public void m_rbAFrame(btTransformDoubleData value) @property {
    BTPhysics_im.btHingeConstraintDoubleData_m_rbAFrame_set(cast(void*)swigCPtr, btTransformDoubleData.swigGetCPtr(value));
  }

  public btTransformDoubleData m_rbAFrame() @property const {
    void* cPtr = BTPhysics_im.btHingeConstraintDoubleData_m_rbAFrame_get(cast(void*)swigCPtr);
    btTransformDoubleData ret = (cPtr is null) ? null : new btTransformDoubleData(cPtr, false);
    return ret;
  }

  public void m_rbBFrame(btTransformDoubleData value) @property {
    BTPhysics_im.btHingeConstraintDoubleData_m_rbBFrame_set(cast(void*)swigCPtr, btTransformDoubleData.swigGetCPtr(value));
  }

  public btTransformDoubleData m_rbBFrame() @property const {
    void* cPtr = BTPhysics_im.btHingeConstraintDoubleData_m_rbBFrame_get(cast(void*)swigCPtr);
    btTransformDoubleData ret = (cPtr is null) ? null : new btTransformDoubleData(cPtr, false);
    return ret;
  }

  public void m_useReferenceFrameA(int value) @property {
    BTPhysics_im.btHingeConstraintDoubleData_m_useReferenceFrameA_set(cast(void*)swigCPtr, value);
  }

  public int m_useReferenceFrameA() @property const {
    auto ret = BTPhysics_im.btHingeConstraintDoubleData_m_useReferenceFrameA_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_angularOnly(int value) @property {
    BTPhysics_im.btHingeConstraintDoubleData_m_angularOnly_set(cast(void*)swigCPtr, value);
  }

  public int m_angularOnly() @property const {
    auto ret = BTPhysics_im.btHingeConstraintDoubleData_m_angularOnly_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_enableAngularMotor(int value) @property {
    BTPhysics_im.btHingeConstraintDoubleData_m_enableAngularMotor_set(cast(void*)swigCPtr, value);
  }

  public int m_enableAngularMotor() @property const {
    auto ret = BTPhysics_im.btHingeConstraintDoubleData_m_enableAngularMotor_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_motorTargetVelocity(float value) @property {
    BTPhysics_im.btHingeConstraintDoubleData_m_motorTargetVelocity_set(cast(void*)swigCPtr, value);
  }

  public float m_motorTargetVelocity() @property const {
    auto ret = BTPhysics_im.btHingeConstraintDoubleData_m_motorTargetVelocity_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_maxMotorImpulse(float value) @property {
    BTPhysics_im.btHingeConstraintDoubleData_m_maxMotorImpulse_set(cast(void*)swigCPtr, value);
  }

  public float m_maxMotorImpulse() @property const {
    auto ret = BTPhysics_im.btHingeConstraintDoubleData_m_maxMotorImpulse_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_lowerLimit(float value) @property {
    BTPhysics_im.btHingeConstraintDoubleData_m_lowerLimit_set(cast(void*)swigCPtr, value);
  }

  public float m_lowerLimit() @property const {
    auto ret = BTPhysics_im.btHingeConstraintDoubleData_m_lowerLimit_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_upperLimit(float value) @property {
    BTPhysics_im.btHingeConstraintDoubleData_m_upperLimit_set(cast(void*)swigCPtr, value);
  }

  public float m_upperLimit() @property const {
    auto ret = BTPhysics_im.btHingeConstraintDoubleData_m_upperLimit_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_limitSoftness(float value) @property {
    BTPhysics_im.btHingeConstraintDoubleData_m_limitSoftness_set(cast(void*)swigCPtr, value);
  }

  public float m_limitSoftness() @property const {
    auto ret = BTPhysics_im.btHingeConstraintDoubleData_m_limitSoftness_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_biasFactor(float value) @property {
    BTPhysics_im.btHingeConstraintDoubleData_m_biasFactor_set(cast(void*)swigCPtr, value);
  }

  public float m_biasFactor() @property const {
    auto ret = BTPhysics_im.btHingeConstraintDoubleData_m_biasFactor_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_relaxationFactor(float value) @property {
    BTPhysics_im.btHingeConstraintDoubleData_m_relaxationFactor_set(cast(void*)swigCPtr, value);
  }

  public float m_relaxationFactor() @property const {
    auto ret = BTPhysics_im.btHingeConstraintDoubleData_m_relaxationFactor_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btHingeConstraintDoubleData(), true);
  }
}

class btHingeConstraintFloatData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btHingeConstraintFloatData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btHingeConstraintFloatData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_typeConstraintData(btTypedConstraintData value) @property {
    BTPhysics_im.btHingeConstraintFloatData_m_typeConstraintData_set(cast(void*)swigCPtr, btTypedConstraintData.swigGetCPtr(value));
  }

  public btTypedConstraintData m_typeConstraintData() @property const {
    void* cPtr = BTPhysics_im.btHingeConstraintFloatData_m_typeConstraintData_get(cast(void*)swigCPtr);
    btTypedConstraintData ret = (cPtr is null) ? null : new btTypedConstraintData(cPtr, false);
    return ret;
  }

  public void m_rbAFrame(btTransformFloatData value) @property {
    BTPhysics_im.btHingeConstraintFloatData_m_rbAFrame_set(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(value));
  }

  public btTransformFloatData m_rbAFrame() @property const {
    void* cPtr = BTPhysics_im.btHingeConstraintFloatData_m_rbAFrame_get(cast(void*)swigCPtr);
    btTransformFloatData ret = (cPtr is null) ? null : new btTransformFloatData(cPtr, false);
    return ret;
  }

  public void m_rbBFrame(btTransformFloatData value) @property {
    BTPhysics_im.btHingeConstraintFloatData_m_rbBFrame_set(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(value));
  }

  public btTransformFloatData m_rbBFrame() @property const {
    void* cPtr = BTPhysics_im.btHingeConstraintFloatData_m_rbBFrame_get(cast(void*)swigCPtr);
    btTransformFloatData ret = (cPtr is null) ? null : new btTransformFloatData(cPtr, false);
    return ret;
  }

  public void m_useReferenceFrameA(int value) @property {
    BTPhysics_im.btHingeConstraintFloatData_m_useReferenceFrameA_set(cast(void*)swigCPtr, value);
  }

  public int m_useReferenceFrameA() @property const {
    auto ret = BTPhysics_im.btHingeConstraintFloatData_m_useReferenceFrameA_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_angularOnly(int value) @property {
    BTPhysics_im.btHingeConstraintFloatData_m_angularOnly_set(cast(void*)swigCPtr, value);
  }

  public int m_angularOnly() @property const {
    auto ret = BTPhysics_im.btHingeConstraintFloatData_m_angularOnly_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_enableAngularMotor(int value) @property {
    BTPhysics_im.btHingeConstraintFloatData_m_enableAngularMotor_set(cast(void*)swigCPtr, value);
  }

  public int m_enableAngularMotor() @property const {
    auto ret = BTPhysics_im.btHingeConstraintFloatData_m_enableAngularMotor_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_motorTargetVelocity(float value) @property {
    BTPhysics_im.btHingeConstraintFloatData_m_motorTargetVelocity_set(cast(void*)swigCPtr, value);
  }

  public float m_motorTargetVelocity() @property const {
    auto ret = BTPhysics_im.btHingeConstraintFloatData_m_motorTargetVelocity_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_maxMotorImpulse(float value) @property {
    BTPhysics_im.btHingeConstraintFloatData_m_maxMotorImpulse_set(cast(void*)swigCPtr, value);
  }

  public float m_maxMotorImpulse() @property const {
    auto ret = BTPhysics_im.btHingeConstraintFloatData_m_maxMotorImpulse_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_lowerLimit(float value) @property {
    BTPhysics_im.btHingeConstraintFloatData_m_lowerLimit_set(cast(void*)swigCPtr, value);
  }

  public float m_lowerLimit() @property const {
    auto ret = BTPhysics_im.btHingeConstraintFloatData_m_lowerLimit_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_upperLimit(float value) @property {
    BTPhysics_im.btHingeConstraintFloatData_m_upperLimit_set(cast(void*)swigCPtr, value);
  }

  public float m_upperLimit() @property const {
    auto ret = BTPhysics_im.btHingeConstraintFloatData_m_upperLimit_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_limitSoftness(float value) @property {
    BTPhysics_im.btHingeConstraintFloatData_m_limitSoftness_set(cast(void*)swigCPtr, value);
  }

  public float m_limitSoftness() @property const {
    auto ret = BTPhysics_im.btHingeConstraintFloatData_m_limitSoftness_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_biasFactor(float value) @property {
    BTPhysics_im.btHingeConstraintFloatData_m_biasFactor_set(cast(void*)swigCPtr, value);
  }

  public float m_biasFactor() @property const {
    auto ret = BTPhysics_im.btHingeConstraintFloatData_m_biasFactor_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_relaxationFactor(float value) @property {
    BTPhysics_im.btHingeConstraintFloatData_m_relaxationFactor_set(cast(void*)swigCPtr, value);
  }

  public float m_relaxationFactor() @property const {
    auto ret = BTPhysics_im.btHingeConstraintFloatData_m_relaxationFactor_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btHingeConstraintFloatData(), true);
  }
}

enum btConeTwistFlags {
  BT_CONETWIST_FLAGS_LIN_CFM = 1,
  BT_CONETWIST_FLAGS_LIN_ERP = 2,
  BT_CONETWIST_FLAGS_ANG_CFM = 4
}

class btConeTwistConstraint : btTypedConstraint {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btConeTwistConstraint_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btConeTwistConstraint obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConeTwistConstraint(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(btRigidBody rbA, btRigidBody rbB, btTransform rbAFrame, btTransform rbBFrame) {
    this(BTPhysics_im.new_btConeTwistConstraint__SWIG_0(btRigidBody.swigGetCPtr(rbA), btRigidBody.swigGetCPtr(rbB), btTransform.swigGetCPtr(rbAFrame), btTransform.swigGetCPtr(rbBFrame)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btRigidBody rbA, btTransform rbAFrame) {
    this(BTPhysics_im.new_btConeTwistConstraint__SWIG_1(btRigidBody.swigGetCPtr(rbA), btTransform.swigGetCPtr(rbAFrame)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void buildJacobian() {
    BTPhysics_im.btConeTwistConstraint_buildJacobian(cast(void*)swigCPtr);
  }

  public override void getInfo1(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 info) {
    BTPhysics_im.btConeTwistConstraint_getInfo1(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.swigGetCPtr(info));
  }

  public void getInfo1NonVirtual(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 info) {
    BTPhysics_im.btConeTwistConstraint_getInfo1NonVirtual(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.swigGetCPtr(info));
  }

  public override void getInfo2(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info) {
    BTPhysics_im.btConeTwistConstraint_getInfo2(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info));
  }

  public void getInfo2NonVirtual(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info, btTransform transA, btTransform transB, SWIGTYPE_p_btMatrix3x3 invInertiaWorldA, SWIGTYPE_p_btMatrix3x3 invInertiaWorldB) {
    BTPhysics_im.btConeTwistConstraint_getInfo2NonVirtual(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info), btTransform.swigGetCPtr(transA), btTransform.swigGetCPtr(transB), SWIGTYPE_p_btMatrix3x3.swigGetCPtr(invInertiaWorldA), SWIGTYPE_p_btMatrix3x3.swigGetCPtr(invInertiaWorldB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void solveConstraintObsolete(btRigidBody bodyA, btRigidBody bodyB, float timeStep) {
    BTPhysics_im.btConeTwistConstraint_solveConstraintObsolete(cast(void*)swigCPtr, btRigidBody.swigGetCPtr(bodyA), btRigidBody.swigGetCPtr(bodyB), timeStep);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void updateRHS(float timeStep) {
    BTPhysics_im.btConeTwistConstraint_updateRHS(cast(void*)swigCPtr, timeStep);
  }

  public btRigidBody getRigidBodyA() const {
    btRigidBody ret = new btRigidBody(BTPhysics_im.btConeTwistConstraint_getRigidBodyA(cast(void*)swigCPtr), false);
    return ret;
  }

  alias btTypedConstraint.getRigidBodyA getRigidBodyA;

  public btRigidBody getRigidBodyB() const {
    btRigidBody ret = new btRigidBody(BTPhysics_im.btConeTwistConstraint_getRigidBodyB(cast(void*)swigCPtr), false);
    return ret;
  }

  alias btTypedConstraint.getRigidBodyB getRigidBodyB;

  public void setAngularOnly(bool angularOnly) {
    BTPhysics_im.btConeTwistConstraint_setAngularOnly(cast(void*)swigCPtr, angularOnly);
  }

  public void setLimit(int limitIndex, float limitValue) {
    BTPhysics_im.btConeTwistConstraint_setLimit__SWIG_0(cast(void*)swigCPtr, limitIndex, limitValue);
  }

  public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness, float _biasFactor, float _relaxationFactor) {
    BTPhysics_im.btConeTwistConstraint_setLimit__SWIG_1(cast(void*)swigCPtr, _swingSpan1, _swingSpan2, _twistSpan, _softness, _biasFactor, _relaxationFactor);
  }

  public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness, float _biasFactor) {
    BTPhysics_im.btConeTwistConstraint_setLimit__SWIG_2(cast(void*)swigCPtr, _swingSpan1, _swingSpan2, _twistSpan, _softness, _biasFactor);
  }

  public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness) {
    BTPhysics_im.btConeTwistConstraint_setLimit__SWIG_3(cast(void*)swigCPtr, _swingSpan1, _swingSpan2, _twistSpan, _softness);
  }

  public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan) {
    BTPhysics_im.btConeTwistConstraint_setLimit__SWIG_4(cast(void*)swigCPtr, _swingSpan1, _swingSpan2, _twistSpan);
  }

  public btTransform getAFrame() {
    btTransform ret = new btTransform(BTPhysics_im.btConeTwistConstraint_getAFrame(cast(void*)swigCPtr), false);
    return ret;
  }

  public btTransform getBFrame() {
    btTransform ret = new btTransform(BTPhysics_im.btConeTwistConstraint_getBFrame(cast(void*)swigCPtr), false);
    return ret;
  }

  public int getSolveTwistLimit() {
    auto ret = BTPhysics_im.btConeTwistConstraint_getSolveTwistLimit(cast(void*)swigCPtr);
    return ret;
  }

  public int getSolveSwingLimit() {
    auto ret = BTPhysics_im.btConeTwistConstraint_getSolveSwingLimit(cast(void*)swigCPtr);
    return ret;
  }

  public float getTwistLimitSign() {
    auto ret = BTPhysics_im.btConeTwistConstraint_getTwistLimitSign(cast(void*)swigCPtr);
    return ret;
  }

  public void calcAngleInfo() {
    BTPhysics_im.btConeTwistConstraint_calcAngleInfo(cast(void*)swigCPtr);
  }

  public void calcAngleInfo2(btTransform transA, btTransform transB, SWIGTYPE_p_btMatrix3x3 invInertiaWorldA, SWIGTYPE_p_btMatrix3x3 invInertiaWorldB) {
    BTPhysics_im.btConeTwistConstraint_calcAngleInfo2(cast(void*)swigCPtr, btTransform.swigGetCPtr(transA), btTransform.swigGetCPtr(transB), SWIGTYPE_p_btMatrix3x3.swigGetCPtr(invInertiaWorldA), SWIGTYPE_p_btMatrix3x3.swigGetCPtr(invInertiaWorldB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public float getSwingSpan1() {
    auto ret = BTPhysics_im.btConeTwistConstraint_getSwingSpan1(cast(void*)swigCPtr);
    return ret;
  }

  public float getSwingSpan2() {
    auto ret = BTPhysics_im.btConeTwistConstraint_getSwingSpan2(cast(void*)swigCPtr);
    return ret;
  }

  public float getTwistSpan() {
    auto ret = BTPhysics_im.btConeTwistConstraint_getTwistSpan(cast(void*)swigCPtr);
    return ret;
  }

  public float getTwistAngle() {
    auto ret = BTPhysics_im.btConeTwistConstraint_getTwistAngle(cast(void*)swigCPtr);
    return ret;
  }

  public bool isPastSwingLimit() {
    bool ret = BTPhysics_im.btConeTwistConstraint_isPastSwingLimit(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setDamping(float damping) {
    BTPhysics_im.btConeTwistConstraint_setDamping(cast(void*)swigCPtr, damping);
  }

  public void enableMotor(bool b) {
    BTPhysics_im.btConeTwistConstraint_enableMotor(cast(void*)swigCPtr, b);
  }

  public void setMaxMotorImpulse(float maxMotorImpulse) {
    BTPhysics_im.btConeTwistConstraint_setMaxMotorImpulse(cast(void*)swigCPtr, maxMotorImpulse);
  }

  public void setMaxMotorImpulseNormalized(float maxMotorImpulse) {
    BTPhysics_im.btConeTwistConstraint_setMaxMotorImpulseNormalized(cast(void*)swigCPtr, maxMotorImpulse);
  }

  public float getFixThresh() {
    auto ret = BTPhysics_im.btConeTwistConstraint_getFixThresh(cast(void*)swigCPtr);
    return ret;
  }

  public void setFixThresh(float fixThresh) {
    BTPhysics_im.btConeTwistConstraint_setFixThresh(cast(void*)swigCPtr, fixThresh);
  }

  public void setMotorTarget(btQuaternion q) {
    BTPhysics_im.btConeTwistConstraint_setMotorTarget(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(q));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setMotorTargetInConstraintSpace(btQuaternion q) {
    BTPhysics_im.btConeTwistConstraint_setMotorTargetInConstraintSpace(cast(void*)swigCPtr, btQuaternion.swigGetCPtr(q));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 GetPointForAngle(float fAngleInRadians, float fLength) const {
    btVector3 ret = new btVector3(BTPhysics_im.btConeTwistConstraint_GetPointForAngle(cast(void*)swigCPtr, fAngleInRadians, fLength), true);
    return ret;
  }

  public override void setParam(int num, float value, int axis) {
    BTPhysics_im.btConeTwistConstraint_setParam__SWIG_0(cast(void*)swigCPtr, num, value, axis);
  }

  public override void setParam(int num, float value) {
    BTPhysics_im.btConeTwistConstraint_setParam__SWIG_1(cast(void*)swigCPtr, num, value);
  }

  public void setFrames(btTransform frameA, btTransform frameB) {
    BTPhysics_im.btConeTwistConstraint_setFrames(cast(void*)swigCPtr, btTransform.swigGetCPtr(frameA), btTransform.swigGetCPtr(frameB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btTransform getFrameOffsetA() const {
    btTransform ret = new btTransform(BTPhysics_im.btConeTwistConstraint_getFrameOffsetA(cast(void*)swigCPtr), false);
    return ret;
  }

  public btTransform getFrameOffsetB() const {
    btTransform ret = new btTransform(BTPhysics_im.btConeTwistConstraint_getFrameOffsetB(cast(void*)swigCPtr), false);
    return ret;
  }

  public override float getParam(int num, int axis) const {
    auto ret = BTPhysics_im.btConeTwistConstraint_getParam__SWIG_0(cast(void*)swigCPtr, num, axis);
    return ret;
  }

  public override float getParam(int num) const {
    auto ret = BTPhysics_im.btConeTwistConstraint_getParam__SWIG_1(cast(void*)swigCPtr, num);
    return ret;
  }

  public override int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btConeTwistConstraint_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btConeTwistConstraint_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btConeTwistConstraintData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btConeTwistConstraintData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btConeTwistConstraintData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_typeConstraintData(btTypedConstraintData value) @property {
    BTPhysics_im.btConeTwistConstraintData_m_typeConstraintData_set(cast(void*)swigCPtr, btTypedConstraintData.swigGetCPtr(value));
  }

  public btTypedConstraintData m_typeConstraintData() @property const {
    void* cPtr = BTPhysics_im.btConeTwistConstraintData_m_typeConstraintData_get(cast(void*)swigCPtr);
    btTypedConstraintData ret = (cPtr is null) ? null : new btTypedConstraintData(cPtr, false);
    return ret;
  }

  public void m_rbAFrame(btTransformFloatData value) @property {
    BTPhysics_im.btConeTwistConstraintData_m_rbAFrame_set(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(value));
  }

  public btTransformFloatData m_rbAFrame() @property const {
    void* cPtr = BTPhysics_im.btConeTwistConstraintData_m_rbAFrame_get(cast(void*)swigCPtr);
    btTransformFloatData ret = (cPtr is null) ? null : new btTransformFloatData(cPtr, false);
    return ret;
  }

  public void m_rbBFrame(btTransformFloatData value) @property {
    BTPhysics_im.btConeTwistConstraintData_m_rbBFrame_set(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(value));
  }

  public btTransformFloatData m_rbBFrame() @property const {
    void* cPtr = BTPhysics_im.btConeTwistConstraintData_m_rbBFrame_get(cast(void*)swigCPtr);
    btTransformFloatData ret = (cPtr is null) ? null : new btTransformFloatData(cPtr, false);
    return ret;
  }

  public void m_swingSpan1(float value) @property {
    BTPhysics_im.btConeTwistConstraintData_m_swingSpan1_set(cast(void*)swigCPtr, value);
  }

  public float m_swingSpan1() @property const {
    auto ret = BTPhysics_im.btConeTwistConstraintData_m_swingSpan1_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_swingSpan2(float value) @property {
    BTPhysics_im.btConeTwistConstraintData_m_swingSpan2_set(cast(void*)swigCPtr, value);
  }

  public float m_swingSpan2() @property const {
    auto ret = BTPhysics_im.btConeTwistConstraintData_m_swingSpan2_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_twistSpan(float value) @property {
    BTPhysics_im.btConeTwistConstraintData_m_twistSpan_set(cast(void*)swigCPtr, value);
  }

  public float m_twistSpan() @property const {
    auto ret = BTPhysics_im.btConeTwistConstraintData_m_twistSpan_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_limitSoftness(float value) @property {
    BTPhysics_im.btConeTwistConstraintData_m_limitSoftness_set(cast(void*)swigCPtr, value);
  }

  public float m_limitSoftness() @property const {
    auto ret = BTPhysics_im.btConeTwistConstraintData_m_limitSoftness_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_biasFactor(float value) @property {
    BTPhysics_im.btConeTwistConstraintData_m_biasFactor_set(cast(void*)swigCPtr, value);
  }

  public float m_biasFactor() @property const {
    auto ret = BTPhysics_im.btConeTwistConstraintData_m_biasFactor_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_relaxationFactor(float value) @property {
    BTPhysics_im.btConeTwistConstraintData_m_relaxationFactor_set(cast(void*)swigCPtr, value);
  }

  public float m_relaxationFactor() @property const {
    auto ret = BTPhysics_im.btConeTwistConstraintData_m_relaxationFactor_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_damping(float value) @property {
    BTPhysics_im.btConeTwistConstraintData_m_damping_set(cast(void*)swigCPtr, value);
  }

  public float m_damping() @property const {
    auto ret = BTPhysics_im.btConeTwistConstraintData_m_damping_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_pad(string value) @property {
    BTPhysics_im.btConeTwistConstraintData_m_pad_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string m_pad() @property const {
    string ret = std.conv.to!string(BTPhysics_im.btConeTwistConstraintData_m_pad_get(cast(void*)swigCPtr));
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btConeTwistConstraintData(), true);
  }
}

class btRotationalLimitMotor {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btRotationalLimitMotor obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btRotationalLimitMotor(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_loLimit(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_loLimit_set(cast(void*)swigCPtr, value);
  }

  public float m_loLimit() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_loLimit_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_hiLimit(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_hiLimit_set(cast(void*)swigCPtr, value);
  }

  public float m_hiLimit() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_hiLimit_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_targetVelocity(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_targetVelocity_set(cast(void*)swigCPtr, value);
  }

  public float m_targetVelocity() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_targetVelocity_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_maxMotorForce(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_maxMotorForce_set(cast(void*)swigCPtr, value);
  }

  public float m_maxMotorForce() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_maxMotorForce_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_maxLimitForce(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_maxLimitForce_set(cast(void*)swigCPtr, value);
  }

  public float m_maxLimitForce() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_maxLimitForce_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_damping(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_damping_set(cast(void*)swigCPtr, value);
  }

  public float m_damping() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_damping_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_limitSoftness(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_limitSoftness_set(cast(void*)swigCPtr, value);
  }

  public float m_limitSoftness() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_limitSoftness_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_normalCFM(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_normalCFM_set(cast(void*)swigCPtr, value);
  }

  public float m_normalCFM() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_normalCFM_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_stopERP(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_stopERP_set(cast(void*)swigCPtr, value);
  }

  public float m_stopERP() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_stopERP_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_stopCFM(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_stopCFM_set(cast(void*)swigCPtr, value);
  }

  public float m_stopCFM() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_stopCFM_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_bounce(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_bounce_set(cast(void*)swigCPtr, value);
  }

  public float m_bounce() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_bounce_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_enableMotor(bool value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_enableMotor_set(cast(void*)swigCPtr, value);
  }

  public bool m_enableMotor() @property const {
    bool ret = BTPhysics_im.btRotationalLimitMotor_m_enableMotor_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void m_currentLimitError(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_currentLimitError_set(cast(void*)swigCPtr, value);
  }

  public float m_currentLimitError() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_currentLimitError_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_currentPosition(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_currentPosition_set(cast(void*)swigCPtr, value);
  }

  public float m_currentPosition() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_currentPosition_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_currentLimit(int value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_currentLimit_set(cast(void*)swigCPtr, value);
  }

  public int m_currentLimit() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_currentLimit_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_accumulatedImpulse(float value) @property {
    BTPhysics_im.btRotationalLimitMotor_m_accumulatedImpulse_set(cast(void*)swigCPtr, value);
  }

  public float m_accumulatedImpulse() @property const {
    auto ret = BTPhysics_im.btRotationalLimitMotor_m_accumulatedImpulse_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btRotationalLimitMotor__SWIG_0(), true);
  }

  public this(btRotationalLimitMotor limot) {
    this(BTPhysics_im.new_btRotationalLimitMotor__SWIG_1(btRotationalLimitMotor.swigGetCPtr(limot)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public bool isLimited() {
    bool ret = BTPhysics_im.btRotationalLimitMotor_isLimited(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool needApplyTorques() {
    bool ret = BTPhysics_im.btRotationalLimitMotor_needApplyTorques(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public int testLimitValue(float test_value) {
    auto ret = BTPhysics_im.btRotationalLimitMotor_testLimitValue(cast(void*)swigCPtr, test_value);
    return ret;
  }

  public float solveAngularLimits(float timeStep, btVector3 axis, float jacDiagABInv, btRigidBody body0, btRigidBody body1) {
    auto ret = BTPhysics_im.btRotationalLimitMotor_solveAngularLimits(cast(void*)swigCPtr, timeStep, btVector3.swigGetCPtr(axis), jacDiagABInv, btRigidBody.swigGetCPtr(body0), btRigidBody.swigGetCPtr(body1));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }
}

class btTranslationalLimitMotor {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btTranslationalLimitMotor obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btTranslationalLimitMotor(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_lowerLimit(btVector3 value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_lowerLimit_set(cast(void*)swigCPtr, btVector3.swigGetCPtr(value));
  }

  public btVector3 m_lowerLimit() @property const {
    void* cPtr = BTPhysics_im.btTranslationalLimitMotor_m_lowerLimit_get(cast(void*)swigCPtr);
    btVector3 ret = (cPtr is null) ? null : new btVector3(cPtr, false);
    return ret;
  }

  public void m_upperLimit(btVector3 value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_upperLimit_set(cast(void*)swigCPtr, btVector3.swigGetCPtr(value));
  }

  public btVector3 m_upperLimit() @property const {
    void* cPtr = BTPhysics_im.btTranslationalLimitMotor_m_upperLimit_get(cast(void*)swigCPtr);
    btVector3 ret = (cPtr is null) ? null : new btVector3(cPtr, false);
    return ret;
  }

  public void m_accumulatedImpulse(btVector3 value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_accumulatedImpulse_set(cast(void*)swigCPtr, btVector3.swigGetCPtr(value));
  }

  public btVector3 m_accumulatedImpulse() @property const {
    void* cPtr = BTPhysics_im.btTranslationalLimitMotor_m_accumulatedImpulse_get(cast(void*)swigCPtr);
    btVector3 ret = (cPtr is null) ? null : new btVector3(cPtr, false);
    return ret;
  }

  public void m_limitSoftness(float value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_limitSoftness_set(cast(void*)swigCPtr, value);
  }

  public float m_limitSoftness() @property const {
    auto ret = BTPhysics_im.btTranslationalLimitMotor_m_limitSoftness_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_damping(float value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_damping_set(cast(void*)swigCPtr, value);
  }

  public float m_damping() @property const {
    auto ret = BTPhysics_im.btTranslationalLimitMotor_m_damping_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_restitution(float value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_restitution_set(cast(void*)swigCPtr, value);
  }

  public float m_restitution() @property const {
    auto ret = BTPhysics_im.btTranslationalLimitMotor_m_restitution_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_normalCFM(btVector3 value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_normalCFM_set(cast(void*)swigCPtr, btVector3.swigGetCPtr(value));
  }

  public btVector3 m_normalCFM() @property const {
    void* cPtr = BTPhysics_im.btTranslationalLimitMotor_m_normalCFM_get(cast(void*)swigCPtr);
    btVector3 ret = (cPtr is null) ? null : new btVector3(cPtr, false);
    return ret;
  }

  public void m_stopERP(btVector3 value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_stopERP_set(cast(void*)swigCPtr, btVector3.swigGetCPtr(value));
  }

  public btVector3 m_stopERP() @property const {
    void* cPtr = BTPhysics_im.btTranslationalLimitMotor_m_stopERP_get(cast(void*)swigCPtr);
    btVector3 ret = (cPtr is null) ? null : new btVector3(cPtr, false);
    return ret;
  }

  public void m_stopCFM(btVector3 value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_stopCFM_set(cast(void*)swigCPtr, btVector3.swigGetCPtr(value));
  }

  public btVector3 m_stopCFM() @property const {
    void* cPtr = BTPhysics_im.btTranslationalLimitMotor_m_stopCFM_get(cast(void*)swigCPtr);
    btVector3 ret = (cPtr is null) ? null : new btVector3(cPtr, false);
    return ret;
  }

  public void m_enableMotor(SWIGTYPE_p_bool value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_enableMotor_set(cast(void*)swigCPtr, SWIGTYPE_p_bool.swigGetCPtr(value));
  }

  public SWIGTYPE_p_bool m_enableMotor() @property const {
    void* cPtr = BTPhysics_im.btTranslationalLimitMotor_m_enableMotor_get(cast(void*)swigCPtr);
    SWIGTYPE_p_bool ret = (cPtr is null) ? null : new SWIGTYPE_p_bool(cPtr, false);
    return ret;
  }

  public void m_targetVelocity(btVector3 value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_targetVelocity_set(cast(void*)swigCPtr, btVector3.swigGetCPtr(value));
  }

  public btVector3 m_targetVelocity() @property const {
    void* cPtr = BTPhysics_im.btTranslationalLimitMotor_m_targetVelocity_get(cast(void*)swigCPtr);
    btVector3 ret = (cPtr is null) ? null : new btVector3(cPtr, false);
    return ret;
  }

  public void m_maxMotorForce(btVector3 value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_maxMotorForce_set(cast(void*)swigCPtr, btVector3.swigGetCPtr(value));
  }

  public btVector3 m_maxMotorForce() @property const {
    void* cPtr = BTPhysics_im.btTranslationalLimitMotor_m_maxMotorForce_get(cast(void*)swigCPtr);
    btVector3 ret = (cPtr is null) ? null : new btVector3(cPtr, false);
    return ret;
  }

  public void m_currentLimitError(btVector3 value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_currentLimitError_set(cast(void*)swigCPtr, btVector3.swigGetCPtr(value));
  }

  public btVector3 m_currentLimitError() @property const {
    void* cPtr = BTPhysics_im.btTranslationalLimitMotor_m_currentLimitError_get(cast(void*)swigCPtr);
    btVector3 ret = (cPtr is null) ? null : new btVector3(cPtr, false);
    return ret;
  }

  public void m_currentLinearDiff(btVector3 value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_currentLinearDiff_set(cast(void*)swigCPtr, btVector3.swigGetCPtr(value));
  }

  public btVector3 m_currentLinearDiff() @property const {
    void* cPtr = BTPhysics_im.btTranslationalLimitMotor_m_currentLinearDiff_get(cast(void*)swigCPtr);
    btVector3 ret = (cPtr is null) ? null : new btVector3(cPtr, false);
    return ret;
  }

  public void m_currentLimit(SWIGTYPE_p_int value) @property {
    BTPhysics_im.btTranslationalLimitMotor_m_currentLimit_set(cast(void*)swigCPtr, SWIGTYPE_p_int.swigGetCPtr(value));
  }

  public SWIGTYPE_p_int m_currentLimit() @property const {
    void* cPtr = BTPhysics_im.btTranslationalLimitMotor_m_currentLimit_get(cast(void*)swigCPtr);
    SWIGTYPE_p_int ret = (cPtr is null) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btTranslationalLimitMotor__SWIG_0(), true);
  }

  public this(btTranslationalLimitMotor other) {
    this(BTPhysics_im.new_btTranslationalLimitMotor__SWIG_1(btTranslationalLimitMotor.swigGetCPtr(other)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public bool isLimited(int limitIndex) {
    bool ret = BTPhysics_im.btTranslationalLimitMotor_isLimited(cast(void*)swigCPtr, limitIndex) ? true : false;
    return ret;
  }

  public bool needApplyForce(int limitIndex) {
    bool ret = BTPhysics_im.btTranslationalLimitMotor_needApplyForce(cast(void*)swigCPtr, limitIndex) ? true : false;
    return ret;
  }

  public int testLimitValue(int limitIndex, float test_value) {
    auto ret = BTPhysics_im.btTranslationalLimitMotor_testLimitValue(cast(void*)swigCPtr, limitIndex, test_value);
    return ret;
  }

  public float solveLinearAxis(float timeStep, float jacDiagABInv, btRigidBody body1, btVector3 pointInA, btRigidBody body2, btVector3 pointInB, int limit_index, btVector3 axis_normal_on_a, btVector3 anchorPos) {
    auto ret = BTPhysics_im.btTranslationalLimitMotor_solveLinearAxis(cast(void*)swigCPtr, timeStep, jacDiagABInv, btRigidBody.swigGetCPtr(body1), btVector3.swigGetCPtr(pointInA), btRigidBody.swigGetCPtr(body2), btVector3.swigGetCPtr(pointInB), limit_index, btVector3.swigGetCPtr(axis_normal_on_a), btVector3.swigGetCPtr(anchorPos));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }
}

enum bt6DofFlags {
  BT_6DOF_FLAGS_CFM_NORM = 1,
  BT_6DOF_FLAGS_CFM_STOP = 2,
  BT_6DOF_FLAGS_ERP_STOP = 4
}

int BT_6DOF_FLAGS_AXIS_SHIFT() @property {
  auto ret = BTPhysics_im.BT_6DOF_FLAGS_AXIS_SHIFT_get();
  return ret;
}

class btGeneric6DofConstraint : btTypedConstraint {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btGeneric6DofConstraint_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btGeneric6DofConstraint obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btGeneric6DofConstraint(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void m_useSolveConstraintObsolete(bool value) @property {
    BTPhysics_im.btGeneric6DofConstraint_m_useSolveConstraintObsolete_set(cast(void*)swigCPtr, value);
  }

  public bool m_useSolveConstraintObsolete() @property const {
    bool ret = BTPhysics_im.btGeneric6DofConstraint_m_useSolveConstraintObsolete_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public this(btRigidBody rbA, btRigidBody rbB, btTransform frameInA, btTransform frameInB, bool useLinearReferenceFrameA) {
    this(BTPhysics_im.new_btGeneric6DofConstraint__SWIG_0(btRigidBody.swigGetCPtr(rbA), btRigidBody.swigGetCPtr(rbB), btTransform.swigGetCPtr(frameInA), btTransform.swigGetCPtr(frameInB), useLinearReferenceFrameA), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btRigidBody rbB, btTransform frameInB, bool useLinearReferenceFrameB) {
    this(BTPhysics_im.new_btGeneric6DofConstraint__SWIG_1(btRigidBody.swigGetCPtr(rbB), btTransform.swigGetCPtr(frameInB), useLinearReferenceFrameB), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void calculateTransforms(btTransform transA, btTransform transB) {
    BTPhysics_im.btGeneric6DofConstraint_calculateTransforms__SWIG_0(cast(void*)swigCPtr, btTransform.swigGetCPtr(transA), btTransform.swigGetCPtr(transB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void calculateTransforms() {
    BTPhysics_im.btGeneric6DofConstraint_calculateTransforms__SWIG_1(cast(void*)swigCPtr);
  }

  public btTransform getCalculatedTransformA() const {
    btTransform ret = new btTransform(BTPhysics_im.btGeneric6DofConstraint_getCalculatedTransformA(cast(void*)swigCPtr), false);
    return ret;
  }

  public btTransform getCalculatedTransformB() const {
    btTransform ret = new btTransform(BTPhysics_im.btGeneric6DofConstraint_getCalculatedTransformB(cast(void*)swigCPtr), false);
    return ret;
  }

  public btTransform getFrameOffsetA() const {
    btTransform ret = new btTransform(BTPhysics_im.btGeneric6DofConstraint_getFrameOffsetA__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public btTransform getFrameOffsetB() const {
    btTransform ret = new btTransform(BTPhysics_im.btGeneric6DofConstraint_getFrameOffsetB__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public override void buildJacobian() {
    BTPhysics_im.btGeneric6DofConstraint_buildJacobian(cast(void*)swigCPtr);
  }

  public override void getInfo1(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 info) {
    BTPhysics_im.btGeneric6DofConstraint_getInfo1(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.swigGetCPtr(info));
  }

  public void getInfo1NonVirtual(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 info) {
    BTPhysics_im.btGeneric6DofConstraint_getInfo1NonVirtual(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.swigGetCPtr(info));
  }

  public override void getInfo2(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info) {
    BTPhysics_im.btGeneric6DofConstraint_getInfo2(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info));
  }

  public void getInfo2NonVirtual(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info, btTransform transA, btTransform transB, btVector3 linVelA, btVector3 linVelB, btVector3 angVelA, btVector3 angVelB) {
    BTPhysics_im.btGeneric6DofConstraint_getInfo2NonVirtual(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info), btTransform.swigGetCPtr(transA), btTransform.swigGetCPtr(transB), btVector3.swigGetCPtr(linVelA), btVector3.swigGetCPtr(linVelB), btVector3.swigGetCPtr(angVelA), btVector3.swigGetCPtr(angVelB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void updateRHS(float timeStep) {
    BTPhysics_im.btGeneric6DofConstraint_updateRHS(cast(void*)swigCPtr, timeStep);
  }

  public btVector3 getAxis(int axis_index) const {
    btVector3 ret = new btVector3(BTPhysics_im.btGeneric6DofConstraint_getAxis(cast(void*)swigCPtr, axis_index), true);
    return ret;
  }

  public float getAngle(int axis_index) const {
    auto ret = BTPhysics_im.btGeneric6DofConstraint_getAngle(cast(void*)swigCPtr, axis_index);
    return ret;
  }

  public float getRelativePivotPosition(int axis_index) const {
    auto ret = BTPhysics_im.btGeneric6DofConstraint_getRelativePivotPosition(cast(void*)swigCPtr, axis_index);
    return ret;
  }

  public void setFrames(btTransform frameA, btTransform frameB) {
    BTPhysics_im.btGeneric6DofConstraint_setFrames(cast(void*)swigCPtr, btTransform.swigGetCPtr(frameA), btTransform.swigGetCPtr(frameB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public bool testAngularLimitMotor(int axis_index) {
    bool ret = BTPhysics_im.btGeneric6DofConstraint_testAngularLimitMotor(cast(void*)swigCPtr, axis_index) ? true : false;
    return ret;
  }

  public void setLinearLowerLimit(btVector3 linearLower) {
    BTPhysics_im.btGeneric6DofConstraint_setLinearLowerLimit(cast(void*)swigCPtr, btVector3.swigGetCPtr(linearLower));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getLinearLowerLimit(btVector3 linearLower) {
    BTPhysics_im.btGeneric6DofConstraint_getLinearLowerLimit(cast(void*)swigCPtr, btVector3.swigGetCPtr(linearLower));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setLinearUpperLimit(btVector3 linearUpper) {
    BTPhysics_im.btGeneric6DofConstraint_setLinearUpperLimit(cast(void*)swigCPtr, btVector3.swigGetCPtr(linearUpper));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getLinearUpperLimit(btVector3 linearUpper) {
    BTPhysics_im.btGeneric6DofConstraint_getLinearUpperLimit(cast(void*)swigCPtr, btVector3.swigGetCPtr(linearUpper));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setAngularLowerLimit(btVector3 angularLower) {
    BTPhysics_im.btGeneric6DofConstraint_setAngularLowerLimit(cast(void*)swigCPtr, btVector3.swigGetCPtr(angularLower));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getAngularLowerLimit(btVector3 angularLower) {
    BTPhysics_im.btGeneric6DofConstraint_getAngularLowerLimit(cast(void*)swigCPtr, btVector3.swigGetCPtr(angularLower));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void setAngularUpperLimit(btVector3 angularUpper) {
    BTPhysics_im.btGeneric6DofConstraint_setAngularUpperLimit(cast(void*)swigCPtr, btVector3.swigGetCPtr(angularUpper));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void getAngularUpperLimit(btVector3 angularUpper) {
    BTPhysics_im.btGeneric6DofConstraint_getAngularUpperLimit(cast(void*)swigCPtr, btVector3.swigGetCPtr(angularUpper));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btRotationalLimitMotor getRotationalLimitMotor(int index) {
    void* cPtr = BTPhysics_im.btGeneric6DofConstraint_getRotationalLimitMotor(cast(void*)swigCPtr, index);
    btRotationalLimitMotor ret = (cPtr is null) ? null : new btRotationalLimitMotor(cPtr, false);
    return ret;
  }

  public btTranslationalLimitMotor getTranslationalLimitMotor() {
    void* cPtr = BTPhysics_im.btGeneric6DofConstraint_getTranslationalLimitMotor(cast(void*)swigCPtr);
    btTranslationalLimitMotor ret = (cPtr is null) ? null : new btTranslationalLimitMotor(cPtr, false);
    return ret;
  }

  public void setLimit(int axis, float lo, float hi) {
    BTPhysics_im.btGeneric6DofConstraint_setLimit(cast(void*)swigCPtr, axis, lo, hi);
  }

  public bool isLimited(int limitIndex) {
    bool ret = BTPhysics_im.btGeneric6DofConstraint_isLimited(cast(void*)swigCPtr, limitIndex) ? true : false;
    return ret;
  }

  public void calcAnchorPos() {
    BTPhysics_im.btGeneric6DofConstraint_calcAnchorPos(cast(void*)swigCPtr);
  }

  public int get_limit_motor_info2(btRotationalLimitMotor limot, btTransform transA, btTransform transB, btVector3 linVelA, btVector3 linVelB, btVector3 angVelA, btVector3 angVelB, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info, int row, btVector3 ax1, int rotational, int rotAllowed) {
    auto ret = BTPhysics_im.btGeneric6DofConstraint_get_limit_motor_info2__SWIG_0(cast(void*)swigCPtr, btRotationalLimitMotor.swigGetCPtr(limot), btTransform.swigGetCPtr(transA), btTransform.swigGetCPtr(transB), btVector3.swigGetCPtr(linVelA), btVector3.swigGetCPtr(linVelB), btVector3.swigGetCPtr(angVelA), btVector3.swigGetCPtr(angVelB), SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info), row, btVector3.swigGetCPtr(ax1), rotational, rotAllowed);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public int get_limit_motor_info2(btRotationalLimitMotor limot, btTransform transA, btTransform transB, btVector3 linVelA, btVector3 linVelB, btVector3 angVelA, btVector3 angVelB, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info, int row, btVector3 ax1, int rotational) {
    auto ret = BTPhysics_im.btGeneric6DofConstraint_get_limit_motor_info2__SWIG_1(cast(void*)swigCPtr, btRotationalLimitMotor.swigGetCPtr(limot), btTransform.swigGetCPtr(transA), btTransform.swigGetCPtr(transB), btVector3.swigGetCPtr(linVelA), btVector3.swigGetCPtr(linVelB), btVector3.swigGetCPtr(angVelA), btVector3.swigGetCPtr(angVelB), SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info), row, btVector3.swigGetCPtr(ax1), rotational);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool getUseFrameOffset() {
    bool ret = BTPhysics_im.btGeneric6DofConstraint_getUseFrameOffset(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setUseFrameOffset(bool frameOffsetOnOff) {
    BTPhysics_im.btGeneric6DofConstraint_setUseFrameOffset(cast(void*)swigCPtr, frameOffsetOnOff);
  }

  public override void setParam(int num, float value, int axis) {
    BTPhysics_im.btGeneric6DofConstraint_setParam__SWIG_0(cast(void*)swigCPtr, num, value, axis);
  }

  public override void setParam(int num, float value) {
    BTPhysics_im.btGeneric6DofConstraint_setParam__SWIG_1(cast(void*)swigCPtr, num, value);
  }

  public override float getParam(int num, int axis) const {
    auto ret = BTPhysics_im.btGeneric6DofConstraint_getParam__SWIG_0(cast(void*)swigCPtr, num, axis);
    return ret;
  }

  public override float getParam(int num) const {
    auto ret = BTPhysics_im.btGeneric6DofConstraint_getParam__SWIG_1(cast(void*)swigCPtr, num);
    return ret;
  }

  public void setAxis(btVector3 axis1, btVector3 axis2) {
    BTPhysics_im.btGeneric6DofConstraint_setAxis(cast(void*)swigCPtr, btVector3.swigGetCPtr(axis1), btVector3.swigGetCPtr(axis2));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btGeneric6DofConstraint_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btGeneric6DofConstraint_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btGeneric6DofConstraintData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btGeneric6DofConstraintData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btGeneric6DofConstraintData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_typeConstraintData(btTypedConstraintData value) @property {
    BTPhysics_im.btGeneric6DofConstraintData_m_typeConstraintData_set(cast(void*)swigCPtr, btTypedConstraintData.swigGetCPtr(value));
  }

  public btTypedConstraintData m_typeConstraintData() @property const {
    void* cPtr = BTPhysics_im.btGeneric6DofConstraintData_m_typeConstraintData_get(cast(void*)swigCPtr);
    btTypedConstraintData ret = (cPtr is null) ? null : new btTypedConstraintData(cPtr, false);
    return ret;
  }

  public void m_rbAFrame(btTransformFloatData value) @property {
    BTPhysics_im.btGeneric6DofConstraintData_m_rbAFrame_set(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(value));
  }

  public btTransformFloatData m_rbAFrame() @property const {
    void* cPtr = BTPhysics_im.btGeneric6DofConstraintData_m_rbAFrame_get(cast(void*)swigCPtr);
    btTransformFloatData ret = (cPtr is null) ? null : new btTransformFloatData(cPtr, false);
    return ret;
  }

  public void m_rbBFrame(btTransformFloatData value) @property {
    BTPhysics_im.btGeneric6DofConstraintData_m_rbBFrame_set(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(value));
  }

  public btTransformFloatData m_rbBFrame() @property const {
    void* cPtr = BTPhysics_im.btGeneric6DofConstraintData_m_rbBFrame_get(cast(void*)swigCPtr);
    btTransformFloatData ret = (cPtr is null) ? null : new btTransformFloatData(cPtr, false);
    return ret;
  }

  public void m_linearUpperLimit(btVector3FloatData value) @property {
    BTPhysics_im.btGeneric6DofConstraintData_m_linearUpperLimit_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_linearUpperLimit() @property const {
    void* cPtr = BTPhysics_im.btGeneric6DofConstraintData_m_linearUpperLimit_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_linearLowerLimit(btVector3FloatData value) @property {
    BTPhysics_im.btGeneric6DofConstraintData_m_linearLowerLimit_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_linearLowerLimit() @property const {
    void* cPtr = BTPhysics_im.btGeneric6DofConstraintData_m_linearLowerLimit_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_angularUpperLimit(btVector3FloatData value) @property {
    BTPhysics_im.btGeneric6DofConstraintData_m_angularUpperLimit_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_angularUpperLimit() @property const {
    void* cPtr = BTPhysics_im.btGeneric6DofConstraintData_m_angularUpperLimit_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_angularLowerLimit(btVector3FloatData value) @property {
    BTPhysics_im.btGeneric6DofConstraintData_m_angularLowerLimit_set(cast(void*)swigCPtr, btVector3FloatData.swigGetCPtr(value));
  }

  public btVector3FloatData m_angularLowerLimit() @property const {
    void* cPtr = BTPhysics_im.btGeneric6DofConstraintData_m_angularLowerLimit_get(cast(void*)swigCPtr);
    btVector3FloatData ret = (cPtr is null) ? null : new btVector3FloatData(cPtr, false);
    return ret;
  }

  public void m_useLinearReferenceFrameA(int value) @property {
    BTPhysics_im.btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set(cast(void*)swigCPtr, value);
  }

  public int m_useLinearReferenceFrameA() @property const {
    auto ret = BTPhysics_im.btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_useOffsetForConstraintFrame(int value) @property {
    BTPhysics_im.btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set(cast(void*)swigCPtr, value);
  }

  public int m_useOffsetForConstraintFrame() @property const {
    auto ret = BTPhysics_im.btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btGeneric6DofConstraintData(), true);
  }
}

enum btSliderFlags {
  BT_SLIDER_FLAGS_CFM_DIRLIN = (1 << 0),
  BT_SLIDER_FLAGS_ERP_DIRLIN = (1 << 1),
  BT_SLIDER_FLAGS_CFM_DIRANG = (1 << 2),
  BT_SLIDER_FLAGS_ERP_DIRANG = (1 << 3),
  BT_SLIDER_FLAGS_CFM_ORTLIN = (1 << 4),
  BT_SLIDER_FLAGS_ERP_ORTLIN = (1 << 5),
  BT_SLIDER_FLAGS_CFM_ORTANG = (1 << 6),
  BT_SLIDER_FLAGS_ERP_ORTANG = (1 << 7),
  BT_SLIDER_FLAGS_CFM_LIMLIN = (1 << 8),
  BT_SLIDER_FLAGS_ERP_LIMLIN = (1 << 9),
  BT_SLIDER_FLAGS_CFM_LIMANG = (1 << 10),
  BT_SLIDER_FLAGS_ERP_LIMANG = (1 << 11)
}

class btSliderConstraint : btTypedConstraint {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btSliderConstraint_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btSliderConstraint obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btSliderConstraint(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(btRigidBody rbA, btRigidBody rbB, btTransform frameInA, btTransform frameInB, bool useLinearReferenceFrameA) {
    this(BTPhysics_im.new_btSliderConstraint__SWIG_0(btRigidBody.swigGetCPtr(rbA), btRigidBody.swigGetCPtr(rbB), btTransform.swigGetCPtr(frameInA), btTransform.swigGetCPtr(frameInB), useLinearReferenceFrameA), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public this(btRigidBody rbB, btTransform frameInB, bool useLinearReferenceFrameA) {
    this(BTPhysics_im.new_btSliderConstraint__SWIG_1(btRigidBody.swigGetCPtr(rbB), btTransform.swigGetCPtr(frameInB), useLinearReferenceFrameA), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void getInfo1(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 info) {
    BTPhysics_im.btSliderConstraint_getInfo1(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.swigGetCPtr(info));
  }

  public void getInfo1NonVirtual(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 info) {
    BTPhysics_im.btSliderConstraint_getInfo1NonVirtual(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo1.swigGetCPtr(info));
  }

  public override void getInfo2(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info) {
    BTPhysics_im.btSliderConstraint_getInfo2(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info));
  }

  public void getInfo2NonVirtual(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info, btTransform transA, btTransform transB, btVector3 linVelA, btVector3 linVelB, float rbAinvMass, float rbBinvMass) {
    BTPhysics_im.btSliderConstraint_getInfo2NonVirtual(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info), btTransform.swigGetCPtr(transA), btTransform.swigGetCPtr(transB), btVector3.swigGetCPtr(linVelA), btVector3.swigGetCPtr(linVelB), rbAinvMass, rbBinvMass);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btRigidBody getRigidBodyA() const {
    btRigidBody ret = new btRigidBody(BTPhysics_im.btSliderConstraint_getRigidBodyA(cast(void*)swigCPtr), false);
    return ret;
  }

  alias btTypedConstraint.getRigidBodyA getRigidBodyA;

  public btRigidBody getRigidBodyB() const {
    btRigidBody ret = new btRigidBody(BTPhysics_im.btSliderConstraint_getRigidBodyB(cast(void*)swigCPtr), false);
    return ret;
  }

  alias btTypedConstraint.getRigidBodyB getRigidBodyB;

  public btTransform getCalculatedTransformA() const {
    btTransform ret = new btTransform(BTPhysics_im.btSliderConstraint_getCalculatedTransformA(cast(void*)swigCPtr), false);
    return ret;
  }

  public btTransform getCalculatedTransformB() const {
    btTransform ret = new btTransform(BTPhysics_im.btSliderConstraint_getCalculatedTransformB(cast(void*)swigCPtr), false);
    return ret;
  }

  public btTransform getFrameOffsetA() const {
    btTransform ret = new btTransform(BTPhysics_im.btSliderConstraint_getFrameOffsetA__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public btTransform getFrameOffsetB() const {
    btTransform ret = new btTransform(BTPhysics_im.btSliderConstraint_getFrameOffsetB__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public float getLowerLinLimit() {
    auto ret = BTPhysics_im.btSliderConstraint_getLowerLinLimit(cast(void*)swigCPtr);
    return ret;
  }

  public void setLowerLinLimit(float lowerLimit) {
    BTPhysics_im.btSliderConstraint_setLowerLinLimit(cast(void*)swigCPtr, lowerLimit);
  }

  public float getUpperLinLimit() {
    auto ret = BTPhysics_im.btSliderConstraint_getUpperLinLimit(cast(void*)swigCPtr);
    return ret;
  }

  public void setUpperLinLimit(float upperLimit) {
    BTPhysics_im.btSliderConstraint_setUpperLinLimit(cast(void*)swigCPtr, upperLimit);
  }

  public float getLowerAngLimit() {
    auto ret = BTPhysics_im.btSliderConstraint_getLowerAngLimit(cast(void*)swigCPtr);
    return ret;
  }

  public void setLowerAngLimit(float lowerLimit) {
    BTPhysics_im.btSliderConstraint_setLowerAngLimit(cast(void*)swigCPtr, lowerLimit);
  }

  public float getUpperAngLimit() {
    auto ret = BTPhysics_im.btSliderConstraint_getUpperAngLimit(cast(void*)swigCPtr);
    return ret;
  }

  public void setUpperAngLimit(float upperLimit) {
    BTPhysics_im.btSliderConstraint_setUpperAngLimit(cast(void*)swigCPtr, upperLimit);
  }

  public bool getUseLinearReferenceFrameA() {
    bool ret = BTPhysics_im.btSliderConstraint_getUseLinearReferenceFrameA(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public float getSoftnessDirLin() {
    auto ret = BTPhysics_im.btSliderConstraint_getSoftnessDirLin(cast(void*)swigCPtr);
    return ret;
  }

  public float getRestitutionDirLin() {
    auto ret = BTPhysics_im.btSliderConstraint_getRestitutionDirLin(cast(void*)swigCPtr);
    return ret;
  }

  public float getDampingDirLin() {
    auto ret = BTPhysics_im.btSliderConstraint_getDampingDirLin(cast(void*)swigCPtr);
    return ret;
  }

  public float getSoftnessDirAng() {
    auto ret = BTPhysics_im.btSliderConstraint_getSoftnessDirAng(cast(void*)swigCPtr);
    return ret;
  }

  public float getRestitutionDirAng() {
    auto ret = BTPhysics_im.btSliderConstraint_getRestitutionDirAng(cast(void*)swigCPtr);
    return ret;
  }

  public float getDampingDirAng() {
    auto ret = BTPhysics_im.btSliderConstraint_getDampingDirAng(cast(void*)swigCPtr);
    return ret;
  }

  public float getSoftnessLimLin() {
    auto ret = BTPhysics_im.btSliderConstraint_getSoftnessLimLin(cast(void*)swigCPtr);
    return ret;
  }

  public float getRestitutionLimLin() {
    auto ret = BTPhysics_im.btSliderConstraint_getRestitutionLimLin(cast(void*)swigCPtr);
    return ret;
  }

  public float getDampingLimLin() {
    auto ret = BTPhysics_im.btSliderConstraint_getDampingLimLin(cast(void*)swigCPtr);
    return ret;
  }

  public float getSoftnessLimAng() {
    auto ret = BTPhysics_im.btSliderConstraint_getSoftnessLimAng(cast(void*)swigCPtr);
    return ret;
  }

  public float getRestitutionLimAng() {
    auto ret = BTPhysics_im.btSliderConstraint_getRestitutionLimAng(cast(void*)swigCPtr);
    return ret;
  }

  public float getDampingLimAng() {
    auto ret = BTPhysics_im.btSliderConstraint_getDampingLimAng(cast(void*)swigCPtr);
    return ret;
  }

  public float getSoftnessOrthoLin() {
    auto ret = BTPhysics_im.btSliderConstraint_getSoftnessOrthoLin(cast(void*)swigCPtr);
    return ret;
  }

  public float getRestitutionOrthoLin() {
    auto ret = BTPhysics_im.btSliderConstraint_getRestitutionOrthoLin(cast(void*)swigCPtr);
    return ret;
  }

  public float getDampingOrthoLin() {
    auto ret = BTPhysics_im.btSliderConstraint_getDampingOrthoLin(cast(void*)swigCPtr);
    return ret;
  }

  public float getSoftnessOrthoAng() {
    auto ret = BTPhysics_im.btSliderConstraint_getSoftnessOrthoAng(cast(void*)swigCPtr);
    return ret;
  }

  public float getRestitutionOrthoAng() {
    auto ret = BTPhysics_im.btSliderConstraint_getRestitutionOrthoAng(cast(void*)swigCPtr);
    return ret;
  }

  public float getDampingOrthoAng() {
    auto ret = BTPhysics_im.btSliderConstraint_getDampingOrthoAng(cast(void*)swigCPtr);
    return ret;
  }

  public void setSoftnessDirLin(float softnessDirLin) {
    BTPhysics_im.btSliderConstraint_setSoftnessDirLin(cast(void*)swigCPtr, softnessDirLin);
  }

  public void setRestitutionDirLin(float restitutionDirLin) {
    BTPhysics_im.btSliderConstraint_setRestitutionDirLin(cast(void*)swigCPtr, restitutionDirLin);
  }

  public void setDampingDirLin(float dampingDirLin) {
    BTPhysics_im.btSliderConstraint_setDampingDirLin(cast(void*)swigCPtr, dampingDirLin);
  }

  public void setSoftnessDirAng(float softnessDirAng) {
    BTPhysics_im.btSliderConstraint_setSoftnessDirAng(cast(void*)swigCPtr, softnessDirAng);
  }

  public void setRestitutionDirAng(float restitutionDirAng) {
    BTPhysics_im.btSliderConstraint_setRestitutionDirAng(cast(void*)swigCPtr, restitutionDirAng);
  }

  public void setDampingDirAng(float dampingDirAng) {
    BTPhysics_im.btSliderConstraint_setDampingDirAng(cast(void*)swigCPtr, dampingDirAng);
  }

  public void setSoftnessLimLin(float softnessLimLin) {
    BTPhysics_im.btSliderConstraint_setSoftnessLimLin(cast(void*)swigCPtr, softnessLimLin);
  }

  public void setRestitutionLimLin(float restitutionLimLin) {
    BTPhysics_im.btSliderConstraint_setRestitutionLimLin(cast(void*)swigCPtr, restitutionLimLin);
  }

  public void setDampingLimLin(float dampingLimLin) {
    BTPhysics_im.btSliderConstraint_setDampingLimLin(cast(void*)swigCPtr, dampingLimLin);
  }

  public void setSoftnessLimAng(float softnessLimAng) {
    BTPhysics_im.btSliderConstraint_setSoftnessLimAng(cast(void*)swigCPtr, softnessLimAng);
  }

  public void setRestitutionLimAng(float restitutionLimAng) {
    BTPhysics_im.btSliderConstraint_setRestitutionLimAng(cast(void*)swigCPtr, restitutionLimAng);
  }

  public void setDampingLimAng(float dampingLimAng) {
    BTPhysics_im.btSliderConstraint_setDampingLimAng(cast(void*)swigCPtr, dampingLimAng);
  }

  public void setSoftnessOrthoLin(float softnessOrthoLin) {
    BTPhysics_im.btSliderConstraint_setSoftnessOrthoLin(cast(void*)swigCPtr, softnessOrthoLin);
  }

  public void setRestitutionOrthoLin(float restitutionOrthoLin) {
    BTPhysics_im.btSliderConstraint_setRestitutionOrthoLin(cast(void*)swigCPtr, restitutionOrthoLin);
  }

  public void setDampingOrthoLin(float dampingOrthoLin) {
    BTPhysics_im.btSliderConstraint_setDampingOrthoLin(cast(void*)swigCPtr, dampingOrthoLin);
  }

  public void setSoftnessOrthoAng(float softnessOrthoAng) {
    BTPhysics_im.btSliderConstraint_setSoftnessOrthoAng(cast(void*)swigCPtr, softnessOrthoAng);
  }

  public void setRestitutionOrthoAng(float restitutionOrthoAng) {
    BTPhysics_im.btSliderConstraint_setRestitutionOrthoAng(cast(void*)swigCPtr, restitutionOrthoAng);
  }

  public void setDampingOrthoAng(float dampingOrthoAng) {
    BTPhysics_im.btSliderConstraint_setDampingOrthoAng(cast(void*)swigCPtr, dampingOrthoAng);
  }

  public void setPoweredLinMotor(bool onOff) {
    BTPhysics_im.btSliderConstraint_setPoweredLinMotor(cast(void*)swigCPtr, onOff);
  }

  public bool getPoweredLinMotor() {
    bool ret = BTPhysics_im.btSliderConstraint_getPoweredLinMotor(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setTargetLinMotorVelocity(float targetLinMotorVelocity) {
    BTPhysics_im.btSliderConstraint_setTargetLinMotorVelocity(cast(void*)swigCPtr, targetLinMotorVelocity);
  }

  public float getTargetLinMotorVelocity() {
    auto ret = BTPhysics_im.btSliderConstraint_getTargetLinMotorVelocity(cast(void*)swigCPtr);
    return ret;
  }

  public void setMaxLinMotorForce(float maxLinMotorForce) {
    BTPhysics_im.btSliderConstraint_setMaxLinMotorForce(cast(void*)swigCPtr, maxLinMotorForce);
  }

  public float getMaxLinMotorForce() {
    auto ret = BTPhysics_im.btSliderConstraint_getMaxLinMotorForce(cast(void*)swigCPtr);
    return ret;
  }

  public void setPoweredAngMotor(bool onOff) {
    BTPhysics_im.btSliderConstraint_setPoweredAngMotor(cast(void*)swigCPtr, onOff);
  }

  public bool getPoweredAngMotor() {
    bool ret = BTPhysics_im.btSliderConstraint_getPoweredAngMotor(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setTargetAngMotorVelocity(float targetAngMotorVelocity) {
    BTPhysics_im.btSliderConstraint_setTargetAngMotorVelocity(cast(void*)swigCPtr, targetAngMotorVelocity);
  }

  public float getTargetAngMotorVelocity() {
    auto ret = BTPhysics_im.btSliderConstraint_getTargetAngMotorVelocity(cast(void*)swigCPtr);
    return ret;
  }

  public void setMaxAngMotorForce(float maxAngMotorForce) {
    BTPhysics_im.btSliderConstraint_setMaxAngMotorForce(cast(void*)swigCPtr, maxAngMotorForce);
  }

  public float getMaxAngMotorForce() {
    auto ret = BTPhysics_im.btSliderConstraint_getMaxAngMotorForce(cast(void*)swigCPtr);
    return ret;
  }

  public float getLinearPos() const {
    auto ret = BTPhysics_im.btSliderConstraint_getLinearPos(cast(void*)swigCPtr);
    return ret;
  }

  public float getAngularPos() const {
    auto ret = BTPhysics_im.btSliderConstraint_getAngularPos(cast(void*)swigCPtr);
    return ret;
  }

  public bool getSolveLinLimit() {
    bool ret = BTPhysics_im.btSliderConstraint_getSolveLinLimit(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public float getLinDepth() {
    auto ret = BTPhysics_im.btSliderConstraint_getLinDepth(cast(void*)swigCPtr);
    return ret;
  }

  public bool getSolveAngLimit() {
    bool ret = BTPhysics_im.btSliderConstraint_getSolveAngLimit(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public float getAngDepth() {
    auto ret = BTPhysics_im.btSliderConstraint_getAngDepth(cast(void*)swigCPtr);
    return ret;
  }

  public void calculateTransforms(btTransform transA, btTransform transB) {
    BTPhysics_im.btSliderConstraint_calculateTransforms(cast(void*)swigCPtr, btTransform.swigGetCPtr(transA), btTransform.swigGetCPtr(transB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void testLinLimits() {
    BTPhysics_im.btSliderConstraint_testLinLimits(cast(void*)swigCPtr);
  }

  public void testAngLimits() {
    BTPhysics_im.btSliderConstraint_testAngLimits(cast(void*)swigCPtr);
  }

  public btVector3 getAncorInA() {
    btVector3 ret = new btVector3(BTPhysics_im.btSliderConstraint_getAncorInA(cast(void*)swigCPtr), true);
    return ret;
  }

  public btVector3 getAncorInB() {
    btVector3 ret = new btVector3(BTPhysics_im.btSliderConstraint_getAncorInB(cast(void*)swigCPtr), true);
    return ret;
  }

  public bool getUseFrameOffset() {
    bool ret = BTPhysics_im.btSliderConstraint_getUseFrameOffset(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setUseFrameOffset(bool frameOffsetOnOff) {
    BTPhysics_im.btSliderConstraint_setUseFrameOffset(cast(void*)swigCPtr, frameOffsetOnOff);
  }

  public void setFrames(btTransform frameA, btTransform frameB) {
    BTPhysics_im.btSliderConstraint_setFrames(cast(void*)swigCPtr, btTransform.swigGetCPtr(frameA), btTransform.swigGetCPtr(frameB));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public override void setParam(int num, float value, int axis) {
    BTPhysics_im.btSliderConstraint_setParam__SWIG_0(cast(void*)swigCPtr, num, value, axis);
  }

  public override void setParam(int num, float value) {
    BTPhysics_im.btSliderConstraint_setParam__SWIG_1(cast(void*)swigCPtr, num, value);
  }

  public override float getParam(int num, int axis) const {
    auto ret = BTPhysics_im.btSliderConstraint_getParam__SWIG_0(cast(void*)swigCPtr, num, axis);
    return ret;
  }

  public override float getParam(int num) const {
    auto ret = BTPhysics_im.btSliderConstraint_getParam__SWIG_1(cast(void*)swigCPtr, num);
    return ret;
  }

  public override int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btSliderConstraint_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btSliderConstraint_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btSliderConstraintData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btSliderConstraintData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btSliderConstraintData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_typeConstraintData(btTypedConstraintData value) @property {
    BTPhysics_im.btSliderConstraintData_m_typeConstraintData_set(cast(void*)swigCPtr, btTypedConstraintData.swigGetCPtr(value));
  }

  public btTypedConstraintData m_typeConstraintData() @property const {
    void* cPtr = BTPhysics_im.btSliderConstraintData_m_typeConstraintData_get(cast(void*)swigCPtr);
    btTypedConstraintData ret = (cPtr is null) ? null : new btTypedConstraintData(cPtr, false);
    return ret;
  }

  public void m_rbAFrame(btTransformFloatData value) @property {
    BTPhysics_im.btSliderConstraintData_m_rbAFrame_set(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(value));
  }

  public btTransformFloatData m_rbAFrame() @property const {
    void* cPtr = BTPhysics_im.btSliderConstraintData_m_rbAFrame_get(cast(void*)swigCPtr);
    btTransformFloatData ret = (cPtr is null) ? null : new btTransformFloatData(cPtr, false);
    return ret;
  }

  public void m_rbBFrame(btTransformFloatData value) @property {
    BTPhysics_im.btSliderConstraintData_m_rbBFrame_set(cast(void*)swigCPtr, btTransformFloatData.swigGetCPtr(value));
  }

  public btTransformFloatData m_rbBFrame() @property const {
    void* cPtr = BTPhysics_im.btSliderConstraintData_m_rbBFrame_get(cast(void*)swigCPtr);
    btTransformFloatData ret = (cPtr is null) ? null : new btTransformFloatData(cPtr, false);
    return ret;
  }

  public void m_linearUpperLimit(float value) @property {
    BTPhysics_im.btSliderConstraintData_m_linearUpperLimit_set(cast(void*)swigCPtr, value);
  }

  public float m_linearUpperLimit() @property const {
    auto ret = BTPhysics_im.btSliderConstraintData_m_linearUpperLimit_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_linearLowerLimit(float value) @property {
    BTPhysics_im.btSliderConstraintData_m_linearLowerLimit_set(cast(void*)swigCPtr, value);
  }

  public float m_linearLowerLimit() @property const {
    auto ret = BTPhysics_im.btSliderConstraintData_m_linearLowerLimit_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_angularUpperLimit(float value) @property {
    BTPhysics_im.btSliderConstraintData_m_angularUpperLimit_set(cast(void*)swigCPtr, value);
  }

  public float m_angularUpperLimit() @property const {
    auto ret = BTPhysics_im.btSliderConstraintData_m_angularUpperLimit_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_angularLowerLimit(float value) @property {
    BTPhysics_im.btSliderConstraintData_m_angularLowerLimit_set(cast(void*)swigCPtr, value);
  }

  public float m_angularLowerLimit() @property const {
    auto ret = BTPhysics_im.btSliderConstraintData_m_angularLowerLimit_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_useLinearReferenceFrameA(int value) @property {
    BTPhysics_im.btSliderConstraintData_m_useLinearReferenceFrameA_set(cast(void*)swigCPtr, value);
  }

  public int m_useLinearReferenceFrameA() @property const {
    auto ret = BTPhysics_im.btSliderConstraintData_m_useLinearReferenceFrameA_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_useOffsetForConstraintFrame(int value) @property {
    BTPhysics_im.btSliderConstraintData_m_useOffsetForConstraintFrame_set(cast(void*)swigCPtr, value);
  }

  public int m_useOffsetForConstraintFrame() @property const {
    auto ret = BTPhysics_im.btSliderConstraintData_m_useOffsetForConstraintFrame_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btSliderConstraintData(), true);
  }
}

class btGeneric6DofSpringConstraint : btGeneric6DofConstraint {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btGeneric6DofSpringConstraint_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btGeneric6DofSpringConstraint obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btGeneric6DofSpringConstraint(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(btRigidBody rbA, btRigidBody rbB, btTransform frameInA, btTransform frameInB, bool useLinearReferenceFrameA) {
    this(BTPhysics_im.new_btGeneric6DofSpringConstraint(btRigidBody.swigGetCPtr(rbA), btRigidBody.swigGetCPtr(rbB), btTransform.swigGetCPtr(frameInA), btTransform.swigGetCPtr(frameInB), useLinearReferenceFrameA), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public void enableSpring(int index, bool onOff) {
    BTPhysics_im.btGeneric6DofSpringConstraint_enableSpring(cast(void*)swigCPtr, index, onOff);
  }

  public void setStiffness(int index, float stiffness) {
    BTPhysics_im.btGeneric6DofSpringConstraint_setStiffness(cast(void*)swigCPtr, index, stiffness);
  }

  public void setDamping(int index, float damping) {
    BTPhysics_im.btGeneric6DofSpringConstraint_setDamping(cast(void*)swigCPtr, index, damping);
  }

  public void setEquilibriumPoint() {
    BTPhysics_im.btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_0(cast(void*)swigCPtr);
  }

  public void setEquilibriumPoint(int index) {
    BTPhysics_im.btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_1(cast(void*)swigCPtr, index);
  }

  public void setEquilibriumPoint(int index, float val) {
    BTPhysics_im.btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_2(cast(void*)swigCPtr, index, val);
  }

  public void setAxis(btVector3 axis1, btVector3 axis2) {
    BTPhysics_im.btGeneric6DofSpringConstraint_setAxis(cast(void*)swigCPtr, btVector3.swigGetCPtr(axis1), btVector3.swigGetCPtr(axis2));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  alias btGeneric6DofConstraint.setAxis setAxis;

  public override void getInfo2(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 info) {
    BTPhysics_im.btGeneric6DofSpringConstraint_getInfo2(cast(void*)swigCPtr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2.swigGetCPtr(info));
  }

  public override int calculateSerializeBufferSize() const {
    auto ret = BTPhysics_im.btGeneric6DofSpringConstraint_calculateSerializeBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public override string serialize(void* dataBuffer, btSerializer serializer) const {
    string ret = std.conv.to!string(BTPhysics_im.btGeneric6DofSpringConstraint_serialize(cast(void*)swigCPtr, cast(void*)dataBuffer, btSerializer.swigGetCPtr(serializer)));
    return ret;
  }
}

class btGeneric6DofSpringConstraintData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(btGeneric6DofSpringConstraintData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btGeneric6DofSpringConstraintData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void m_6dofData(btGeneric6DofConstraintData value) @property {
    BTPhysics_im.btGeneric6DofSpringConstraintData_m_6dofData_set(cast(void*)swigCPtr, btGeneric6DofConstraintData.swigGetCPtr(value));
  }

  public btGeneric6DofConstraintData m_6dofData() @property const {
    void* cPtr = BTPhysics_im.btGeneric6DofSpringConstraintData_m_6dofData_get(cast(void*)swigCPtr);
    btGeneric6DofConstraintData ret = (cPtr is null) ? null : new btGeneric6DofConstraintData(cPtr, false);
    return ret;
  }

  public void m_springEnabled(SWIGTYPE_p_int value) @property {
    BTPhysics_im.btGeneric6DofSpringConstraintData_m_springEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_int.swigGetCPtr(value));
  }

  public SWIGTYPE_p_int m_springEnabled() @property const {
    void* cPtr = BTPhysics_im.btGeneric6DofSpringConstraintData_m_springEnabled_get(cast(void*)swigCPtr);
    SWIGTYPE_p_int ret = (cPtr is null) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public void m_equilibriumPoint(SWIGTYPE_p_float value) @property {
    BTPhysics_im.btGeneric6DofSpringConstraintData_m_equilibriumPoint_set(cast(void*)swigCPtr, SWIGTYPE_p_float.swigGetCPtr(value));
  }

  public SWIGTYPE_p_float m_equilibriumPoint() @property const {
    void* cPtr = BTPhysics_im.btGeneric6DofSpringConstraintData_m_equilibriumPoint_get(cast(void*)swigCPtr);
    SWIGTYPE_p_float ret = (cPtr is null) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public void m_springStiffness(SWIGTYPE_p_float value) @property {
    BTPhysics_im.btGeneric6DofSpringConstraintData_m_springStiffness_set(cast(void*)swigCPtr, SWIGTYPE_p_float.swigGetCPtr(value));
  }

  public SWIGTYPE_p_float m_springStiffness() @property const {
    void* cPtr = BTPhysics_im.btGeneric6DofSpringConstraintData_m_springStiffness_get(cast(void*)swigCPtr);
    SWIGTYPE_p_float ret = (cPtr is null) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public void m_springDamping(SWIGTYPE_p_float value) @property {
    BTPhysics_im.btGeneric6DofSpringConstraintData_m_springDamping_set(cast(void*)swigCPtr, SWIGTYPE_p_float.swigGetCPtr(value));
  }

  public SWIGTYPE_p_float m_springDamping() @property const {
    void* cPtr = BTPhysics_im.btGeneric6DofSpringConstraintData_m_springDamping_get(cast(void*)swigCPtr);
    SWIGTYPE_p_float ret = (cPtr is null) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public this() {
    this(BTPhysics_im.new_btGeneric6DofSpringConstraintData(), true);
  }
}

class btUniversalConstraint : btGeneric6DofConstraint {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btUniversalConstraint_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btUniversalConstraint obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btUniversalConstraint(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(btRigidBody rbA, btRigidBody rbB, btVector3 anchor, btVector3 axis1, btVector3 axis2) {
    this(BTPhysics_im.new_btUniversalConstraint(btRigidBody.swigGetCPtr(rbA), btRigidBody.swigGetCPtr(rbB), btVector3.swigGetCPtr(anchor), btVector3.swigGetCPtr(axis1), btVector3.swigGetCPtr(axis2)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getAnchor() {
    btVector3 ret = new btVector3(BTPhysics_im.btUniversalConstraint_getAnchor(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getAnchor2() {
    btVector3 ret = new btVector3(BTPhysics_im.btUniversalConstraint_getAnchor2(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getAxis1() {
    btVector3 ret = new btVector3(BTPhysics_im.btUniversalConstraint_getAxis1(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getAxis2() {
    btVector3 ret = new btVector3(BTPhysics_im.btUniversalConstraint_getAxis2(cast(void*)swigCPtr), false);
    return ret;
  }

  public float getAngle1() {
    auto ret = BTPhysics_im.btUniversalConstraint_getAngle1(cast(void*)swigCPtr);
    return ret;
  }

  public float getAngle2() {
    auto ret = BTPhysics_im.btUniversalConstraint_getAngle2(cast(void*)swigCPtr);
    return ret;
  }

  public void setUpperLimit(float ang1max, float ang2max) {
    BTPhysics_im.btUniversalConstraint_setUpperLimit(cast(void*)swigCPtr, ang1max, ang2max);
  }

  public void setLowerLimit(float ang1min, float ang2min) {
    BTPhysics_im.btUniversalConstraint_setLowerLimit(cast(void*)swigCPtr, ang1min, ang2min);
  }

  public void setAxis(btVector3 axis1, btVector3 axis2) {
    BTPhysics_im.btUniversalConstraint_setAxis(cast(void*)swigCPtr, btVector3.swigGetCPtr(axis1), btVector3.swigGetCPtr(axis2));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  alias btGeneric6DofConstraint.setAxis setAxis;
}

class btHinge2Constraint : btGeneric6DofSpringConstraint {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btHinge2Constraint_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btHinge2Constraint obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btHinge2Constraint(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(btRigidBody rbA, btRigidBody rbB, btVector3 anchor, btVector3 axis1, btVector3 axis2) {
    this(BTPhysics_im.new_btHinge2Constraint(btRigidBody.swigGetCPtr(rbA), btRigidBody.swigGetCPtr(rbB), btVector3.swigGetCPtr(anchor), btVector3.swigGetCPtr(axis1), btVector3.swigGetCPtr(axis2)), true);
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
  }

  public btVector3 getAnchor() {
    btVector3 ret = new btVector3(BTPhysics_im.btHinge2Constraint_getAnchor(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getAnchor2() {
    btVector3 ret = new btVector3(BTPhysics_im.btHinge2Constraint_getAnchor2(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getAxis1() {
    btVector3 ret = new btVector3(BTPhysics_im.btHinge2Constraint_getAxis1(cast(void*)swigCPtr), false);
    return ret;
  }

  public btVector3 getAxis2() {
    btVector3 ret = new btVector3(BTPhysics_im.btHinge2Constraint_getAxis2(cast(void*)swigCPtr), false);
    return ret;
  }

  public float getAngle1() {
    auto ret = BTPhysics_im.btHinge2Constraint_getAngle1(cast(void*)swigCPtr);
    return ret;
  }

  public float getAngle2() {
    auto ret = BTPhysics_im.btHinge2Constraint_getAngle2(cast(void*)swigCPtr);
    return ret;
  }

  public void setUpperLimit(float ang1max) {
    BTPhysics_im.btHinge2Constraint_setUpperLimit(cast(void*)swigCPtr, ang1max);
  }

  public void setLowerLimit(float ang1min) {
    BTPhysics_im.btHinge2Constraint_setLowerLimit(cast(void*)swigCPtr, ang1min);
  }
}

class btSequentialImpulseConstraintSolver : btConstraintSolver {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(BTPhysics_im.btSequentialImpulseConstraintSolver_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(btSequentialImpulseConstraintSolver obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BTPhysics_im.delete_btSequentialImpulseConstraintSolver(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(BTPhysics_im.new_btSequentialImpulseConstraintSolver(), true);
  }

  public override float solveGroup(SWIGTYPE_p_p_btCollisionObject bodies, int numBodies, SWIGTYPE_p_p_btPersistentManifold manifold, int numManifolds, SWIGTYPE_p_p_btTypedConstraint constraints, int numConstraints, SWIGTYPE_p_btContactSolverInfo info, btIDebugDraw debugDrawer, SWIGTYPE_p_btStackAlloc stackAlloc, btDispatcher dispatcher) {
    auto ret = BTPhysics_im.btSequentialImpulseConstraintSolver_solveGroup(cast(void*)swigCPtr, SWIGTYPE_p_p_btCollisionObject.swigGetCPtr(bodies), numBodies, SWIGTYPE_p_p_btPersistentManifold.swigGetCPtr(manifold), numManifolds, SWIGTYPE_p_p_btTypedConstraint.swigGetCPtr(constraints), numConstraints, SWIGTYPE_p_btContactSolverInfo.swigGetCPtr(info), btIDebugDraw.swigGetCPtr(debugDrawer), SWIGTYPE_p_btStackAlloc.swigGetCPtr(stackAlloc), btDispatcher.swigGetCPtr(dispatcher));
    if (BTPhysics_im.SwigPendingException.isPending) throw BTPhysics_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void reset() {
    BTPhysics_im.btSequentialImpulseConstraintSolver_reset(cast(void*)swigCPtr);
  }

  public uint btRand2() {
    auto ret = BTPhysics_im.btSequentialImpulseConstraintSolver_btRand2(cast(void*)swigCPtr);
    return ret;
  }

  public int btRandInt2(int n) {
    auto ret = BTPhysics_im.btSequentialImpulseConstraintSolver_btRandInt2(cast(void*)swigCPtr, n);
    return ret;
  }

  public void setRandSeed(uint seed) {
    BTPhysics_im.btSequentialImpulseConstraintSolver_setRandSeed(cast(void*)swigCPtr, seed);
  }

  public uint getRandSeed() const {
    auto ret = BTPhysics_im.btSequentialImpulseConstraintSolver_getRandSeed(cast(void*)swigCPtr);
    return ret;
  }
}

class SWIGTYPE_p_p_btTypedConstraint {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_p_btTypedConstraint obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_PHY_ScalarType {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_PHY_ScalarType obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btCollisionAlgorithmConstructionInfo {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btCollisionAlgorithmConstructionInfo obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btConstraintArray {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btConstraintArray obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btTriangleInfoMapData {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btTriangleInfoMapData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btDbvt {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btDbvt obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_bool {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_bool obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_double {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_double obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btCollisionAlgorithmCreateFunc {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btCollisionAlgorithmCreateFunc obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btCollisionAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btCollisionAlgorithm obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btOverlappingPairCache {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btOverlappingPairCache obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btDbvtNode {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btDbvtNode obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_p_btDbvtProxy {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_p_btDbvtProxy obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_p_btCollisionObject {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_p_btCollisionObject obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btStridingMeshInterfaceData {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btStridingMeshInterfaceData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btPoolAllocator {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btPoolAllocator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_unsigned_int {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_unsigned_int obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btTriangleInfoMap {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btTriangleInfoMap obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btManifoldArray {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btManifoldArray obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btBroadphasePair {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btBroadphasePair obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btDynamicsWorldType {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btDynamicsWorldType obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btVoronoiSimplexSolver {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btVoronoiSimplexSolver obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btConvexPolyhedron {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btConvexPolyhedron obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btContactSolverInfo {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btContactSolverInfo obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btQuantizedBvhDoubleData {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btQuantizedBvhDoubleData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btMatrix3x3DoubleData {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btMatrix3x3DoubleData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_int {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_int obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_unsigned_char {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_unsigned_char obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btStackAlloc {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btStackAlloc obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btPersistentManifold {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btPersistentManifold obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_p_btPersistentManifold {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_p_btPersistentManifold obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btOptimizedBvh {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btOptimizedBvh obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btQuantizedBvhFloatData {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btQuantizedBvhFloatData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btMatrix3x3FloatData {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btMatrix3x3FloatData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btRigidBody__btRigidBodyConstructionInfo {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btRigidBody__btRigidBodyConstructionInfo obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btCollisionWorld__RayResultCallback {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btCollisionWorld__RayResultCallback obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btCollisionWorld__ConvexResultCallback {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btCollisionWorld__ConvexResultCallback obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btCollisionWorld__ContactResultCallback {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btCollisionWorld__ContactResultCallback obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btTriangleCallback {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btTriangleCallback obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btManifoldResult {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btManifoldResult obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_float {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_float obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btMatrix3x3 {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btMatrix3x3 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btStridingMeshInterface {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btStridingMeshInterface obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btBroadphaseProxy {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btBroadphaseProxy obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btActionInterface {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btActionInterface obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_btSimulationIslandManager {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_btSimulationIslandManager obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin BTPhysics_im.SwigOperatorDefinitions;
}
