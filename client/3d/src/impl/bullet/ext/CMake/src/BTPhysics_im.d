/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module BTPhysics_im;

static import std.conv;

static import std.conv;
static import std.string;


private {
  version(linux) {
    version = Nix;
  } else version(darwin) {
    version = Nix;
  } else version(OSX) {
    version = Nix;
  } else version(FreeBSD) {
    version = Nix;
    version = freebsd;
  } else version(freebsd) {
    version = Nix;
  } else version(Unix) {
    version = Nix;
  } else version(Posix) {
    version = Nix;
  }

  version(Tango) {
    static import tango.stdc.string;
    static import tango.stdc.stringz;

    version (PhobosCompatibility) {
    } else {
      alias char[] string;
      alias wchar[] wstring;
      alias dchar[] dstring;
    }
  } else {
    version(D_Version2) {
      static import std.conv;
    }
    static import std.string;
    static import std.c.string;
  }

  version(D_Version2) {
    mixin("alias const(char)* CCPTR;");
  } else {
    alias char* CCPTR;
  }

  CCPTR swigToCString(string str) {
    version(Tango) {
      return tango.stdc.stringz.toStringz(str);
    } else {
      return std.string.toStringz(str);
    }
  }

  string swigToDString(CCPTR cstr) {
    version(Tango) {
      return tango.stdc.stringz.fromStringz(cstr);
    } else {
      version(D_Version2) {
        mixin("return std.conv.to!string(cstr);");
      } else {
        return std.c.string.toString(cstr);
      }
    }
  }
}

class SwigSwigSharedLibLoadException : Exception {
  this(in string[] libNames, in string[] reasons) {
    string msg = "Failed to load one or more shared libraries:";
    foreach(i, n; libNames) {
      msg ~= "\n\t" ~ n ~ " - ";
      if(i < reasons.length)
        msg ~= reasons[i];
      else
        msg ~= "Unknown";
    }
    super(msg);
  }
}

class SwigSymbolLoadException : Exception {
  this(string SwigSharedLibName, string symbolName) {
    super("Failed to load symbol " ~ symbolName ~ " from shared library " ~ SwigSharedLibName);
    _symbolName = symbolName;
  }

  string symbolName() {
    return _symbolName;
  }

private:
  string _symbolName;
}

private {
  version(Nix) {
    version(freebsd) {
      // the dl* functions are in libc on FreeBSD
    }
    else {
      pragma(lib, "dl");
    }

    version(Tango) {
      import tango.sys.Common;
    } else version(linux) {
      import std.c.linux.linux;
    } else {
      extern(C) {
        const RTLD_NOW = 2;

        void *dlopen(CCPTR file, int mode);
        int dlclose(void* handle);
        void *dlsym(void* handle, CCPTR name);
        CCPTR dlerror();
      }
    }

    alias void* SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return dlopen(swigToCString(libName), RTLD_NOW);
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      dlclose(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return dlsym(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      CCPTR err = dlerror();
      if (err is null) {
        return "Unknown Error";
      }
      return swigToDString(err);
    }
  } else version(Windows) {
    alias ushort WORD;
    alias uint DWORD;
    alias CCPTR LPCSTR;
    alias void* HMODULE;
    alias void* HLOCAL;
    alias int function() FARPROC;
    struct VA_LIST {}

    extern (Windows) {
      HMODULE LoadLibraryA(LPCSTR);
      FARPROC GetProcAddress(HMODULE, LPCSTR);
      void FreeLibrary(HMODULE);
      DWORD GetLastError();
      DWORD FormatMessageA(DWORD, in void*, DWORD, DWORD, LPCSTR, DWORD, VA_LIST*);
      HLOCAL LocalFree(HLOCAL);
    }

    DWORD MAKELANGID(WORD p, WORD s) {
      return (((cast(WORD)s) << 10) | cast(WORD)p);
    }

    enum {
      LANG_NEUTRAL                    = 0,
      SUBLANG_DEFAULT                 = 1,
      FORMAT_MESSAGE_ALLOCATE_BUFFER  = 256,
      FORMAT_MESSAGE_IGNORE_INSERTS   = 512,
      FORMAT_MESSAGE_FROM_SYSTEM      = 4096
    }

    alias HMODULE SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return LoadLibraryA(swigToCString(libName));
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      FreeLibrary(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return GetProcAddress(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      DWORD errcode = GetLastError();

      LPCSTR msgBuf;
      DWORD i = FormatMessageA(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
        FORMAT_MESSAGE_FROM_SYSTEM |
        FORMAT_MESSAGE_IGNORE_INSERTS,
        null,
        errcode,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        cast(LPCSTR)&msgBuf,
        0,
        null);

      string text = swigToDString(msgBuf);
      LocalFree(cast(HLOCAL)msgBuf);

      if (i >= 2) {
        i -= 2;
      }
      return text[0 .. i];
    }
  } else {
    static assert(0, "Operating system not supported by the wrapper loading code.");
  }

  final class SwigSharedLib {
    void load(string[] names) {
      if (_hlib !is null) return;

      string[] failedLibs;
      string[] reasons;

      foreach(n; names) {
        _hlib = swigLoadSharedLib(n);
        if (_hlib is null) {
          failedLibs ~= n;
          reasons ~= swigGetErrorStr();
          continue;
        }
        _name = n;
        break;
      }

      if (_hlib is null) {
        throw new SwigSwigSharedLibLoadException(failedLibs, reasons);
      }
    }

    void* loadSymbol(string symbolName, bool doThrow = true) {
      void* sym = swigGetSymbol(_hlib, symbolName);
      if(doThrow && (sym is null)) {
        throw new SwigSymbolLoadException(_name, symbolName);
      }
      return sym;
    }

    void unload() {
      if(_hlib !is null) {
        swigUnloadSharedLib(_hlib);
        _hlib = null;
      }
    }

  private:
    string _name;
    SwigSharedLibHandle _hlib;
  }
}

static this() {
  string[] possibleFileNames;
  version (Posix) {
    version (OSX) {
      possibleFileNames ~= ["libBulletD.dylib", "libBulletD.bundle"];
    }
    possibleFileNames ~= ["libBulletD.so"];
  } else version (Windows) {
    possibleFileNames ~= ["BulletD.dll", "libBulletD.so"];
  } else {
    static assert(false, "Operating system not supported by the wrapper loading code.");
  }

  auto library = new SwigSharedLib;
  library.load(possibleFileNames);

  string bindCode(string functionPointer, string symbol) {
    return functionPointer ~ " = cast(typeof(" ~ functionPointer ~
      "))library.loadSymbol(`" ~ symbol ~ "`);";
  }

  //#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
  mixin(bindCode("swigRegisterExceptionCallbacks", "SWIGRegisterExceptionCallbacks_BTPhysics"));
  //#endif // SWIG_D_NO_EXCEPTION_HELPER
  //#if !defined(SWIG_D_NO_STRING_HELPER)
  mixin(bindCode("swigRegisterStringCallback", "SWIGRegisterStringCallback_BTPhysics"));
  //#endif // SWIG_D_NO_STRING_HELPER
  
  mixin(bindCode("BT_BULLET_VERSION_get", "D_BT_BULLET_VERSION_get"));
  mixin(bindCode("btGetVersion", "D_btGetVersion"));
  mixin(bindCode("BT_LARGE_FLOAT_get", "D_BT_LARGE_FLOAT_get"));
  mixin(bindCode("btSqrt", "D_btSqrt"));
  mixin(bindCode("btFabs", "D_btFabs"));
  mixin(bindCode("btCos", "D_btCos"));
  mixin(bindCode("btSin", "D_btSin"));
  mixin(bindCode("btTan", "D_btTan"));
  mixin(bindCode("btAcos", "D_btAcos"));
  mixin(bindCode("btAsin", "D_btAsin"));
  mixin(bindCode("btAtan", "D_btAtan"));
  mixin(bindCode("btAtan2", "D_btAtan2"));
  mixin(bindCode("btExp", "D_btExp"));
  mixin(bindCode("btLog", "D_btLog"));
  mixin(bindCode("btPow", "D_btPow"));
  mixin(bindCode("btFmod", "D_btFmod"));
  mixin(bindCode("btAtan2Fast", "D_btAtan2Fast"));
  mixin(bindCode("btFuzzyZero", "D_btFuzzyZero"));
  mixin(bindCode("btEqual", "D_btEqual"));
  mixin(bindCode("btGreaterEqual", "D_btGreaterEqual"));
  mixin(bindCode("btIsNegative", "D_btIsNegative"));
  mixin(bindCode("btRadians", "D_btRadians"));
  mixin(bindCode("btDegrees", "D_btDegrees"));
  mixin(bindCode("btFsel", "D_btFsel"));
  mixin(bindCode("btMachineIsLittleEndian", "D_btMachineIsLittleEndian"));
  mixin(bindCode("btSelect__SWIG_0", "D_btSelect__SWIG_0"));
  mixin(bindCode("btSelect__SWIG_1", "D_btSelect__SWIG_1"));
  mixin(bindCode("btSelect__SWIG_2", "D_btSelect__SWIG_2"));
  mixin(bindCode("btSwapEndian__SWIG_0", "D_btSwapEndian__SWIG_0"));
  mixin(bindCode("btSwapEndian__SWIG_1", "D_btSwapEndian__SWIG_1"));
  mixin(bindCode("btSwapEndian__SWIG_2", "D_btSwapEndian__SWIG_2"));
  mixin(bindCode("btSwapEndian__SWIG_3", "D_btSwapEndian__SWIG_3"));
  mixin(bindCode("btSwapEndianFloat", "D_btSwapEndianFloat"));
  mixin(bindCode("btUnswapEndianFloat", "D_btUnswapEndianFloat"));
  mixin(bindCode("btSwapEndianDouble", "D_btSwapEndianDouble"));
  mixin(bindCode("btUnswapEndianDouble", "D_btUnswapEndianDouble"));
  mixin(bindCode("btNormalizeAngle", "D_btNormalizeAngle"));
  mixin(bindCode("new_btTypedObject", "D_new_btTypedObject"));
  mixin(bindCode("btTypedObject_m_objectType_set", "D_btTypedObject_m_objectType_set"));
  mixin(bindCode("btTypedObject_m_objectType_get", "D_btTypedObject_m_objectType_get"));
  mixin(bindCode("btTypedObject_getObjectType", "D_btTypedObject_getObjectType"));
  mixin(bindCode("delete_btTypedObject", "D_delete_btTypedObject"));
  mixin(bindCode("btVector3DataName_get", "D_btVector3DataName_get"));
  mixin(bindCode("btVector3_m_floats_set", "D_btVector3_m_floats_set"));
  mixin(bindCode("btVector3_m_floats_get", "D_btVector3_m_floats_get"));
  mixin(bindCode("new_btVector3__SWIG_0", "D_new_btVector3__SWIG_0"));
  mixin(bindCode("new_btVector3__SWIG_1", "D_new_btVector3__SWIG_1"));
  mixin(bindCode("btVector3_swigOpAddAssign", "D_btVector3_swigOpAddAssign"));
  mixin(bindCode("btVector3_swigOpSubAssign", "D_btVector3_swigOpSubAssign"));
  mixin(bindCode("btVector3_swigOpMulAssign__SWIG_0", "D_btVector3_swigOpMulAssign__SWIG_0"));
  mixin(bindCode("btVector3_swigOpDivAssign", "D_btVector3_swigOpDivAssign"));
  mixin(bindCode("btVector3_dot", "D_btVector3_dot"));
  mixin(bindCode("btVector3_length2", "D_btVector3_length2"));
  mixin(bindCode("btVector3_length", "D_btVector3_length"));
  mixin(bindCode("btVector3_distance2", "D_btVector3_distance2"));
  mixin(bindCode("btVector3_distance", "D_btVector3_distance"));
  mixin(bindCode("btVector3_safeNormalize", "D_btVector3_safeNormalize"));
  mixin(bindCode("btVector3_normalize", "D_btVector3_normalize"));
  mixin(bindCode("btVector3_normalized", "D_btVector3_normalized"));
  mixin(bindCode("btVector3_rotate", "D_btVector3_rotate"));
  mixin(bindCode("btVector3_angle", "D_btVector3_angle"));
  mixin(bindCode("btVector3_absolute", "D_btVector3_absolute"));
  mixin(bindCode("btVector3_cross", "D_btVector3_cross"));
  mixin(bindCode("btVector3_triple", "D_btVector3_triple"));
  mixin(bindCode("btVector3_minAxis", "D_btVector3_minAxis"));
  mixin(bindCode("btVector3_maxAxis", "D_btVector3_maxAxis"));
  mixin(bindCode("btVector3_furthestAxis", "D_btVector3_furthestAxis"));
  mixin(bindCode("btVector3_closestAxis", "D_btVector3_closestAxis"));
  mixin(bindCode("btVector3_setInterpolate3", "D_btVector3_setInterpolate3"));
  mixin(bindCode("btVector3_lerp", "D_btVector3_lerp"));
  mixin(bindCode("btVector3_swigOpMulAssign__SWIG_1", "D_btVector3_swigOpMulAssign__SWIG_1"));
  mixin(bindCode("btVector3_getX", "D_btVector3_getX"));
  mixin(bindCode("btVector3_getY", "D_btVector3_getY"));
  mixin(bindCode("btVector3_getZ", "D_btVector3_getZ"));
  mixin(bindCode("btVector3_setX", "D_btVector3_setX"));
  mixin(bindCode("btVector3_setY", "D_btVector3_setY"));
  mixin(bindCode("btVector3_setZ", "D_btVector3_setZ"));
  mixin(bindCode("btVector3_setW", "D_btVector3_setW"));
  mixin(bindCode("btVector3_x", "D_btVector3_x"));
  mixin(bindCode("btVector3_y", "D_btVector3_y"));
  mixin(bindCode("btVector3_z", "D_btVector3_z"));
  mixin(bindCode("btVector3_w", "D_btVector3_w"));
  mixin(bindCode("btVector3_swigOpEquals", "D_btVector3_swigOpEquals"));
  mixin(bindCode("btVector3_setMax", "D_btVector3_setMax"));
  mixin(bindCode("btVector3_setMin", "D_btVector3_setMin"));
  mixin(bindCode("btVector3_setValue", "D_btVector3_setValue"));
  mixin(bindCode("btVector3_getSkewSymmetricMatrix", "D_btVector3_getSkewSymmetricMatrix"));
  mixin(bindCode("btVector3_setZero", "D_btVector3_setZero"));
  mixin(bindCode("btVector3_isZero", "D_btVector3_isZero"));
  mixin(bindCode("btVector3_fuzzyZero", "D_btVector3_fuzzyZero"));
  mixin(bindCode("btVector3_serialize", "D_btVector3_serialize"));
  mixin(bindCode("btVector3_deSerialize", "D_btVector3_deSerialize"));
  mixin(bindCode("btVector3_serializeFloat", "D_btVector3_serializeFloat"));
  mixin(bindCode("btVector3_deSerializeFloat", "D_btVector3_deSerializeFloat"));
  mixin(bindCode("btVector3_serializeDouble", "D_btVector3_serializeDouble"));
  mixin(bindCode("btVector3_deSerializeDouble", "D_btVector3_deSerializeDouble"));
  mixin(bindCode("delete_btVector3", "D_delete_btVector3"));
  mixin(bindCode("btDot", "D_btDot"));
  mixin(bindCode("btDistance2", "D_btDistance2"));
  mixin(bindCode("btDistance", "D_btDistance"));
  mixin(bindCode("btAngle", "D_btAngle"));
  mixin(bindCode("btCross", "D_btCross"));
  mixin(bindCode("btTriple", "D_btTriple"));
  mixin(bindCode("lerp", "D_lerp"));
  mixin(bindCode("new_btVector4__SWIG_0", "D_new_btVector4__SWIG_0"));
  mixin(bindCode("new_btVector4__SWIG_1", "D_new_btVector4__SWIG_1"));
  mixin(bindCode("btVector4_absolute4", "D_btVector4_absolute4"));
  mixin(bindCode("btVector4_getW", "D_btVector4_getW"));
  mixin(bindCode("btVector4_maxAxis4", "D_btVector4_maxAxis4"));
  mixin(bindCode("btVector4_minAxis4", "D_btVector4_minAxis4"));
  mixin(bindCode("btVector4_closestAxis4", "D_btVector4_closestAxis4"));
  mixin(bindCode("btVector4_setValue", "D_btVector4_setValue"));
  mixin(bindCode("delete_btVector4", "D_delete_btVector4"));
  mixin(bindCode("btVector4_Upcast", "D_btVector4_Upcast"));
  mixin(bindCode("btSwapScalarEndian", "D_btSwapScalarEndian"));
  mixin(bindCode("btSwapVector3Endian", "D_btSwapVector3Endian"));
  mixin(bindCode("btUnSwapVector3Endian", "D_btUnSwapVector3Endian"));
  mixin(bindCode("btVector3FloatData_m_floats_set", "D_btVector3FloatData_m_floats_set"));
  mixin(bindCode("btVector3FloatData_m_floats_get", "D_btVector3FloatData_m_floats_get"));
  mixin(bindCode("new_btVector3FloatData", "D_new_btVector3FloatData"));
  mixin(bindCode("delete_btVector3FloatData", "D_delete_btVector3FloatData"));
  mixin(bindCode("btVector3DoubleData_m_floats_set", "D_btVector3DoubleData_m_floats_set"));
  mixin(bindCode("btVector3DoubleData_m_floats_get", "D_btVector3DoubleData_m_floats_get"));
  mixin(bindCode("new_btVector3DoubleData", "D_new_btVector3DoubleData"));
  mixin(bindCode("delete_btVector3DoubleData", "D_delete_btVector3DoubleData"));
  mixin(bindCode("new_btQuaternion__SWIG_0", "D_new_btQuaternion__SWIG_0"));
  mixin(bindCode("new_btQuaternion__SWIG_1", "D_new_btQuaternion__SWIG_1"));
  mixin(bindCode("new_btQuaternion__SWIG_2", "D_new_btQuaternion__SWIG_2"));
  mixin(bindCode("new_btQuaternion__SWIG_3", "D_new_btQuaternion__SWIG_3"));
  mixin(bindCode("btQuaternion_setRotation", "D_btQuaternion_setRotation"));
  mixin(bindCode("btQuaternion_setEuler", "D_btQuaternion_setEuler"));
  mixin(bindCode("btQuaternion_setEulerZYX", "D_btQuaternion_setEulerZYX"));
  mixin(bindCode("btQuaternion_swigOpAddAssign", "D_btQuaternion_swigOpAddAssign"));
  mixin(bindCode("btQuaternion_swigOpSubAssign", "D_btQuaternion_swigOpSubAssign"));
  mixin(bindCode("btQuaternion_swigOpMulAssign__SWIG_0", "D_btQuaternion_swigOpMulAssign__SWIG_0"));
  mixin(bindCode("btQuaternion_swigOpMulAssign__SWIG_1", "D_btQuaternion_swigOpMulAssign__SWIG_1"));
  mixin(bindCode("btQuaternion_dot", "D_btQuaternion_dot"));
  mixin(bindCode("btQuaternion_length2", "D_btQuaternion_length2"));
  mixin(bindCode("btQuaternion_length", "D_btQuaternion_length"));
  mixin(bindCode("btQuaternion_normalize", "D_btQuaternion_normalize"));
  mixin(bindCode("btQuaternion_swigOpMul", "D_btQuaternion_swigOpMul"));
  mixin(bindCode("btQuaternion_swigOpDiv", "D_btQuaternion_swigOpDiv"));
  mixin(bindCode("btQuaternion_swigOpDivAssign", "D_btQuaternion_swigOpDivAssign"));
  mixin(bindCode("btQuaternion_normalized", "D_btQuaternion_normalized"));
  mixin(bindCode("btQuaternion_angle", "D_btQuaternion_angle"));
  mixin(bindCode("btQuaternion_getAngle", "D_btQuaternion_getAngle"));
  mixin(bindCode("btQuaternion_getAxis", "D_btQuaternion_getAxis"));
  mixin(bindCode("btQuaternion_inverse", "D_btQuaternion_inverse"));
  mixin(bindCode("btQuaternion_swigOpAdd", "D_btQuaternion_swigOpAdd"));
  mixin(bindCode("btQuaternion_swigOpSub", "D_btQuaternion_swigOpSub"));
  mixin(bindCode("btQuaternion_swigOpNeg", "D_btQuaternion_swigOpNeg"));
  mixin(bindCode("btQuaternion_farthest", "D_btQuaternion_farthest"));
  mixin(bindCode("btQuaternion_nearest", "D_btQuaternion_nearest"));
  mixin(bindCode("btQuaternion_slerp", "D_btQuaternion_slerp"));
  mixin(bindCode("btQuaternion_getIdentity", "D_btQuaternion_getIdentity"));
  mixin(bindCode("btQuaternion_getW", "D_btQuaternion_getW"));
  mixin(bindCode("delete_btQuaternion", "D_delete_btQuaternion"));
  mixin(bindCode("dot", "D_dot"));
  mixin(bindCode("length", "D_length"));
  mixin(bindCode("angle", "D_angle"));
  mixin(bindCode("inverse", "D_inverse"));
  mixin(bindCode("slerp", "D_slerp"));
  mixin(bindCode("quatRotate", "D_quatRotate"));
  mixin(bindCode("shortestArcQuat", "D_shortestArcQuat"));
  mixin(bindCode("shortestArcQuatNormalize2", "D_shortestArcQuatNormalize2"));
  mixin(bindCode("new_btTransform__SWIG_0", "D_new_btTransform__SWIG_0"));
  mixin(bindCode("new_btTransform__SWIG_1", "D_new_btTransform__SWIG_1"));
  mixin(bindCode("new_btTransform__SWIG_2", "D_new_btTransform__SWIG_2"));
  mixin(bindCode("new_btTransform__SWIG_3", "D_new_btTransform__SWIG_3"));
  mixin(bindCode("new_btTransform__SWIG_4", "D_new_btTransform__SWIG_4"));
  mixin(bindCode("new_btTransform__SWIG_5", "D_new_btTransform__SWIG_5"));
  mixin(bindCode("btTransform_mult", "D_btTransform_mult"));
  mixin(bindCode("btTransform_opCall", "D_btTransform_opCall"));
  mixin(bindCode("btTransform_swigOpMul__SWIG_0", "D_btTransform_swigOpMul__SWIG_0"));
  mixin(bindCode("btTransform_swigOpMul__SWIG_1", "D_btTransform_swigOpMul__SWIG_1"));
  mixin(bindCode("btTransform_getBasis__SWIG_0", "D_btTransform_getBasis__SWIG_0"));
  mixin(bindCode("btTransform_getOrigin__SWIG_0", "D_btTransform_getOrigin__SWIG_0"));
  mixin(bindCode("btTransform_getRotation", "D_btTransform_getRotation"));
  mixin(bindCode("btTransform_setFromOpenGLMatrix", "D_btTransform_setFromOpenGLMatrix"));
  mixin(bindCode("btTransform_getOpenGLMatrix", "D_btTransform_getOpenGLMatrix"));
  mixin(bindCode("btTransform_setOrigin", "D_btTransform_setOrigin"));
  mixin(bindCode("btTransform_invXform", "D_btTransform_invXform"));
  mixin(bindCode("btTransform_setBasis", "D_btTransform_setBasis"));
  mixin(bindCode("btTransform_setRotation", "D_btTransform_setRotation"));
  mixin(bindCode("btTransform_setIdentity", "D_btTransform_setIdentity"));
  mixin(bindCode("btTransform_swigOpMulAssign", "D_btTransform_swigOpMulAssign"));
  mixin(bindCode("btTransform_inverse", "D_btTransform_inverse"));
  mixin(bindCode("btTransform_inverseTimes", "D_btTransform_inverseTimes"));
  mixin(bindCode("btTransform_swigOpMul__SWIG_2", "D_btTransform_swigOpMul__SWIG_2"));
  mixin(bindCode("btTransform_getIdentity", "D_btTransform_getIdentity"));
  mixin(bindCode("btTransform_serialize", "D_btTransform_serialize"));
  mixin(bindCode("btTransform_serializeFloat", "D_btTransform_serializeFloat"));
  mixin(bindCode("btTransform_deSerialize", "D_btTransform_deSerialize"));
  mixin(bindCode("btTransform_deSerializeDouble", "D_btTransform_deSerializeDouble"));
  mixin(bindCode("btTransform_deSerializeFloat", "D_btTransform_deSerializeFloat"));
  mixin(bindCode("delete_btTransform", "D_delete_btTransform"));
  mixin(bindCode("btTransformFloatData_m_basis_set", "D_btTransformFloatData_m_basis_set"));
  mixin(bindCode("btTransformFloatData_m_basis_get", "D_btTransformFloatData_m_basis_get"));
  mixin(bindCode("btTransformFloatData_m_origin_set", "D_btTransformFloatData_m_origin_set"));
  mixin(bindCode("btTransformFloatData_m_origin_get", "D_btTransformFloatData_m_origin_get"));
  mixin(bindCode("new_btTransformFloatData", "D_new_btTransformFloatData"));
  mixin(bindCode("delete_btTransformFloatData", "D_delete_btTransformFloatData"));
  mixin(bindCode("btTransformDoubleData_m_basis_set", "D_btTransformDoubleData_m_basis_set"));
  mixin(bindCode("btTransformDoubleData_m_basis_get", "D_btTransformDoubleData_m_basis_get"));
  mixin(bindCode("btTransformDoubleData_m_origin_set", "D_btTransformDoubleData_m_origin_set"));
  mixin(bindCode("btTransformDoubleData_m_origin_get", "D_btTransformDoubleData_m_origin_get"));
  mixin(bindCode("new_btTransformDoubleData", "D_new_btTransformDoubleData"));
  mixin(bindCode("delete_btTransformDoubleData", "D_delete_btTransformDoubleData"));
  mixin(bindCode("delete_btMotionState", "D_delete_btMotionState"));
  mixin(bindCode("btMotionState_getWorldTransform", "D_btMotionState_getWorldTransform"));
  mixin(bindCode("btMotionState_setWorldTransform", "D_btMotionState_setWorldTransform"));
  mixin(bindCode("btDefaultMotionState_m_graphicsWorldTrans_set", "D_btDefaultMotionState_m_graphicsWorldTrans_set"));
  mixin(bindCode("btDefaultMotionState_m_graphicsWorldTrans_get", "D_btDefaultMotionState_m_graphicsWorldTrans_get"));
  mixin(bindCode("btDefaultMotionState_m_centerOfMassOffset_set", "D_btDefaultMotionState_m_centerOfMassOffset_set"));
  mixin(bindCode("btDefaultMotionState_m_centerOfMassOffset_get", "D_btDefaultMotionState_m_centerOfMassOffset_get"));
  mixin(bindCode("btDefaultMotionState_m_startWorldTrans_set", "D_btDefaultMotionState_m_startWorldTrans_set"));
  mixin(bindCode("btDefaultMotionState_m_startWorldTrans_get", "D_btDefaultMotionState_m_startWorldTrans_get"));
  mixin(bindCode("btDefaultMotionState_m_userPointer_set", "D_btDefaultMotionState_m_userPointer_set"));
  mixin(bindCode("btDefaultMotionState_m_userPointer_get", "D_btDefaultMotionState_m_userPointer_get"));
  mixin(bindCode("new_btDefaultMotionState__SWIG_0", "D_new_btDefaultMotionState__SWIG_0"));
  mixin(bindCode("new_btDefaultMotionState__SWIG_1", "D_new_btDefaultMotionState__SWIG_1"));
  mixin(bindCode("new_btDefaultMotionState__SWIG_2", "D_new_btDefaultMotionState__SWIG_2"));
  mixin(bindCode("btDefaultMotionState_getWorldTransform", "D_btDefaultMotionState_getWorldTransform"));
  mixin(bindCode("btDefaultMotionState_setWorldTransform", "D_btDefaultMotionState_setWorldTransform"));
  mixin(bindCode("delete_btDefaultMotionState", "D_delete_btDefaultMotionState"));
  mixin(bindCode("btDefaultMotionState_Upcast", "D_btDefaultMotionState_Upcast"));
  mixin(bindCode("delete_btIDebugDraw", "D_delete_btIDebugDraw"));
  mixin(bindCode("btIDebugDraw_drawLine__SWIG_0", "D_btIDebugDraw_drawLine__SWIG_0"));
  mixin(bindCode("btIDebugDraw_drawLine__SWIG_1", "D_btIDebugDraw_drawLine__SWIG_1"));
  mixin(bindCode("btIDebugDraw_drawSphere__SWIG_0", "D_btIDebugDraw_drawSphere__SWIG_0"));
  mixin(bindCode("btIDebugDraw_drawSphere__SWIG_1", "D_btIDebugDraw_drawSphere__SWIG_1"));
  mixin(bindCode("btIDebugDraw_drawTriangle__SWIG_0", "D_btIDebugDraw_drawTriangle__SWIG_0"));
  mixin(bindCode("btIDebugDraw_drawTriangle__SWIG_1", "D_btIDebugDraw_drawTriangle__SWIG_1"));
  mixin(bindCode("btIDebugDraw_drawContactPoint", "D_btIDebugDraw_drawContactPoint"));
  mixin(bindCode("btIDebugDraw_reportErrorWarning", "D_btIDebugDraw_reportErrorWarning"));
  mixin(bindCode("btIDebugDraw_draw3dText", "D_btIDebugDraw_draw3dText"));
  mixin(bindCode("btIDebugDraw_setDebugMode", "D_btIDebugDraw_setDebugMode"));
  mixin(bindCode("btIDebugDraw_getDebugMode", "D_btIDebugDraw_getDebugMode"));
  mixin(bindCode("btIDebugDraw_drawAabb", "D_btIDebugDraw_drawAabb"));
  mixin(bindCode("btIDebugDraw_drawTransform", "D_btIDebugDraw_drawTransform"));
  mixin(bindCode("btIDebugDraw_drawArc__SWIG_0", "D_btIDebugDraw_drawArc__SWIG_0"));
  mixin(bindCode("btIDebugDraw_drawArc__SWIG_1", "D_btIDebugDraw_drawArc__SWIG_1"));
  mixin(bindCode("btIDebugDraw_drawSpherePatch__SWIG_0", "D_btIDebugDraw_drawSpherePatch__SWIG_0"));
  mixin(bindCode("btIDebugDraw_drawSpherePatch__SWIG_1", "D_btIDebugDraw_drawSpherePatch__SWIG_1"));
  mixin(bindCode("btIDebugDraw_drawBox__SWIG_0", "D_btIDebugDraw_drawBox__SWIG_0"));
  mixin(bindCode("btIDebugDraw_drawBox__SWIG_1", "D_btIDebugDraw_drawBox__SWIG_1"));
  mixin(bindCode("btIDebugDraw_drawCapsule", "D_btIDebugDraw_drawCapsule"));
  mixin(bindCode("btIDebugDraw_drawCylinder", "D_btIDebugDraw_drawCylinder"));
  mixin(bindCode("btIDebugDraw_drawCone", "D_btIDebugDraw_drawCone"));
  mixin(bindCode("btIDebugDraw_drawPlane", "D_btIDebugDraw_drawPlane"));
  mixin(bindCode("sBulletDNAstr_get", "D_sBulletDNAstr_get"));
  mixin(bindCode("sBulletDNAlen_set", "D_sBulletDNAlen_set"));
  mixin(bindCode("sBulletDNAlen_get", "D_sBulletDNAlen_get"));
  mixin(bindCode("sBulletDNAstr64_get", "D_sBulletDNAstr64_get"));
  mixin(bindCode("sBulletDNAlen64_set", "D_sBulletDNAlen64_set"));
  mixin(bindCode("sBulletDNAlen64_get", "D_sBulletDNAlen64_get"));
  mixin(bindCode("btStrLen", "D_btStrLen"));
  mixin(bindCode("btChunk_m_chunkCode_set", "D_btChunk_m_chunkCode_set"));
  mixin(bindCode("btChunk_m_chunkCode_get", "D_btChunk_m_chunkCode_get"));
  mixin(bindCode("btChunk_m_length_set", "D_btChunk_m_length_set"));
  mixin(bindCode("btChunk_m_length_get", "D_btChunk_m_length_get"));
  mixin(bindCode("btChunk_m_oldPtr_set", "D_btChunk_m_oldPtr_set"));
  mixin(bindCode("btChunk_m_oldPtr_get", "D_btChunk_m_oldPtr_get"));
  mixin(bindCode("btChunk_m_dna_nr_set", "D_btChunk_m_dna_nr_set"));
  mixin(bindCode("btChunk_m_dna_nr_get", "D_btChunk_m_dna_nr_get"));
  mixin(bindCode("btChunk_m_number_set", "D_btChunk_m_number_set"));
  mixin(bindCode("btChunk_m_number_get", "D_btChunk_m_number_get"));
  mixin(bindCode("new_btChunk", "D_new_btChunk"));
  mixin(bindCode("delete_btChunk", "D_delete_btChunk"));
  mixin(bindCode("delete_btSerializer", "D_delete_btSerializer"));
  mixin(bindCode("btSerializer_getBufferPointer", "D_btSerializer_getBufferPointer"));
  mixin(bindCode("btSerializer_getCurrentBufferSize", "D_btSerializer_getCurrentBufferSize"));
  mixin(bindCode("btSerializer_allocate", "D_btSerializer_allocate"));
  mixin(bindCode("btSerializer_finalizeChunk", "D_btSerializer_finalizeChunk"));
  mixin(bindCode("btSerializer_findPointer", "D_btSerializer_findPointer"));
  mixin(bindCode("btSerializer_getUniquePointer", "D_btSerializer_getUniquePointer"));
  mixin(bindCode("btSerializer_startSerialization", "D_btSerializer_startSerialization"));
  mixin(bindCode("btSerializer_finishSerialization", "D_btSerializer_finishSerialization"));
  mixin(bindCode("btSerializer_findNameForPointer", "D_btSerializer_findNameForPointer"));
  mixin(bindCode("btSerializer_registerNameForPointer", "D_btSerializer_registerNameForPointer"));
  mixin(bindCode("btSerializer_serializeName", "D_btSerializer_serializeName"));
  mixin(bindCode("btSerializer_getSerializationFlags", "D_btSerializer_getSerializationFlags"));
  mixin(bindCode("btSerializer_setSerializationFlags", "D_btSerializer_setSerializationFlags"));
  mixin(bindCode("BT_HEADER_LENGTH_get", "D_BT_HEADER_LENGTH_get"));
  mixin(bindCode("new_btPointerUid", "D_new_btPointerUid"));
  mixin(bindCode("delete_btPointerUid", "D_delete_btPointerUid"));
  mixin(bindCode("new_btDefaultSerializer__SWIG_0", "D_new_btDefaultSerializer__SWIG_0"));
  mixin(bindCode("new_btDefaultSerializer__SWIG_1", "D_new_btDefaultSerializer__SWIG_1"));
  mixin(bindCode("delete_btDefaultSerializer", "D_delete_btDefaultSerializer"));
  mixin(bindCode("btDefaultSerializer_writeHeader", "D_btDefaultSerializer_writeHeader"));
  mixin(bindCode("btDefaultSerializer_startSerialization", "D_btDefaultSerializer_startSerialization"));
  mixin(bindCode("btDefaultSerializer_finishSerialization", "D_btDefaultSerializer_finishSerialization"));
  mixin(bindCode("btDefaultSerializer_getUniquePointer", "D_btDefaultSerializer_getUniquePointer"));
  mixin(bindCode("btDefaultSerializer_getBufferPointer", "D_btDefaultSerializer_getBufferPointer"));
  mixin(bindCode("btDefaultSerializer_getCurrentBufferSize", "D_btDefaultSerializer_getCurrentBufferSize"));
  mixin(bindCode("btDefaultSerializer_finalizeChunk", "D_btDefaultSerializer_finalizeChunk"));
  mixin(bindCode("btDefaultSerializer_internalAlloc", "D_btDefaultSerializer_internalAlloc"));
  mixin(bindCode("btDefaultSerializer_allocate", "D_btDefaultSerializer_allocate"));
  mixin(bindCode("btDefaultSerializer_findNameForPointer", "D_btDefaultSerializer_findNameForPointer"));
  mixin(bindCode("btDefaultSerializer_registerNameForPointer", "D_btDefaultSerializer_registerNameForPointer"));
  mixin(bindCode("btDefaultSerializer_serializeName", "D_btDefaultSerializer_serializeName"));
  mixin(bindCode("btDefaultSerializer_getSerializationFlags", "D_btDefaultSerializer_getSerializationFlags"));
  mixin(bindCode("btDefaultSerializer_setSerializationFlags", "D_btDefaultSerializer_setSerializationFlags"));
  mixin(bindCode("btDefaultSerializer_Upcast", "D_btDefaultSerializer_Upcast"));
  mixin(bindCode("new_btCollisionWorld", "D_new_btCollisionWorld"));
  mixin(bindCode("delete_btCollisionWorld", "D_delete_btCollisionWorld"));
  mixin(bindCode("btCollisionWorld_setBroadphase", "D_btCollisionWorld_setBroadphase"));
  mixin(bindCode("btCollisionWorld_getBroadphase__SWIG_0", "D_btCollisionWorld_getBroadphase__SWIG_0"));
  mixin(bindCode("btCollisionWorld_getPairCache", "D_btCollisionWorld_getPairCache"));
  mixin(bindCode("btCollisionWorld_getDispatcher__SWIG_0", "D_btCollisionWorld_getDispatcher__SWIG_0"));
  mixin(bindCode("btCollisionWorld_updateSingleAabb", "D_btCollisionWorld_updateSingleAabb"));
  mixin(bindCode("btCollisionWorld_updateAabbs", "D_btCollisionWorld_updateAabbs"));
  mixin(bindCode("btCollisionWorld_setDebugDrawer", "D_btCollisionWorld_setDebugDrawer"));
  mixin(bindCode("btCollisionWorld_getDebugDrawer", "D_btCollisionWorld_getDebugDrawer"));
  mixin(bindCode("btCollisionWorld_debugDrawWorld", "D_btCollisionWorld_debugDrawWorld"));
  mixin(bindCode("btCollisionWorld_debugDrawObject", "D_btCollisionWorld_debugDrawObject"));
  mixin(bindCode("btCollisionWorld_getNumCollisionObjects", "D_btCollisionWorld_getNumCollisionObjects"));
  mixin(bindCode("btCollisionWorld_rayTest", "D_btCollisionWorld_rayTest"));
  mixin(bindCode("btCollisionWorld_convexSweepTest__SWIG_0", "D_btCollisionWorld_convexSweepTest__SWIG_0"));
  mixin(bindCode("btCollisionWorld_convexSweepTest__SWIG_1", "D_btCollisionWorld_convexSweepTest__SWIG_1"));
  mixin(bindCode("btCollisionWorld_contactTest", "D_btCollisionWorld_contactTest"));
  mixin(bindCode("btCollisionWorld_contactPairTest", "D_btCollisionWorld_contactPairTest"));
  mixin(bindCode("btCollisionWorld_rayTestSingle", "D_btCollisionWorld_rayTestSingle"));
  mixin(bindCode("btCollisionWorld_objectQuerySingle", "D_btCollisionWorld_objectQuerySingle"));
  mixin(bindCode("btCollisionWorld_addCollisionObject__SWIG_0", "D_btCollisionWorld_addCollisionObject__SWIG_0"));
  mixin(bindCode("btCollisionWorld_addCollisionObject__SWIG_1", "D_btCollisionWorld_addCollisionObject__SWIG_1"));
  mixin(bindCode("btCollisionWorld_addCollisionObject__SWIG_2", "D_btCollisionWorld_addCollisionObject__SWIG_2"));
  mixin(bindCode("btCollisionWorld_getCollisionObjectArray__SWIG_0", "D_btCollisionWorld_getCollisionObjectArray__SWIG_0"));
  mixin(bindCode("btCollisionWorld_removeCollisionObject", "D_btCollisionWorld_removeCollisionObject"));
  mixin(bindCode("btCollisionWorld_performDiscreteCollisionDetection", "D_btCollisionWorld_performDiscreteCollisionDetection"));
  mixin(bindCode("btCollisionWorld_getDispatchInfo__SWIG_0", "D_btCollisionWorld_getDispatchInfo__SWIG_0"));
  mixin(bindCode("btCollisionWorld_getForceUpdateAllAabbs", "D_btCollisionWorld_getForceUpdateAllAabbs"));
  mixin(bindCode("btCollisionWorld_setForceUpdateAllAabbs", "D_btCollisionWorld_setForceUpdateAllAabbs"));
  mixin(bindCode("btCollisionWorld_serialize", "D_btCollisionWorld_serialize"));
  mixin(bindCode("btCollisionWorld_getCollisionObject", "D_btCollisionWorld_getCollisionObject"));
  mixin(bindCode("ACTIVE_TAG_get", "D_ACTIVE_TAG_get"));
  mixin(bindCode("ISLAND_SLEEPING_get", "D_ISLAND_SLEEPING_get"));
  mixin(bindCode("WANTS_DEACTIVATION_get", "D_WANTS_DEACTIVATION_get"));
  mixin(bindCode("DISABLE_DEACTIVATION_get", "D_DISABLE_DEACTIVATION_get"));
  mixin(bindCode("DISABLE_SIMULATION_get", "D_DISABLE_SIMULATION_get"));
  mixin(bindCode("btCollisionObjectDataName_get", "D_btCollisionObjectDataName_get"));
  mixin(bindCode("btCollisionObject_mergesSimulationIslands", "D_btCollisionObject_mergesSimulationIslands"));
  mixin(bindCode("btCollisionObject_getAnisotropicFriction", "D_btCollisionObject_getAnisotropicFriction"));
  mixin(bindCode("btCollisionObject_setAnisotropicFriction", "D_btCollisionObject_setAnisotropicFriction"));
  mixin(bindCode("btCollisionObject_hasAnisotropicFriction", "D_btCollisionObject_hasAnisotropicFriction"));
  mixin(bindCode("btCollisionObject_setContactProcessingThreshold", "D_btCollisionObject_setContactProcessingThreshold"));
  mixin(bindCode("btCollisionObject_getContactProcessingThreshold", "D_btCollisionObject_getContactProcessingThreshold"));
  mixin(bindCode("btCollisionObject_isStaticObject", "D_btCollisionObject_isStaticObject"));
  mixin(bindCode("btCollisionObject_isKinematicObject", "D_btCollisionObject_isKinematicObject"));
  mixin(bindCode("btCollisionObject_isStaticOrKinematicObject", "D_btCollisionObject_isStaticOrKinematicObject"));
  mixin(bindCode("btCollisionObject_hasContactResponse", "D_btCollisionObject_hasContactResponse"));
  mixin(bindCode("new_btCollisionObject", "D_new_btCollisionObject"));
  mixin(bindCode("delete_btCollisionObject", "D_delete_btCollisionObject"));
  mixin(bindCode("btCollisionObject_setCollisionShape", "D_btCollisionObject_setCollisionShape"));
  mixin(bindCode("btCollisionObject_getCollisionShape__SWIG_0", "D_btCollisionObject_getCollisionShape__SWIG_0"));
  mixin(bindCode("btCollisionObject_getRootCollisionShape__SWIG_0", "D_btCollisionObject_getRootCollisionShape__SWIG_0"));
  mixin(bindCode("btCollisionObject_internalSetTemporaryCollisionShape", "D_btCollisionObject_internalSetTemporaryCollisionShape"));
  mixin(bindCode("btCollisionObject_internalGetExtensionPointer", "D_btCollisionObject_internalGetExtensionPointer"));
  mixin(bindCode("btCollisionObject_internalSetExtensionPointer", "D_btCollisionObject_internalSetExtensionPointer"));
  mixin(bindCode("btCollisionObject_getActivationState", "D_btCollisionObject_getActivationState"));
  mixin(bindCode("btCollisionObject_setActivationState", "D_btCollisionObject_setActivationState"));
  mixin(bindCode("btCollisionObject_setDeactivationTime", "D_btCollisionObject_setDeactivationTime"));
  mixin(bindCode("btCollisionObject_getDeactivationTime", "D_btCollisionObject_getDeactivationTime"));
  mixin(bindCode("btCollisionObject_forceActivationState", "D_btCollisionObject_forceActivationState"));
  mixin(bindCode("btCollisionObject_activate__SWIG_0", "D_btCollisionObject_activate__SWIG_0"));
  mixin(bindCode("btCollisionObject_activate__SWIG_1", "D_btCollisionObject_activate__SWIG_1"));
  mixin(bindCode("btCollisionObject_isActive", "D_btCollisionObject_isActive"));
  mixin(bindCode("btCollisionObject_setRestitution", "D_btCollisionObject_setRestitution"));
  mixin(bindCode("btCollisionObject_getRestitution", "D_btCollisionObject_getRestitution"));
  mixin(bindCode("btCollisionObject_setFriction", "D_btCollisionObject_setFriction"));
  mixin(bindCode("btCollisionObject_getFriction", "D_btCollisionObject_getFriction"));
  mixin(bindCode("btCollisionObject_getInternalType", "D_btCollisionObject_getInternalType"));
  mixin(bindCode("btCollisionObject_getWorldTransform__SWIG_0", "D_btCollisionObject_getWorldTransform__SWIG_0"));
  mixin(bindCode("btCollisionObject_setWorldTransform", "D_btCollisionObject_setWorldTransform"));
  mixin(bindCode("btCollisionObject_getBroadphaseHandle__SWIG_0", "D_btCollisionObject_getBroadphaseHandle__SWIG_0"));
  mixin(bindCode("btCollisionObject_setBroadphaseHandle", "D_btCollisionObject_setBroadphaseHandle"));
  mixin(bindCode("btCollisionObject_getInterpolationWorldTransform__SWIG_0", "D_btCollisionObject_getInterpolationWorldTransform__SWIG_0"));
  mixin(bindCode("btCollisionObject_setInterpolationWorldTransform", "D_btCollisionObject_setInterpolationWorldTransform"));
  mixin(bindCode("btCollisionObject_setInterpolationLinearVelocity", "D_btCollisionObject_setInterpolationLinearVelocity"));
  mixin(bindCode("btCollisionObject_setInterpolationAngularVelocity", "D_btCollisionObject_setInterpolationAngularVelocity"));
  mixin(bindCode("btCollisionObject_getInterpolationLinearVelocity", "D_btCollisionObject_getInterpolationLinearVelocity"));
  mixin(bindCode("btCollisionObject_getInterpolationAngularVelocity", "D_btCollisionObject_getInterpolationAngularVelocity"));
  mixin(bindCode("btCollisionObject_getIslandTag", "D_btCollisionObject_getIslandTag"));
  mixin(bindCode("btCollisionObject_setIslandTag", "D_btCollisionObject_setIslandTag"));
  mixin(bindCode("btCollisionObject_getCompanionId", "D_btCollisionObject_getCompanionId"));
  mixin(bindCode("btCollisionObject_setCompanionId", "D_btCollisionObject_setCompanionId"));
  mixin(bindCode("btCollisionObject_getHitFraction", "D_btCollisionObject_getHitFraction"));
  mixin(bindCode("btCollisionObject_setHitFraction", "D_btCollisionObject_setHitFraction"));
  mixin(bindCode("btCollisionObject_getCollisionFlags", "D_btCollisionObject_getCollisionFlags"));
  mixin(bindCode("btCollisionObject_setCollisionFlags", "D_btCollisionObject_setCollisionFlags"));
  mixin(bindCode("btCollisionObject_getCcdSweptSphereRadius", "D_btCollisionObject_getCcdSweptSphereRadius"));
  mixin(bindCode("btCollisionObject_setCcdSweptSphereRadius", "D_btCollisionObject_setCcdSweptSphereRadius"));
  mixin(bindCode("btCollisionObject_getCcdMotionThreshold", "D_btCollisionObject_getCcdMotionThreshold"));
  mixin(bindCode("btCollisionObject_getCcdSquareMotionThreshold", "D_btCollisionObject_getCcdSquareMotionThreshold"));
  mixin(bindCode("btCollisionObject_setCcdMotionThreshold", "D_btCollisionObject_setCcdMotionThreshold"));
  mixin(bindCode("btCollisionObject_getUserPointer", "D_btCollisionObject_getUserPointer"));
  mixin(bindCode("btCollisionObject_setUserPointer", "D_btCollisionObject_setUserPointer"));
  mixin(bindCode("btCollisionObject_checkCollideWith", "D_btCollisionObject_checkCollideWith"));
  mixin(bindCode("btCollisionObject_calculateSerializeBufferSize", "D_btCollisionObject_calculateSerializeBufferSize"));
  mixin(bindCode("btCollisionObject_serialize", "D_btCollisionObject_serialize"));
  mixin(bindCode("btCollisionObject_serializeSingleObject", "D_btCollisionObject_serializeSingleObject"));
  mixin(bindCode("btCollisionObjectDoubleData_m_broadphaseHandle_set", "D_btCollisionObjectDoubleData_m_broadphaseHandle_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_broadphaseHandle_get", "D_btCollisionObjectDoubleData_m_broadphaseHandle_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_collisionShape_set", "D_btCollisionObjectDoubleData_m_collisionShape_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_collisionShape_get", "D_btCollisionObjectDoubleData_m_collisionShape_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_rootCollisionShape_set", "D_btCollisionObjectDoubleData_m_rootCollisionShape_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_rootCollisionShape_get", "D_btCollisionObjectDoubleData_m_rootCollisionShape_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_name_set", "D_btCollisionObjectDoubleData_m_name_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_name_get", "D_btCollisionObjectDoubleData_m_name_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_worldTransform_set", "D_btCollisionObjectDoubleData_m_worldTransform_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_worldTransform_get", "D_btCollisionObjectDoubleData_m_worldTransform_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_interpolationWorldTransform_set", "D_btCollisionObjectDoubleData_m_interpolationWorldTransform_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_interpolationWorldTransform_get", "D_btCollisionObjectDoubleData_m_interpolationWorldTransform_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_interpolationLinearVelocity_set", "D_btCollisionObjectDoubleData_m_interpolationLinearVelocity_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_interpolationLinearVelocity_get", "D_btCollisionObjectDoubleData_m_interpolationLinearVelocity_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_interpolationAngularVelocity_set", "D_btCollisionObjectDoubleData_m_interpolationAngularVelocity_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_interpolationAngularVelocity_get", "D_btCollisionObjectDoubleData_m_interpolationAngularVelocity_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_anisotropicFriction_set", "D_btCollisionObjectDoubleData_m_anisotropicFriction_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_anisotropicFriction_get", "D_btCollisionObjectDoubleData_m_anisotropicFriction_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_contactProcessingThreshold_set", "D_btCollisionObjectDoubleData_m_contactProcessingThreshold_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_contactProcessingThreshold_get", "D_btCollisionObjectDoubleData_m_contactProcessingThreshold_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_deactivationTime_set", "D_btCollisionObjectDoubleData_m_deactivationTime_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_deactivationTime_get", "D_btCollisionObjectDoubleData_m_deactivationTime_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_friction_set", "D_btCollisionObjectDoubleData_m_friction_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_friction_get", "D_btCollisionObjectDoubleData_m_friction_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_restitution_set", "D_btCollisionObjectDoubleData_m_restitution_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_restitution_get", "D_btCollisionObjectDoubleData_m_restitution_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_hitFraction_set", "D_btCollisionObjectDoubleData_m_hitFraction_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_hitFraction_get", "D_btCollisionObjectDoubleData_m_hitFraction_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set", "D_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get", "D_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_ccdMotionThreshold_set", "D_btCollisionObjectDoubleData_m_ccdMotionThreshold_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_ccdMotionThreshold_get", "D_btCollisionObjectDoubleData_m_ccdMotionThreshold_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_hasAnisotropicFriction_set", "D_btCollisionObjectDoubleData_m_hasAnisotropicFriction_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_hasAnisotropicFriction_get", "D_btCollisionObjectDoubleData_m_hasAnisotropicFriction_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_collisionFlags_set", "D_btCollisionObjectDoubleData_m_collisionFlags_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_collisionFlags_get", "D_btCollisionObjectDoubleData_m_collisionFlags_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_islandTag1_set", "D_btCollisionObjectDoubleData_m_islandTag1_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_islandTag1_get", "D_btCollisionObjectDoubleData_m_islandTag1_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_companionId_set", "D_btCollisionObjectDoubleData_m_companionId_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_companionId_get", "D_btCollisionObjectDoubleData_m_companionId_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_activationState1_set", "D_btCollisionObjectDoubleData_m_activationState1_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_activationState1_get", "D_btCollisionObjectDoubleData_m_activationState1_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_internalType_set", "D_btCollisionObjectDoubleData_m_internalType_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_internalType_get", "D_btCollisionObjectDoubleData_m_internalType_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_checkCollideWith_set", "D_btCollisionObjectDoubleData_m_checkCollideWith_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_checkCollideWith_get", "D_btCollisionObjectDoubleData_m_checkCollideWith_get"));
  mixin(bindCode("btCollisionObjectDoubleData_m_padding_set", "D_btCollisionObjectDoubleData_m_padding_set"));
  mixin(bindCode("btCollisionObjectDoubleData_m_padding_get", "D_btCollisionObjectDoubleData_m_padding_get"));
  mixin(bindCode("new_btCollisionObjectDoubleData", "D_new_btCollisionObjectDoubleData"));
  mixin(bindCode("delete_btCollisionObjectDoubleData", "D_delete_btCollisionObjectDoubleData"));
  mixin(bindCode("btCollisionObjectFloatData_m_broadphaseHandle_set", "D_btCollisionObjectFloatData_m_broadphaseHandle_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_broadphaseHandle_get", "D_btCollisionObjectFloatData_m_broadphaseHandle_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_collisionShape_set", "D_btCollisionObjectFloatData_m_collisionShape_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_collisionShape_get", "D_btCollisionObjectFloatData_m_collisionShape_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_rootCollisionShape_set", "D_btCollisionObjectFloatData_m_rootCollisionShape_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_rootCollisionShape_get", "D_btCollisionObjectFloatData_m_rootCollisionShape_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_name_set", "D_btCollisionObjectFloatData_m_name_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_name_get", "D_btCollisionObjectFloatData_m_name_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_worldTransform_set", "D_btCollisionObjectFloatData_m_worldTransform_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_worldTransform_get", "D_btCollisionObjectFloatData_m_worldTransform_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_interpolationWorldTransform_set", "D_btCollisionObjectFloatData_m_interpolationWorldTransform_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_interpolationWorldTransform_get", "D_btCollisionObjectFloatData_m_interpolationWorldTransform_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_interpolationLinearVelocity_set", "D_btCollisionObjectFloatData_m_interpolationLinearVelocity_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_interpolationLinearVelocity_get", "D_btCollisionObjectFloatData_m_interpolationLinearVelocity_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_interpolationAngularVelocity_set", "D_btCollisionObjectFloatData_m_interpolationAngularVelocity_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_interpolationAngularVelocity_get", "D_btCollisionObjectFloatData_m_interpolationAngularVelocity_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_anisotropicFriction_set", "D_btCollisionObjectFloatData_m_anisotropicFriction_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_anisotropicFriction_get", "D_btCollisionObjectFloatData_m_anisotropicFriction_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_contactProcessingThreshold_set", "D_btCollisionObjectFloatData_m_contactProcessingThreshold_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_contactProcessingThreshold_get", "D_btCollisionObjectFloatData_m_contactProcessingThreshold_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_deactivationTime_set", "D_btCollisionObjectFloatData_m_deactivationTime_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_deactivationTime_get", "D_btCollisionObjectFloatData_m_deactivationTime_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_friction_set", "D_btCollisionObjectFloatData_m_friction_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_friction_get", "D_btCollisionObjectFloatData_m_friction_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_restitution_set", "D_btCollisionObjectFloatData_m_restitution_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_restitution_get", "D_btCollisionObjectFloatData_m_restitution_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_hitFraction_set", "D_btCollisionObjectFloatData_m_hitFraction_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_hitFraction_get", "D_btCollisionObjectFloatData_m_hitFraction_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_ccdSweptSphereRadius_set", "D_btCollisionObjectFloatData_m_ccdSweptSphereRadius_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_ccdSweptSphereRadius_get", "D_btCollisionObjectFloatData_m_ccdSweptSphereRadius_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_ccdMotionThreshold_set", "D_btCollisionObjectFloatData_m_ccdMotionThreshold_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_ccdMotionThreshold_get", "D_btCollisionObjectFloatData_m_ccdMotionThreshold_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_hasAnisotropicFriction_set", "D_btCollisionObjectFloatData_m_hasAnisotropicFriction_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_hasAnisotropicFriction_get", "D_btCollisionObjectFloatData_m_hasAnisotropicFriction_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_collisionFlags_set", "D_btCollisionObjectFloatData_m_collisionFlags_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_collisionFlags_get", "D_btCollisionObjectFloatData_m_collisionFlags_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_islandTag1_set", "D_btCollisionObjectFloatData_m_islandTag1_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_islandTag1_get", "D_btCollisionObjectFloatData_m_islandTag1_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_companionId_set", "D_btCollisionObjectFloatData_m_companionId_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_companionId_get", "D_btCollisionObjectFloatData_m_companionId_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_activationState1_set", "D_btCollisionObjectFloatData_m_activationState1_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_activationState1_get", "D_btCollisionObjectFloatData_m_activationState1_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_internalType_set", "D_btCollisionObjectFloatData_m_internalType_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_internalType_get", "D_btCollisionObjectFloatData_m_internalType_get"));
  mixin(bindCode("btCollisionObjectFloatData_m_checkCollideWith_set", "D_btCollisionObjectFloatData_m_checkCollideWith_set"));
  mixin(bindCode("btCollisionObjectFloatData_m_checkCollideWith_get", "D_btCollisionObjectFloatData_m_checkCollideWith_get"));
  mixin(bindCode("new_btCollisionObjectFloatData", "D_new_btCollisionObjectFloatData"));
  mixin(bindCode("delete_btCollisionObjectFloatData", "D_delete_btCollisionObjectFloatData"));
  mixin(bindCode("delete_btCollisionShape", "D_delete_btCollisionShape"));
  mixin(bindCode("btCollisionShape_getAabb", "D_btCollisionShape_getAabb"));
  mixin(bindCode("btCollisionShape_getBoundingSphere", "D_btCollisionShape_getBoundingSphere"));
  mixin(bindCode("btCollisionShape_getAngularMotionDisc", "D_btCollisionShape_getAngularMotionDisc"));
  mixin(bindCode("btCollisionShape_getContactBreakingThreshold", "D_btCollisionShape_getContactBreakingThreshold"));
  mixin(bindCode("btCollisionShape_calculateTemporalAabb", "D_btCollisionShape_calculateTemporalAabb"));
  mixin(bindCode("btCollisionShape_isPolyhedral", "D_btCollisionShape_isPolyhedral"));
  mixin(bindCode("btCollisionShape_isConvex2d", "D_btCollisionShape_isConvex2d"));
  mixin(bindCode("btCollisionShape_isConvex", "D_btCollisionShape_isConvex"));
  mixin(bindCode("btCollisionShape_isNonMoving", "D_btCollisionShape_isNonMoving"));
  mixin(bindCode("btCollisionShape_isConcave", "D_btCollisionShape_isConcave"));
  mixin(bindCode("btCollisionShape_isCompound", "D_btCollisionShape_isCompound"));
  mixin(bindCode("btCollisionShape_isSoftBody", "D_btCollisionShape_isSoftBody"));
  mixin(bindCode("btCollisionShape_isInfinite", "D_btCollisionShape_isInfinite"));
  mixin(bindCode("btCollisionShape_setLocalScaling", "D_btCollisionShape_setLocalScaling"));
  mixin(bindCode("btCollisionShape_getLocalScaling", "D_btCollisionShape_getLocalScaling"));
  mixin(bindCode("btCollisionShape_calculateLocalInertia", "D_btCollisionShape_calculateLocalInertia"));
  mixin(bindCode("btCollisionShape_getName", "D_btCollisionShape_getName"));
  mixin(bindCode("btCollisionShape_getShapeType", "D_btCollisionShape_getShapeType"));
  mixin(bindCode("btCollisionShape_setMargin", "D_btCollisionShape_setMargin"));
  mixin(bindCode("btCollisionShape_getMargin", "D_btCollisionShape_getMargin"));
  mixin(bindCode("btCollisionShape_setUserPointer", "D_btCollisionShape_setUserPointer"));
  mixin(bindCode("btCollisionShape_getUserPointer", "D_btCollisionShape_getUserPointer"));
  mixin(bindCode("btCollisionShape_calculateSerializeBufferSize", "D_btCollisionShape_calculateSerializeBufferSize"));
  mixin(bindCode("btCollisionShape_serialize", "D_btCollisionShape_serialize"));
  mixin(bindCode("btCollisionShape_serializeSingleShape", "D_btCollisionShape_serializeSingleShape"));
  mixin(bindCode("btCollisionShapeData_m_name_set", "D_btCollisionShapeData_m_name_set"));
  mixin(bindCode("btCollisionShapeData_m_name_get", "D_btCollisionShapeData_m_name_get"));
  mixin(bindCode("btCollisionShapeData_m_shapeType_set", "D_btCollisionShapeData_m_shapeType_set"));
  mixin(bindCode("btCollisionShapeData_m_shapeType_get", "D_btCollisionShapeData_m_shapeType_get"));
  mixin(bindCode("btCollisionShapeData_m_padding_set", "D_btCollisionShapeData_m_padding_set"));
  mixin(bindCode("btCollisionShapeData_m_padding_get", "D_btCollisionShapeData_m_padding_get"));
  mixin(bindCode("new_btCollisionShapeData", "D_new_btCollisionShapeData"));
  mixin(bindCode("delete_btCollisionShapeData", "D_delete_btCollisionShapeData"));
  mixin(bindCode("MAX_PREFERRED_PENETRATION_DIRECTIONS_get", "D_MAX_PREFERRED_PENETRATION_DIRECTIONS_get"));
  mixin(bindCode("delete_btConvexShape", "D_delete_btConvexShape"));
  mixin(bindCode("btConvexShape_localGetSupportingVertex", "D_btConvexShape_localGetSupportingVertex"));
  mixin(bindCode("btConvexShape_localGetSupportingVertexWithoutMargin", "D_btConvexShape_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btConvexShape_localGetSupportVertexWithoutMarginNonVirtual", "D_btConvexShape_localGetSupportVertexWithoutMarginNonVirtual"));
  mixin(bindCode("btConvexShape_localGetSupportVertexNonVirtual", "D_btConvexShape_localGetSupportVertexNonVirtual"));
  mixin(bindCode("btConvexShape_getMarginNonVirtual", "D_btConvexShape_getMarginNonVirtual"));
  mixin(bindCode("btConvexShape_getAabbNonVirtual", "D_btConvexShape_getAabbNonVirtual"));
  mixin(bindCode("btConvexShape_project", "D_btConvexShape_project"));
  mixin(bindCode("btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin", "D_btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btConvexShape_getAabb", "D_btConvexShape_getAabb"));
  mixin(bindCode("btConvexShape_getAabbSlow", "D_btConvexShape_getAabbSlow"));
  mixin(bindCode("btConvexShape_setLocalScaling", "D_btConvexShape_setLocalScaling"));
  mixin(bindCode("btConvexShape_getLocalScaling", "D_btConvexShape_getLocalScaling"));
  mixin(bindCode("btConvexShape_setMargin", "D_btConvexShape_setMargin"));
  mixin(bindCode("btConvexShape_getMargin", "D_btConvexShape_getMargin"));
  mixin(bindCode("btConvexShape_getNumPreferredPenetrationDirections", "D_btConvexShape_getNumPreferredPenetrationDirections"));
  mixin(bindCode("btConvexShape_getPreferredPenetrationDirection", "D_btConvexShape_getPreferredPenetrationDirection"));
  mixin(bindCode("btConvexShape_Upcast", "D_btConvexShape_Upcast"));
  mixin(bindCode("delete_btConvexInternalShape", "D_delete_btConvexInternalShape"));
  mixin(bindCode("btConvexInternalShape_localGetSupportingVertex", "D_btConvexInternalShape_localGetSupportingVertex"));
  mixin(bindCode("btConvexInternalShape_getImplicitShapeDimensions", "D_btConvexInternalShape_getImplicitShapeDimensions"));
  mixin(bindCode("btConvexInternalShape_setImplicitShapeDimensions", "D_btConvexInternalShape_setImplicitShapeDimensions"));
  mixin(bindCode("btConvexInternalShape_setSafeMargin__SWIG_0", "D_btConvexInternalShape_setSafeMargin__SWIG_0"));
  mixin(bindCode("btConvexInternalShape_setSafeMargin__SWIG_1", "D_btConvexInternalShape_setSafeMargin__SWIG_1"));
  mixin(bindCode("btConvexInternalShape_setSafeMargin__SWIG_2", "D_btConvexInternalShape_setSafeMargin__SWIG_2"));
  mixin(bindCode("btConvexInternalShape_setSafeMargin__SWIG_3", "D_btConvexInternalShape_setSafeMargin__SWIG_3"));
  mixin(bindCode("btConvexInternalShape_getAabb", "D_btConvexInternalShape_getAabb"));
  mixin(bindCode("btConvexInternalShape_getAabbSlow", "D_btConvexInternalShape_getAabbSlow"));
  mixin(bindCode("btConvexInternalShape_setLocalScaling", "D_btConvexInternalShape_setLocalScaling"));
  mixin(bindCode("btConvexInternalShape_getLocalScaling", "D_btConvexInternalShape_getLocalScaling"));
  mixin(bindCode("btConvexInternalShape_getLocalScalingNV", "D_btConvexInternalShape_getLocalScalingNV"));
  mixin(bindCode("btConvexInternalShape_setMargin", "D_btConvexInternalShape_setMargin"));
  mixin(bindCode("btConvexInternalShape_getMargin", "D_btConvexInternalShape_getMargin"));
  mixin(bindCode("btConvexInternalShape_getMarginNV", "D_btConvexInternalShape_getMarginNV"));
  mixin(bindCode("btConvexInternalShape_getNumPreferredPenetrationDirections", "D_btConvexInternalShape_getNumPreferredPenetrationDirections"));
  mixin(bindCode("btConvexInternalShape_getPreferredPenetrationDirection", "D_btConvexInternalShape_getPreferredPenetrationDirection"));
  mixin(bindCode("btConvexInternalShape_calculateSerializeBufferSize", "D_btConvexInternalShape_calculateSerializeBufferSize"));
  mixin(bindCode("btConvexInternalShape_serialize", "D_btConvexInternalShape_serialize"));
  mixin(bindCode("btConvexInternalShape_Upcast", "D_btConvexInternalShape_Upcast"));
  mixin(bindCode("btConvexInternalShapeData_m_collisionShapeData_set", "D_btConvexInternalShapeData_m_collisionShapeData_set"));
  mixin(bindCode("btConvexInternalShapeData_m_collisionShapeData_get", "D_btConvexInternalShapeData_m_collisionShapeData_get"));
  mixin(bindCode("btConvexInternalShapeData_m_localScaling_set", "D_btConvexInternalShapeData_m_localScaling_set"));
  mixin(bindCode("btConvexInternalShapeData_m_localScaling_get", "D_btConvexInternalShapeData_m_localScaling_get"));
  mixin(bindCode("btConvexInternalShapeData_m_implicitShapeDimensions_set", "D_btConvexInternalShapeData_m_implicitShapeDimensions_set"));
  mixin(bindCode("btConvexInternalShapeData_m_implicitShapeDimensions_get", "D_btConvexInternalShapeData_m_implicitShapeDimensions_get"));
  mixin(bindCode("btConvexInternalShapeData_m_collisionMargin_set", "D_btConvexInternalShapeData_m_collisionMargin_set"));
  mixin(bindCode("btConvexInternalShapeData_m_collisionMargin_get", "D_btConvexInternalShapeData_m_collisionMargin_get"));
  mixin(bindCode("btConvexInternalShapeData_m_padding_set", "D_btConvexInternalShapeData_m_padding_set"));
  mixin(bindCode("btConvexInternalShapeData_m_padding_get", "D_btConvexInternalShapeData_m_padding_get"));
  mixin(bindCode("new_btConvexInternalShapeData", "D_new_btConvexInternalShapeData"));
  mixin(bindCode("delete_btConvexInternalShapeData", "D_delete_btConvexInternalShapeData"));
  mixin(bindCode("btConvexInternalAabbCachingShape_setLocalScaling", "D_btConvexInternalAabbCachingShape_setLocalScaling"));
  mixin(bindCode("btConvexInternalAabbCachingShape_getAabb", "D_btConvexInternalAabbCachingShape_getAabb"));
  mixin(bindCode("btConvexInternalAabbCachingShape_recalcLocalAabb", "D_btConvexInternalAabbCachingShape_recalcLocalAabb"));
  mixin(bindCode("delete_btConvexInternalAabbCachingShape", "D_delete_btConvexInternalAabbCachingShape"));
  mixin(bindCode("btConvexInternalAabbCachingShape_Upcast", "D_btConvexInternalAabbCachingShape_Upcast"));
  mixin(bindCode("delete_btPolyhedralConvexShape", "D_delete_btPolyhedralConvexShape"));
  mixin(bindCode("btPolyhedralConvexShape_initializePolyhedralFeatures", "D_btPolyhedralConvexShape_initializePolyhedralFeatures"));
  mixin(bindCode("btPolyhedralConvexShape_getConvexPolyhedron", "D_btPolyhedralConvexShape_getConvexPolyhedron"));
  mixin(bindCode("btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin", "D_btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin", "D_btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btPolyhedralConvexShape_calculateLocalInertia", "D_btPolyhedralConvexShape_calculateLocalInertia"));
  mixin(bindCode("btPolyhedralConvexShape_getNumVertices", "D_btPolyhedralConvexShape_getNumVertices"));
  mixin(bindCode("btPolyhedralConvexShape_getNumEdges", "D_btPolyhedralConvexShape_getNumEdges"));
  mixin(bindCode("btPolyhedralConvexShape_getEdge", "D_btPolyhedralConvexShape_getEdge"));
  mixin(bindCode("btPolyhedralConvexShape_getVertex", "D_btPolyhedralConvexShape_getVertex"));
  mixin(bindCode("btPolyhedralConvexShape_getNumPlanes", "D_btPolyhedralConvexShape_getNumPlanes"));
  mixin(bindCode("btPolyhedralConvexShape_getPlane", "D_btPolyhedralConvexShape_getPlane"));
  mixin(bindCode("btPolyhedralConvexShape_isInside", "D_btPolyhedralConvexShape_isInside"));
  mixin(bindCode("btPolyhedralConvexShape_Upcast", "D_btPolyhedralConvexShape_Upcast"));
  mixin(bindCode("btPolyhedralConvexAabbCachingShape_getNonvirtualAabb", "D_btPolyhedralConvexAabbCachingShape_getNonvirtualAabb"));
  mixin(bindCode("btPolyhedralConvexAabbCachingShape_setLocalScaling", "D_btPolyhedralConvexAabbCachingShape_setLocalScaling"));
  mixin(bindCode("btPolyhedralConvexAabbCachingShape_getAabb", "D_btPolyhedralConvexAabbCachingShape_getAabb"));
  mixin(bindCode("btPolyhedralConvexAabbCachingShape_recalcLocalAabb", "D_btPolyhedralConvexAabbCachingShape_recalcLocalAabb"));
  mixin(bindCode("delete_btPolyhedralConvexAabbCachingShape", "D_delete_btPolyhedralConvexAabbCachingShape"));
  mixin(bindCode("btPolyhedralConvexAabbCachingShape_Upcast", "D_btPolyhedralConvexAabbCachingShape_Upcast"));
  mixin(bindCode("btBoxShape_getHalfExtentsWithMargin", "D_btBoxShape_getHalfExtentsWithMargin"));
  mixin(bindCode("btBoxShape_getHalfExtentsWithoutMargin", "D_btBoxShape_getHalfExtentsWithoutMargin"));
  mixin(bindCode("btBoxShape_localGetSupportingVertex", "D_btBoxShape_localGetSupportingVertex"));
  mixin(bindCode("btBoxShape_localGetSupportingVertexWithoutMargin", "D_btBoxShape_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin", "D_btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin"));
  mixin(bindCode("new_btBoxShape", "D_new_btBoxShape"));
  mixin(bindCode("btBoxShape_setMargin", "D_btBoxShape_setMargin"));
  mixin(bindCode("btBoxShape_setLocalScaling", "D_btBoxShape_setLocalScaling"));
  mixin(bindCode("btBoxShape_getAabb", "D_btBoxShape_getAabb"));
  mixin(bindCode("btBoxShape_calculateLocalInertia", "D_btBoxShape_calculateLocalInertia"));
  mixin(bindCode("btBoxShape_getPlane", "D_btBoxShape_getPlane"));
  mixin(bindCode("btBoxShape_getNumPlanes", "D_btBoxShape_getNumPlanes"));
  mixin(bindCode("btBoxShape_getNumVertices", "D_btBoxShape_getNumVertices"));
  mixin(bindCode("btBoxShape_getNumEdges", "D_btBoxShape_getNumEdges"));
  mixin(bindCode("btBoxShape_getVertex", "D_btBoxShape_getVertex"));
  mixin(bindCode("btBoxShape_getPlaneEquation", "D_btBoxShape_getPlaneEquation"));
  mixin(bindCode("btBoxShape_getEdge", "D_btBoxShape_getEdge"));
  mixin(bindCode("btBoxShape_isInside", "D_btBoxShape_isInside"));
  mixin(bindCode("btBoxShape_getName", "D_btBoxShape_getName"));
  mixin(bindCode("btBoxShape_getNumPreferredPenetrationDirections", "D_btBoxShape_getNumPreferredPenetrationDirections"));
  mixin(bindCode("btBoxShape_getPreferredPenetrationDirection", "D_btBoxShape_getPreferredPenetrationDirection"));
  mixin(bindCode("delete_btBoxShape", "D_delete_btBoxShape"));
  mixin(bindCode("btBoxShape_Upcast", "D_btBoxShape_Upcast"));
  mixin(bindCode("new_btSphereShape", "D_new_btSphereShape"));
  mixin(bindCode("btSphereShape_localGetSupportingVertex", "D_btSphereShape_localGetSupportingVertex"));
  mixin(bindCode("btSphereShape_localGetSupportingVertexWithoutMargin", "D_btSphereShape_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin", "D_btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btSphereShape_calculateLocalInertia", "D_btSphereShape_calculateLocalInertia"));
  mixin(bindCode("btSphereShape_getAabb", "D_btSphereShape_getAabb"));
  mixin(bindCode("btSphereShape_getRadius", "D_btSphereShape_getRadius"));
  mixin(bindCode("btSphereShape_setUnscaledRadius", "D_btSphereShape_setUnscaledRadius"));
  mixin(bindCode("btSphereShape_getName", "D_btSphereShape_getName"));
  mixin(bindCode("btSphereShape_setMargin", "D_btSphereShape_setMargin"));
  mixin(bindCode("btSphereShape_getMargin", "D_btSphereShape_getMargin"));
  mixin(bindCode("delete_btSphereShape", "D_delete_btSphereShape"));
  mixin(bindCode("btSphereShape_Upcast", "D_btSphereShape_Upcast"));
  mixin(bindCode("new_btCapsuleShape__SWIG_1", "D_new_btCapsuleShape__SWIG_1"));
  mixin(bindCode("btCapsuleShape_calculateLocalInertia", "D_btCapsuleShape_calculateLocalInertia"));
  mixin(bindCode("btCapsuleShape_localGetSupportingVertexWithoutMargin", "D_btCapsuleShape_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin", "D_btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btCapsuleShape_setMargin", "D_btCapsuleShape_setMargin"));
  mixin(bindCode("btCapsuleShape_getAabb", "D_btCapsuleShape_getAabb"));
  mixin(bindCode("btCapsuleShape_getName", "D_btCapsuleShape_getName"));
  mixin(bindCode("btCapsuleShape_getUpAxis", "D_btCapsuleShape_getUpAxis"));
  mixin(bindCode("btCapsuleShape_getRadius", "D_btCapsuleShape_getRadius"));
  mixin(bindCode("btCapsuleShape_getHalfHeight", "D_btCapsuleShape_getHalfHeight"));
  mixin(bindCode("btCapsuleShape_setLocalScaling", "D_btCapsuleShape_setLocalScaling"));
  mixin(bindCode("btCapsuleShape_calculateSerializeBufferSize", "D_btCapsuleShape_calculateSerializeBufferSize"));
  mixin(bindCode("btCapsuleShape_serialize", "D_btCapsuleShape_serialize"));
  mixin(bindCode("delete_btCapsuleShape", "D_delete_btCapsuleShape"));
  mixin(bindCode("btCapsuleShape_Upcast", "D_btCapsuleShape_Upcast"));
  mixin(bindCode("new_btCapsuleShapeX", "D_new_btCapsuleShapeX"));
  mixin(bindCode("btCapsuleShapeX_getName", "D_btCapsuleShapeX_getName"));
  mixin(bindCode("delete_btCapsuleShapeX", "D_delete_btCapsuleShapeX"));
  mixin(bindCode("btCapsuleShapeX_Upcast", "D_btCapsuleShapeX_Upcast"));
  mixin(bindCode("new_btCapsuleShapeZ", "D_new_btCapsuleShapeZ"));
  mixin(bindCode("btCapsuleShapeZ_getName", "D_btCapsuleShapeZ_getName"));
  mixin(bindCode("delete_btCapsuleShapeZ", "D_delete_btCapsuleShapeZ"));
  mixin(bindCode("btCapsuleShapeZ_Upcast", "D_btCapsuleShapeZ_Upcast"));
  mixin(bindCode("btCapsuleShapeData_m_convexInternalShapeData_set", "D_btCapsuleShapeData_m_convexInternalShapeData_set"));
  mixin(bindCode("btCapsuleShapeData_m_convexInternalShapeData_get", "D_btCapsuleShapeData_m_convexInternalShapeData_get"));
  mixin(bindCode("btCapsuleShapeData_m_upAxis_set", "D_btCapsuleShapeData_m_upAxis_set"));
  mixin(bindCode("btCapsuleShapeData_m_upAxis_get", "D_btCapsuleShapeData_m_upAxis_get"));
  mixin(bindCode("btCapsuleShapeData_m_padding_set", "D_btCapsuleShapeData_m_padding_set"));
  mixin(bindCode("btCapsuleShapeData_m_padding_get", "D_btCapsuleShapeData_m_padding_get"));
  mixin(bindCode("new_btCapsuleShapeData", "D_new_btCapsuleShapeData"));
  mixin(bindCode("delete_btCapsuleShapeData", "D_delete_btCapsuleShapeData"));
  mixin(bindCode("btCylinderShape_getHalfExtentsWithMargin", "D_btCylinderShape_getHalfExtentsWithMargin"));
  mixin(bindCode("btCylinderShape_getHalfExtentsWithoutMargin", "D_btCylinderShape_getHalfExtentsWithoutMargin"));
  mixin(bindCode("new_btCylinderShape", "D_new_btCylinderShape"));
  mixin(bindCode("btCylinderShape_getAabb", "D_btCylinderShape_getAabb"));
  mixin(bindCode("btCylinderShape_calculateLocalInertia", "D_btCylinderShape_calculateLocalInertia"));
  mixin(bindCode("btCylinderShape_localGetSupportingVertexWithoutMargin", "D_btCylinderShape_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin", "D_btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btCylinderShape_setMargin", "D_btCylinderShape_setMargin"));
  mixin(bindCode("btCylinderShape_localGetSupportingVertex", "D_btCylinderShape_localGetSupportingVertex"));
  mixin(bindCode("btCylinderShape_getUpAxis", "D_btCylinderShape_getUpAxis"));
  mixin(bindCode("btCylinderShape_getRadius", "D_btCylinderShape_getRadius"));
  mixin(bindCode("btCylinderShape_setLocalScaling", "D_btCylinderShape_setLocalScaling"));
  mixin(bindCode("btCylinderShape_getName", "D_btCylinderShape_getName"));
  mixin(bindCode("btCylinderShape_calculateSerializeBufferSize", "D_btCylinderShape_calculateSerializeBufferSize"));
  mixin(bindCode("btCylinderShape_serialize", "D_btCylinderShape_serialize"));
  mixin(bindCode("delete_btCylinderShape", "D_delete_btCylinderShape"));
  mixin(bindCode("btCylinderShape_Upcast", "D_btCylinderShape_Upcast"));
  mixin(bindCode("new_btCylinderShapeX", "D_new_btCylinderShapeX"));
  mixin(bindCode("btCylinderShapeX_localGetSupportingVertexWithoutMargin", "D_btCylinderShapeX_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin", "D_btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btCylinderShapeX_getName", "D_btCylinderShapeX_getName"));
  mixin(bindCode("btCylinderShapeX_getRadius", "D_btCylinderShapeX_getRadius"));
  mixin(bindCode("delete_btCylinderShapeX", "D_delete_btCylinderShapeX"));
  mixin(bindCode("btCylinderShapeX_Upcast", "D_btCylinderShapeX_Upcast"));
  mixin(bindCode("new_btCylinderShapeZ", "D_new_btCylinderShapeZ"));
  mixin(bindCode("btCylinderShapeZ_localGetSupportingVertexWithoutMargin", "D_btCylinderShapeZ_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin", "D_btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btCylinderShapeZ_getName", "D_btCylinderShapeZ_getName"));
  mixin(bindCode("btCylinderShapeZ_getRadius", "D_btCylinderShapeZ_getRadius"));
  mixin(bindCode("delete_btCylinderShapeZ", "D_delete_btCylinderShapeZ"));
  mixin(bindCode("btCylinderShapeZ_Upcast", "D_btCylinderShapeZ_Upcast"));
  mixin(bindCode("btCylinderShapeData_m_convexInternalShapeData_set", "D_btCylinderShapeData_m_convexInternalShapeData_set"));
  mixin(bindCode("btCylinderShapeData_m_convexInternalShapeData_get", "D_btCylinderShapeData_m_convexInternalShapeData_get"));
  mixin(bindCode("btCylinderShapeData_m_upAxis_set", "D_btCylinderShapeData_m_upAxis_set"));
  mixin(bindCode("btCylinderShapeData_m_upAxis_get", "D_btCylinderShapeData_m_upAxis_get"));
  mixin(bindCode("btCylinderShapeData_m_padding_set", "D_btCylinderShapeData_m_padding_set"));
  mixin(bindCode("btCylinderShapeData_m_padding_get", "D_btCylinderShapeData_m_padding_get"));
  mixin(bindCode("new_btCylinderShapeData", "D_new_btCylinderShapeData"));
  mixin(bindCode("delete_btCylinderShapeData", "D_delete_btCylinderShapeData"));
  mixin(bindCode("new_btConeShape", "D_new_btConeShape"));
  mixin(bindCode("btConeShape_localGetSupportingVertex", "D_btConeShape_localGetSupportingVertex"));
  mixin(bindCode("btConeShape_localGetSupportingVertexWithoutMargin", "D_btConeShape_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin", "D_btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btConeShape_getRadius", "D_btConeShape_getRadius"));
  mixin(bindCode("btConeShape_getHeight", "D_btConeShape_getHeight"));
  mixin(bindCode("btConeShape_calculateLocalInertia", "D_btConeShape_calculateLocalInertia"));
  mixin(bindCode("btConeShape_getName", "D_btConeShape_getName"));
  mixin(bindCode("btConeShape_setConeUpIndex", "D_btConeShape_setConeUpIndex"));
  mixin(bindCode("btConeShape_getConeUpIndex", "D_btConeShape_getConeUpIndex"));
  mixin(bindCode("btConeShape_setLocalScaling", "D_btConeShape_setLocalScaling"));
  mixin(bindCode("delete_btConeShape", "D_delete_btConeShape"));
  mixin(bindCode("btConeShape_Upcast", "D_btConeShape_Upcast"));
  mixin(bindCode("new_btConeShapeX", "D_new_btConeShapeX"));
  mixin(bindCode("delete_btConeShapeX", "D_delete_btConeShapeX"));
  mixin(bindCode("btConeShapeX_Upcast", "D_btConeShapeX_Upcast"));
  mixin(bindCode("new_btConeShapeZ", "D_new_btConeShapeZ"));
  mixin(bindCode("delete_btConeShapeZ", "D_delete_btConeShapeZ"));
  mixin(bindCode("btConeShapeZ_Upcast", "D_btConeShapeZ_Upcast"));
  mixin(bindCode("new_btStaticPlaneShape", "D_new_btStaticPlaneShape"));
  mixin(bindCode("delete_btStaticPlaneShape", "D_delete_btStaticPlaneShape"));
  mixin(bindCode("btStaticPlaneShape_getAabb", "D_btStaticPlaneShape_getAabb"));
  mixin(bindCode("btStaticPlaneShape_processAllTriangles", "D_btStaticPlaneShape_processAllTriangles"));
  mixin(bindCode("btStaticPlaneShape_calculateLocalInertia", "D_btStaticPlaneShape_calculateLocalInertia"));
  mixin(bindCode("btStaticPlaneShape_setLocalScaling", "D_btStaticPlaneShape_setLocalScaling"));
  mixin(bindCode("btStaticPlaneShape_getLocalScaling", "D_btStaticPlaneShape_getLocalScaling"));
  mixin(bindCode("btStaticPlaneShape_getPlaneNormal", "D_btStaticPlaneShape_getPlaneNormal"));
  mixin(bindCode("btStaticPlaneShape_getPlaneConstant", "D_btStaticPlaneShape_getPlaneConstant"));
  mixin(bindCode("btStaticPlaneShape_getName", "D_btStaticPlaneShape_getName"));
  mixin(bindCode("btStaticPlaneShape_calculateSerializeBufferSize", "D_btStaticPlaneShape_calculateSerializeBufferSize"));
  mixin(bindCode("btStaticPlaneShape_serialize", "D_btStaticPlaneShape_serialize"));
  mixin(bindCode("btStaticPlaneShapeData_m_collisionShapeData_set", "D_btStaticPlaneShapeData_m_collisionShapeData_set"));
  mixin(bindCode("btStaticPlaneShapeData_m_collisionShapeData_get", "D_btStaticPlaneShapeData_m_collisionShapeData_get"));
  mixin(bindCode("btStaticPlaneShapeData_m_localScaling_set", "D_btStaticPlaneShapeData_m_localScaling_set"));
  mixin(bindCode("btStaticPlaneShapeData_m_localScaling_get", "D_btStaticPlaneShapeData_m_localScaling_get"));
  mixin(bindCode("btStaticPlaneShapeData_m_planeNormal_set", "D_btStaticPlaneShapeData_m_planeNormal_set"));
  mixin(bindCode("btStaticPlaneShapeData_m_planeNormal_get", "D_btStaticPlaneShapeData_m_planeNormal_get"));
  mixin(bindCode("btStaticPlaneShapeData_m_planeConstant_set", "D_btStaticPlaneShapeData_m_planeConstant_set"));
  mixin(bindCode("btStaticPlaneShapeData_m_planeConstant_get", "D_btStaticPlaneShapeData_m_planeConstant_get"));
  mixin(bindCode("btStaticPlaneShapeData_m_pad_set", "D_btStaticPlaneShapeData_m_pad_set"));
  mixin(bindCode("btStaticPlaneShapeData_m_pad_get", "D_btStaticPlaneShapeData_m_pad_get"));
  mixin(bindCode("new_btStaticPlaneShapeData", "D_new_btStaticPlaneShapeData"));
  mixin(bindCode("delete_btStaticPlaneShapeData", "D_delete_btStaticPlaneShapeData"));
  mixin(bindCode("new_btConvexHullShape__SWIG_0", "D_new_btConvexHullShape__SWIG_0"));
  mixin(bindCode("new_btConvexHullShape__SWIG_1", "D_new_btConvexHullShape__SWIG_1"));
  mixin(bindCode("new_btConvexHullShape__SWIG_2", "D_new_btConvexHullShape__SWIG_2"));
  mixin(bindCode("new_btConvexHullShape__SWIG_3", "D_new_btConvexHullShape__SWIG_3"));
  mixin(bindCode("btConvexHullShape_addPoint", "D_btConvexHullShape_addPoint"));
  mixin(bindCode("btConvexHullShape_getUnscaledPoints__SWIG_0", "D_btConvexHullShape_getUnscaledPoints__SWIG_0"));
  mixin(bindCode("btConvexHullShape_getPoints", "D_btConvexHullShape_getPoints"));
  mixin(bindCode("btConvexHullShape_getScaledPoint", "D_btConvexHullShape_getScaledPoint"));
  mixin(bindCode("btConvexHullShape_getNumPoints", "D_btConvexHullShape_getNumPoints"));
  mixin(bindCode("btConvexHullShape_localGetSupportingVertex", "D_btConvexHullShape_localGetSupportingVertex"));
  mixin(bindCode("btConvexHullShape_localGetSupportingVertexWithoutMargin", "D_btConvexHullShape_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin", "D_btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btConvexHullShape_project", "D_btConvexHullShape_project"));
  mixin(bindCode("btConvexHullShape_getName", "D_btConvexHullShape_getName"));
  mixin(bindCode("btConvexHullShape_getNumVertices", "D_btConvexHullShape_getNumVertices"));
  mixin(bindCode("btConvexHullShape_getNumEdges", "D_btConvexHullShape_getNumEdges"));
  mixin(bindCode("btConvexHullShape_getEdge", "D_btConvexHullShape_getEdge"));
  mixin(bindCode("btConvexHullShape_getVertex", "D_btConvexHullShape_getVertex"));
  mixin(bindCode("btConvexHullShape_getNumPlanes", "D_btConvexHullShape_getNumPlanes"));
  mixin(bindCode("btConvexHullShape_getPlane", "D_btConvexHullShape_getPlane"));
  mixin(bindCode("btConvexHullShape_isInside", "D_btConvexHullShape_isInside"));
  mixin(bindCode("btConvexHullShape_setLocalScaling", "D_btConvexHullShape_setLocalScaling"));
  mixin(bindCode("btConvexHullShape_calculateSerializeBufferSize", "D_btConvexHullShape_calculateSerializeBufferSize"));
  mixin(bindCode("btConvexHullShape_serialize", "D_btConvexHullShape_serialize"));
  mixin(bindCode("delete_btConvexHullShape", "D_delete_btConvexHullShape"));
  mixin(bindCode("btConvexHullShape_Upcast", "D_btConvexHullShape_Upcast"));
  mixin(bindCode("btConvexHullShapeData_m_convexInternalShapeData_set", "D_btConvexHullShapeData_m_convexInternalShapeData_set"));
  mixin(bindCode("btConvexHullShapeData_m_convexInternalShapeData_get", "D_btConvexHullShapeData_m_convexInternalShapeData_get"));
  mixin(bindCode("btConvexHullShapeData_m_unscaledPointsFloatPtr_set", "D_btConvexHullShapeData_m_unscaledPointsFloatPtr_set"));
  mixin(bindCode("btConvexHullShapeData_m_unscaledPointsFloatPtr_get", "D_btConvexHullShapeData_m_unscaledPointsFloatPtr_get"));
  mixin(bindCode("btConvexHullShapeData_m_unscaledPointsDoublePtr_set", "D_btConvexHullShapeData_m_unscaledPointsDoublePtr_set"));
  mixin(bindCode("btConvexHullShapeData_m_unscaledPointsDoublePtr_get", "D_btConvexHullShapeData_m_unscaledPointsDoublePtr_get"));
  mixin(bindCode("btConvexHullShapeData_m_numUnscaledPoints_set", "D_btConvexHullShapeData_m_numUnscaledPoints_set"));
  mixin(bindCode("btConvexHullShapeData_m_numUnscaledPoints_get", "D_btConvexHullShapeData_m_numUnscaledPoints_get"));
  mixin(bindCode("btConvexHullShapeData_m_padding3_set", "D_btConvexHullShapeData_m_padding3_set"));
  mixin(bindCode("btConvexHullShapeData_m_padding3_get", "D_btConvexHullShapeData_m_padding3_get"));
  mixin(bindCode("new_btConvexHullShapeData", "D_new_btConvexHullShapeData"));
  mixin(bindCode("delete_btConvexHullShapeData", "D_delete_btConvexHullShapeData"));
  mixin(bindCode("btTriangleMesh_m_weldingThreshold_set", "D_btTriangleMesh_m_weldingThreshold_set"));
  mixin(bindCode("btTriangleMesh_m_weldingThreshold_get", "D_btTriangleMesh_m_weldingThreshold_get"));
  mixin(bindCode("new_btTriangleMesh__SWIG_0", "D_new_btTriangleMesh__SWIG_0"));
  mixin(bindCode("new_btTriangleMesh__SWIG_1", "D_new_btTriangleMesh__SWIG_1"));
  mixin(bindCode("new_btTriangleMesh__SWIG_2", "D_new_btTriangleMesh__SWIG_2"));
  mixin(bindCode("btTriangleMesh_getUse32bitIndices", "D_btTriangleMesh_getUse32bitIndices"));
  mixin(bindCode("btTriangleMesh_getUse4componentVertices", "D_btTriangleMesh_getUse4componentVertices"));
  mixin(bindCode("btTriangleMesh_addTriangle__SWIG_0", "D_btTriangleMesh_addTriangle__SWIG_0"));
  mixin(bindCode("btTriangleMesh_addTriangle__SWIG_1", "D_btTriangleMesh_addTriangle__SWIG_1"));
  mixin(bindCode("btTriangleMesh_getNumTriangles", "D_btTriangleMesh_getNumTriangles"));
  mixin(bindCode("btTriangleMesh_preallocateVertices", "D_btTriangleMesh_preallocateVertices"));
  mixin(bindCode("btTriangleMesh_preallocateIndices", "D_btTriangleMesh_preallocateIndices"));
  mixin(bindCode("btTriangleMesh_findOrAddVertex", "D_btTriangleMesh_findOrAddVertex"));
  mixin(bindCode("btTriangleMesh_addIndex", "D_btTriangleMesh_addIndex"));
  mixin(bindCode("delete_btTriangleMesh", "D_delete_btTriangleMesh"));
  mixin(bindCode("new_btConvexTriangleMeshShape__SWIG_0", "D_new_btConvexTriangleMeshShape__SWIG_0"));
  mixin(bindCode("new_btConvexTriangleMeshShape__SWIG_1", "D_new_btConvexTriangleMeshShape__SWIG_1"));
  mixin(bindCode("btConvexTriangleMeshShape_getMeshInterface__SWIG_0", "D_btConvexTriangleMeshShape_getMeshInterface__SWIG_0"));
  mixin(bindCode("btConvexTriangleMeshShape_localGetSupportingVertex", "D_btConvexTriangleMeshShape_localGetSupportingVertex"));
  mixin(bindCode("btConvexTriangleMeshShape_localGetSupportingVertexWithoutMargin", "D_btConvexTriangleMeshShape_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btConvexTriangleMeshShape_batchedUnitVectorGetSupportingVertexWithoutMargin", "D_btConvexTriangleMeshShape_batchedUnitVectorGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btConvexTriangleMeshShape_getName", "D_btConvexTriangleMeshShape_getName"));
  mixin(bindCode("btConvexTriangleMeshShape_getNumVertices", "D_btConvexTriangleMeshShape_getNumVertices"));
  mixin(bindCode("btConvexTriangleMeshShape_getNumEdges", "D_btConvexTriangleMeshShape_getNumEdges"));
  mixin(bindCode("btConvexTriangleMeshShape_getEdge", "D_btConvexTriangleMeshShape_getEdge"));
  mixin(bindCode("btConvexTriangleMeshShape_getVertex", "D_btConvexTriangleMeshShape_getVertex"));
  mixin(bindCode("btConvexTriangleMeshShape_getNumPlanes", "D_btConvexTriangleMeshShape_getNumPlanes"));
  mixin(bindCode("btConvexTriangleMeshShape_getPlane", "D_btConvexTriangleMeshShape_getPlane"));
  mixin(bindCode("btConvexTriangleMeshShape_isInside", "D_btConvexTriangleMeshShape_isInside"));
  mixin(bindCode("btConvexTriangleMeshShape_setLocalScaling", "D_btConvexTriangleMeshShape_setLocalScaling"));
  mixin(bindCode("btConvexTriangleMeshShape_getLocalScaling", "D_btConvexTriangleMeshShape_getLocalScaling"));
  mixin(bindCode("btConvexTriangleMeshShape_calculatePrincipalAxisTransform", "D_btConvexTriangleMeshShape_calculatePrincipalAxisTransform"));
  mixin(bindCode("delete_btConvexTriangleMeshShape", "D_delete_btConvexTriangleMeshShape"));
  mixin(bindCode("btConvexTriangleMeshShape_Upcast", "D_btConvexTriangleMeshShape_Upcast"));
  mixin(bindCode("new_btBvhTriangleMeshShape__SWIG_0", "D_new_btBvhTriangleMeshShape__SWIG_0"));
  mixin(bindCode("new_btBvhTriangleMeshShape__SWIG_1", "D_new_btBvhTriangleMeshShape__SWIG_1"));
  mixin(bindCode("new_btBvhTriangleMeshShape__SWIG_2", "D_new_btBvhTriangleMeshShape__SWIG_2"));
  mixin(bindCode("new_btBvhTriangleMeshShape__SWIG_3", "D_new_btBvhTriangleMeshShape__SWIG_3"));
  mixin(bindCode("delete_btBvhTriangleMeshShape", "D_delete_btBvhTriangleMeshShape"));
  mixin(bindCode("btBvhTriangleMeshShape_getOwnsBvh", "D_btBvhTriangleMeshShape_getOwnsBvh"));
  mixin(bindCode("btBvhTriangleMeshShape_performRaycast", "D_btBvhTriangleMeshShape_performRaycast"));
  mixin(bindCode("btBvhTriangleMeshShape_performConvexcast", "D_btBvhTriangleMeshShape_performConvexcast"));
  mixin(bindCode("btBvhTriangleMeshShape_processAllTriangles", "D_btBvhTriangleMeshShape_processAllTriangles"));
  mixin(bindCode("btBvhTriangleMeshShape_refitTree", "D_btBvhTriangleMeshShape_refitTree"));
  mixin(bindCode("btBvhTriangleMeshShape_partialRefitTree", "D_btBvhTriangleMeshShape_partialRefitTree"));
  mixin(bindCode("btBvhTriangleMeshShape_getName", "D_btBvhTriangleMeshShape_getName"));
  mixin(bindCode("btBvhTriangleMeshShape_setLocalScaling", "D_btBvhTriangleMeshShape_setLocalScaling"));
  mixin(bindCode("btBvhTriangleMeshShape_getOptimizedBvh", "D_btBvhTriangleMeshShape_getOptimizedBvh"));
  mixin(bindCode("btBvhTriangleMeshShape_setOptimizedBvh__SWIG_0", "D_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_0"));
  mixin(bindCode("btBvhTriangleMeshShape_setOptimizedBvh__SWIG_1", "D_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_1"));
  mixin(bindCode("btBvhTriangleMeshShape_buildOptimizedBvh", "D_btBvhTriangleMeshShape_buildOptimizedBvh"));
  mixin(bindCode("btBvhTriangleMeshShape_usesQuantizedAabbCompression", "D_btBvhTriangleMeshShape_usesQuantizedAabbCompression"));
  mixin(bindCode("btBvhTriangleMeshShape_setTriangleInfoMap", "D_btBvhTriangleMeshShape_setTriangleInfoMap"));
  mixin(bindCode("btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_0", "D_btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_0"));
  mixin(bindCode("btBvhTriangleMeshShape_calculateSerializeBufferSize", "D_btBvhTriangleMeshShape_calculateSerializeBufferSize"));
  mixin(bindCode("btBvhTriangleMeshShape_serialize", "D_btBvhTriangleMeshShape_serialize"));
  mixin(bindCode("btBvhTriangleMeshShape_serializeSingleBvh", "D_btBvhTriangleMeshShape_serializeSingleBvh"));
  mixin(bindCode("btBvhTriangleMeshShape_serializeSingleTriangleInfoMap", "D_btBvhTriangleMeshShape_serializeSingleTriangleInfoMap"));
  mixin(bindCode("btTriangleMeshShapeData_m_collisionShapeData_set", "D_btTriangleMeshShapeData_m_collisionShapeData_set"));
  mixin(bindCode("btTriangleMeshShapeData_m_collisionShapeData_get", "D_btTriangleMeshShapeData_m_collisionShapeData_get"));
  mixin(bindCode("btTriangleMeshShapeData_m_meshInterface_set", "D_btTriangleMeshShapeData_m_meshInterface_set"));
  mixin(bindCode("btTriangleMeshShapeData_m_meshInterface_get", "D_btTriangleMeshShapeData_m_meshInterface_get"));
  mixin(bindCode("btTriangleMeshShapeData_m_quantizedFloatBvh_set", "D_btTriangleMeshShapeData_m_quantizedFloatBvh_set"));
  mixin(bindCode("btTriangleMeshShapeData_m_quantizedFloatBvh_get", "D_btTriangleMeshShapeData_m_quantizedFloatBvh_get"));
  mixin(bindCode("btTriangleMeshShapeData_m_quantizedDoubleBvh_set", "D_btTriangleMeshShapeData_m_quantizedDoubleBvh_set"));
  mixin(bindCode("btTriangleMeshShapeData_m_quantizedDoubleBvh_get", "D_btTriangleMeshShapeData_m_quantizedDoubleBvh_get"));
  mixin(bindCode("btTriangleMeshShapeData_m_triangleInfoMap_set", "D_btTriangleMeshShapeData_m_triangleInfoMap_set"));
  mixin(bindCode("btTriangleMeshShapeData_m_triangleInfoMap_get", "D_btTriangleMeshShapeData_m_triangleInfoMap_get"));
  mixin(bindCode("btTriangleMeshShapeData_m_collisionMargin_set", "D_btTriangleMeshShapeData_m_collisionMargin_set"));
  mixin(bindCode("btTriangleMeshShapeData_m_collisionMargin_get", "D_btTriangleMeshShapeData_m_collisionMargin_get"));
  mixin(bindCode("btTriangleMeshShapeData_m_pad3_set", "D_btTriangleMeshShapeData_m_pad3_set"));
  mixin(bindCode("btTriangleMeshShapeData_m_pad3_get", "D_btTriangleMeshShapeData_m_pad3_get"));
  mixin(bindCode("new_btTriangleMeshShapeData", "D_new_btTriangleMeshShapeData"));
  mixin(bindCode("delete_btTriangleMeshShapeData", "D_delete_btTriangleMeshShapeData"));
  mixin(bindCode("new_btScaledBvhTriangleMeshShape", "D_new_btScaledBvhTriangleMeshShape"));
  mixin(bindCode("delete_btScaledBvhTriangleMeshShape", "D_delete_btScaledBvhTriangleMeshShape"));
  mixin(bindCode("btScaledBvhTriangleMeshShape_getAabb", "D_btScaledBvhTriangleMeshShape_getAabb"));
  mixin(bindCode("btScaledBvhTriangleMeshShape_setLocalScaling", "D_btScaledBvhTriangleMeshShape_setLocalScaling"));
  mixin(bindCode("btScaledBvhTriangleMeshShape_getLocalScaling", "D_btScaledBvhTriangleMeshShape_getLocalScaling"));
  mixin(bindCode("btScaledBvhTriangleMeshShape_calculateLocalInertia", "D_btScaledBvhTriangleMeshShape_calculateLocalInertia"));
  mixin(bindCode("btScaledBvhTriangleMeshShape_processAllTriangles", "D_btScaledBvhTriangleMeshShape_processAllTriangles"));
  mixin(bindCode("btScaledBvhTriangleMeshShape_getChildShape__SWIG_0", "D_btScaledBvhTriangleMeshShape_getChildShape__SWIG_0"));
  mixin(bindCode("btScaledBvhTriangleMeshShape_getName", "D_btScaledBvhTriangleMeshShape_getName"));
  mixin(bindCode("btScaledBvhTriangleMeshShape_calculateSerializeBufferSize", "D_btScaledBvhTriangleMeshShape_calculateSerializeBufferSize"));
  mixin(bindCode("btScaledBvhTriangleMeshShape_serialize", "D_btScaledBvhTriangleMeshShape_serialize"));
  mixin(bindCode("btScaledTriangleMeshShapeData_m_trimeshShapeData_set", "D_btScaledTriangleMeshShapeData_m_trimeshShapeData_set"));
  mixin(bindCode("btScaledTriangleMeshShapeData_m_trimeshShapeData_get", "D_btScaledTriangleMeshShapeData_m_trimeshShapeData_get"));
  mixin(bindCode("btScaledTriangleMeshShapeData_m_localScaling_set", "D_btScaledTriangleMeshShapeData_m_localScaling_set"));
  mixin(bindCode("btScaledTriangleMeshShapeData_m_localScaling_get", "D_btScaledTriangleMeshShapeData_m_localScaling_get"));
  mixin(bindCode("new_btScaledTriangleMeshShapeData", "D_new_btScaledTriangleMeshShapeData"));
  mixin(bindCode("delete_btScaledTriangleMeshShapeData", "D_delete_btScaledTriangleMeshShapeData"));
  mixin(bindCode("delete_btTriangleMeshShape", "D_delete_btTriangleMeshShape"));
  mixin(bindCode("btTriangleMeshShape_localGetSupportingVertex", "D_btTriangleMeshShape_localGetSupportingVertex"));
  mixin(bindCode("btTriangleMeshShape_localGetSupportingVertexWithoutMargin", "D_btTriangleMeshShape_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btTriangleMeshShape_recalcLocalAabb", "D_btTriangleMeshShape_recalcLocalAabb"));
  mixin(bindCode("btTriangleMeshShape_getAabb", "D_btTriangleMeshShape_getAabb"));
  mixin(bindCode("btTriangleMeshShape_processAllTriangles", "D_btTriangleMeshShape_processAllTriangles"));
  mixin(bindCode("btTriangleMeshShape_calculateLocalInertia", "D_btTriangleMeshShape_calculateLocalInertia"));
  mixin(bindCode("btTriangleMeshShape_setLocalScaling", "D_btTriangleMeshShape_setLocalScaling"));
  mixin(bindCode("btTriangleMeshShape_getLocalScaling", "D_btTriangleMeshShape_getLocalScaling"));
  mixin(bindCode("btTriangleMeshShape_getMeshInterface__SWIG_0", "D_btTriangleMeshShape_getMeshInterface__SWIG_0"));
  mixin(bindCode("btTriangleMeshShape_getLocalAabbMin", "D_btTriangleMeshShape_getLocalAabbMin"));
  mixin(bindCode("btTriangleMeshShape_getLocalAabbMax", "D_btTriangleMeshShape_getLocalAabbMax"));
  mixin(bindCode("btTriangleMeshShape_getName", "D_btTriangleMeshShape_getName"));
  mixin(bindCode("btIndexedMesh_m_numTriangles_set", "D_btIndexedMesh_m_numTriangles_set"));
  mixin(bindCode("btIndexedMesh_m_numTriangles_get", "D_btIndexedMesh_m_numTriangles_get"));
  mixin(bindCode("btIndexedMesh_m_triangleIndexBase_set", "D_btIndexedMesh_m_triangleIndexBase_set"));
  mixin(bindCode("btIndexedMesh_m_triangleIndexBase_get", "D_btIndexedMesh_m_triangleIndexBase_get"));
  mixin(bindCode("btIndexedMesh_m_triangleIndexStride_set", "D_btIndexedMesh_m_triangleIndexStride_set"));
  mixin(bindCode("btIndexedMesh_m_triangleIndexStride_get", "D_btIndexedMesh_m_triangleIndexStride_get"));
  mixin(bindCode("btIndexedMesh_m_numVertices_set", "D_btIndexedMesh_m_numVertices_set"));
  mixin(bindCode("btIndexedMesh_m_numVertices_get", "D_btIndexedMesh_m_numVertices_get"));
  mixin(bindCode("btIndexedMesh_m_vertexBase_set", "D_btIndexedMesh_m_vertexBase_set"));
  mixin(bindCode("btIndexedMesh_m_vertexBase_get", "D_btIndexedMesh_m_vertexBase_get"));
  mixin(bindCode("btIndexedMesh_m_vertexStride_set", "D_btIndexedMesh_m_vertexStride_set"));
  mixin(bindCode("btIndexedMesh_m_vertexStride_get", "D_btIndexedMesh_m_vertexStride_get"));
  mixin(bindCode("btIndexedMesh_m_indexType_set", "D_btIndexedMesh_m_indexType_set"));
  mixin(bindCode("btIndexedMesh_m_indexType_get", "D_btIndexedMesh_m_indexType_get"));
  mixin(bindCode("btIndexedMesh_m_vertexType_set", "D_btIndexedMesh_m_vertexType_set"));
  mixin(bindCode("btIndexedMesh_m_vertexType_get", "D_btIndexedMesh_m_vertexType_get"));
  mixin(bindCode("new_btIndexedMesh", "D_new_btIndexedMesh"));
  mixin(bindCode("delete_btIndexedMesh", "D_delete_btIndexedMesh"));
  mixin(bindCode("new_btTriangleIndexVertexArray__SWIG_0", "D_new_btTriangleIndexVertexArray__SWIG_0"));
  mixin(bindCode("delete_btTriangleIndexVertexArray", "D_delete_btTriangleIndexVertexArray"));
  mixin(bindCode("new_btTriangleIndexVertexArray__SWIG_1", "D_new_btTriangleIndexVertexArray__SWIG_1"));
  mixin(bindCode("btTriangleIndexVertexArray_addIndexedMesh__SWIG_0", "D_btTriangleIndexVertexArray_addIndexedMesh__SWIG_0"));
  mixin(bindCode("btTriangleIndexVertexArray_addIndexedMesh__SWIG_1", "D_btTriangleIndexVertexArray_addIndexedMesh__SWIG_1"));
  mixin(bindCode("btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_0", "D_btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_0"));
  mixin(bindCode("btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_1", "D_btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_1"));
  mixin(bindCode("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_0", "D_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_0"));
  mixin(bindCode("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_1", "D_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_1"));
  mixin(bindCode("btTriangleIndexVertexArray_unLockVertexBase", "D_btTriangleIndexVertexArray_unLockVertexBase"));
  mixin(bindCode("btTriangleIndexVertexArray_unLockReadOnlyVertexBase", "D_btTriangleIndexVertexArray_unLockReadOnlyVertexBase"));
  mixin(bindCode("btTriangleIndexVertexArray_getNumSubParts", "D_btTriangleIndexVertexArray_getNumSubParts"));
  mixin(bindCode("btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_0", "D_btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_0"));
  mixin(bindCode("btTriangleIndexVertexArray_preallocateVertices", "D_btTriangleIndexVertexArray_preallocateVertices"));
  mixin(bindCode("btTriangleIndexVertexArray_preallocateIndices", "D_btTriangleIndexVertexArray_preallocateIndices"));
  mixin(bindCode("btTriangleIndexVertexArray_hasPremadeAabb", "D_btTriangleIndexVertexArray_hasPremadeAabb"));
  mixin(bindCode("btTriangleIndexVertexArray_setPremadeAabb", "D_btTriangleIndexVertexArray_setPremadeAabb"));
  mixin(bindCode("btTriangleIndexVertexArray_getPremadeAabb", "D_btTriangleIndexVertexArray_getPremadeAabb"));
  mixin(bindCode("btCompoundShapeChild_m_transform_set", "D_btCompoundShapeChild_m_transform_set"));
  mixin(bindCode("btCompoundShapeChild_m_transform_get", "D_btCompoundShapeChild_m_transform_get"));
  mixin(bindCode("btCompoundShapeChild_m_childShape_set", "D_btCompoundShapeChild_m_childShape_set"));
  mixin(bindCode("btCompoundShapeChild_m_childShape_get", "D_btCompoundShapeChild_m_childShape_get"));
  mixin(bindCode("btCompoundShapeChild_m_childShapeType_set", "D_btCompoundShapeChild_m_childShapeType_set"));
  mixin(bindCode("btCompoundShapeChild_m_childShapeType_get", "D_btCompoundShapeChild_m_childShapeType_get"));
  mixin(bindCode("btCompoundShapeChild_m_childMargin_set", "D_btCompoundShapeChild_m_childMargin_set"));
  mixin(bindCode("btCompoundShapeChild_m_childMargin_get", "D_btCompoundShapeChild_m_childMargin_get"));
  mixin(bindCode("btCompoundShapeChild_m_node_set", "D_btCompoundShapeChild_m_node_set"));
  mixin(bindCode("btCompoundShapeChild_m_node_get", "D_btCompoundShapeChild_m_node_get"));
  mixin(bindCode("new_btCompoundShapeChild", "D_new_btCompoundShapeChild"));
  mixin(bindCode("delete_btCompoundShapeChild", "D_delete_btCompoundShapeChild"));
  mixin(bindCode("new_btCompoundShape__SWIG_0", "D_new_btCompoundShape__SWIG_0"));
  mixin(bindCode("new_btCompoundShape__SWIG_1", "D_new_btCompoundShape__SWIG_1"));
  mixin(bindCode("delete_btCompoundShape", "D_delete_btCompoundShape"));
  mixin(bindCode("btCompoundShape_addChildShape", "D_btCompoundShape_addChildShape"));
  mixin(bindCode("btCompoundShape_removeChildShape", "D_btCompoundShape_removeChildShape"));
  mixin(bindCode("btCompoundShape_removeChildShapeByIndex", "D_btCompoundShape_removeChildShapeByIndex"));
  mixin(bindCode("btCompoundShape_getNumChildShapes", "D_btCompoundShape_getNumChildShapes"));
  mixin(bindCode("btCompoundShape_getChildShape__SWIG_0", "D_btCompoundShape_getChildShape__SWIG_0"));
  mixin(bindCode("btCompoundShape_getChildTransform__SWIG_0", "D_btCompoundShape_getChildTransform__SWIG_0"));
  mixin(bindCode("btCompoundShape_updateChildTransform__SWIG_0", "D_btCompoundShape_updateChildTransform__SWIG_0"));
  mixin(bindCode("btCompoundShape_updateChildTransform__SWIG_1", "D_btCompoundShape_updateChildTransform__SWIG_1"));
  mixin(bindCode("btCompoundShape_getChildList", "D_btCompoundShape_getChildList"));
  mixin(bindCode("btCompoundShape_getAabb", "D_btCompoundShape_getAabb"));
  mixin(bindCode("btCompoundShape_recalculateLocalAabb", "D_btCompoundShape_recalculateLocalAabb"));
  mixin(bindCode("btCompoundShape_setLocalScaling", "D_btCompoundShape_setLocalScaling"));
  mixin(bindCode("btCompoundShape_getLocalScaling", "D_btCompoundShape_getLocalScaling"));
  mixin(bindCode("btCompoundShape_calculateLocalInertia", "D_btCompoundShape_calculateLocalInertia"));
  mixin(bindCode("btCompoundShape_setMargin", "D_btCompoundShape_setMargin"));
  mixin(bindCode("btCompoundShape_getMargin", "D_btCompoundShape_getMargin"));
  mixin(bindCode("btCompoundShape_getName", "D_btCompoundShape_getName"));
  mixin(bindCode("btCompoundShape_getDynamicAabbTree__SWIG_0", "D_btCompoundShape_getDynamicAabbTree__SWIG_0"));
  mixin(bindCode("btCompoundShape_createAabbTreeFromChildren", "D_btCompoundShape_createAabbTreeFromChildren"));
  mixin(bindCode("btCompoundShape_calculatePrincipalAxisTransform", "D_btCompoundShape_calculatePrincipalAxisTransform"));
  mixin(bindCode("btCompoundShape_getUpdateRevision", "D_btCompoundShape_getUpdateRevision"));
  mixin(bindCode("btCompoundShape_calculateSerializeBufferSize", "D_btCompoundShape_calculateSerializeBufferSize"));
  mixin(bindCode("btCompoundShape_serialize", "D_btCompoundShape_serialize"));
  mixin(bindCode("btCompoundShape_Upcast", "D_btCompoundShape_Upcast"));
  mixin(bindCode("btCompoundShapeChildData_m_transform_set", "D_btCompoundShapeChildData_m_transform_set"));
  mixin(bindCode("btCompoundShapeChildData_m_transform_get", "D_btCompoundShapeChildData_m_transform_get"));
  mixin(bindCode("btCompoundShapeChildData_m_childShape_set", "D_btCompoundShapeChildData_m_childShape_set"));
  mixin(bindCode("btCompoundShapeChildData_m_childShape_get", "D_btCompoundShapeChildData_m_childShape_get"));
  mixin(bindCode("btCompoundShapeChildData_m_childShapeType_set", "D_btCompoundShapeChildData_m_childShapeType_set"));
  mixin(bindCode("btCompoundShapeChildData_m_childShapeType_get", "D_btCompoundShapeChildData_m_childShapeType_get"));
  mixin(bindCode("btCompoundShapeChildData_m_childMargin_set", "D_btCompoundShapeChildData_m_childMargin_set"));
  mixin(bindCode("btCompoundShapeChildData_m_childMargin_get", "D_btCompoundShapeChildData_m_childMargin_get"));
  mixin(bindCode("new_btCompoundShapeChildData", "D_new_btCompoundShapeChildData"));
  mixin(bindCode("delete_btCompoundShapeChildData", "D_delete_btCompoundShapeChildData"));
  mixin(bindCode("btCompoundShapeData_m_collisionShapeData_set", "D_btCompoundShapeData_m_collisionShapeData_set"));
  mixin(bindCode("btCompoundShapeData_m_collisionShapeData_get", "D_btCompoundShapeData_m_collisionShapeData_get"));
  mixin(bindCode("btCompoundShapeData_m_childShapePtr_set", "D_btCompoundShapeData_m_childShapePtr_set"));
  mixin(bindCode("btCompoundShapeData_m_childShapePtr_get", "D_btCompoundShapeData_m_childShapePtr_get"));
  mixin(bindCode("btCompoundShapeData_m_numChildShapes_set", "D_btCompoundShapeData_m_numChildShapes_set"));
  mixin(bindCode("btCompoundShapeData_m_numChildShapes_get", "D_btCompoundShapeData_m_numChildShapes_get"));
  mixin(bindCode("btCompoundShapeData_m_collisionMargin_set", "D_btCompoundShapeData_m_collisionMargin_set"));
  mixin(bindCode("btCompoundShapeData_m_collisionMargin_get", "D_btCompoundShapeData_m_collisionMargin_get"));
  mixin(bindCode("new_btCompoundShapeData", "D_new_btCompoundShapeData"));
  mixin(bindCode("delete_btCompoundShapeData", "D_delete_btCompoundShapeData"));
  mixin(bindCode("new_btBU_Simplex1to4__SWIG_0", "D_new_btBU_Simplex1to4__SWIG_0"));
  mixin(bindCode("new_btBU_Simplex1to4__SWIG_1", "D_new_btBU_Simplex1to4__SWIG_1"));
  mixin(bindCode("new_btBU_Simplex1to4__SWIG_2", "D_new_btBU_Simplex1to4__SWIG_2"));
  mixin(bindCode("new_btBU_Simplex1to4__SWIG_3", "D_new_btBU_Simplex1to4__SWIG_3"));
  mixin(bindCode("new_btBU_Simplex1to4__SWIG_4", "D_new_btBU_Simplex1to4__SWIG_4"));
  mixin(bindCode("btBU_Simplex1to4_reset", "D_btBU_Simplex1to4_reset"));
  mixin(bindCode("btBU_Simplex1to4_getAabb", "D_btBU_Simplex1to4_getAabb"));
  mixin(bindCode("btBU_Simplex1to4_addVertex", "D_btBU_Simplex1to4_addVertex"));
  mixin(bindCode("btBU_Simplex1to4_getNumVertices", "D_btBU_Simplex1to4_getNumVertices"));
  mixin(bindCode("btBU_Simplex1to4_getNumEdges", "D_btBU_Simplex1to4_getNumEdges"));
  mixin(bindCode("btBU_Simplex1to4_getEdge", "D_btBU_Simplex1to4_getEdge"));
  mixin(bindCode("btBU_Simplex1to4_getVertex", "D_btBU_Simplex1to4_getVertex"));
  mixin(bindCode("btBU_Simplex1to4_getNumPlanes", "D_btBU_Simplex1to4_getNumPlanes"));
  mixin(bindCode("btBU_Simplex1to4_getPlane", "D_btBU_Simplex1to4_getPlane"));
  mixin(bindCode("btBU_Simplex1to4_getIndex", "D_btBU_Simplex1to4_getIndex"));
  mixin(bindCode("btBU_Simplex1to4_isInside", "D_btBU_Simplex1to4_isInside"));
  mixin(bindCode("btBU_Simplex1to4_getName", "D_btBU_Simplex1to4_getName"));
  mixin(bindCode("delete_btBU_Simplex1to4", "D_delete_btBU_Simplex1to4"));
  mixin(bindCode("btBU_Simplex1to4_Upcast", "D_btBU_Simplex1to4_Upcast"));
  mixin(bindCode("new_btEmptyShape", "D_new_btEmptyShape"));
  mixin(bindCode("delete_btEmptyShape", "D_delete_btEmptyShape"));
  mixin(bindCode("btEmptyShape_getAabb", "D_btEmptyShape_getAabb"));
  mixin(bindCode("btEmptyShape_setLocalScaling", "D_btEmptyShape_setLocalScaling"));
  mixin(bindCode("btEmptyShape_getLocalScaling", "D_btEmptyShape_getLocalScaling"));
  mixin(bindCode("btEmptyShape_calculateLocalInertia", "D_btEmptyShape_calculateLocalInertia"));
  mixin(bindCode("btEmptyShape_getName", "D_btEmptyShape_getName"));
  mixin(bindCode("btEmptyShape_processAllTriangles", "D_btEmptyShape_processAllTriangles"));
  mixin(bindCode("new_btMultiSphereShape", "D_new_btMultiSphereShape"));
  mixin(bindCode("btMultiSphereShape_calculateLocalInertia", "D_btMultiSphereShape_calculateLocalInertia"));
  mixin(bindCode("btMultiSphereShape_localGetSupportingVertexWithoutMargin", "D_btMultiSphereShape_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin", "D_btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btMultiSphereShape_getSphereCount", "D_btMultiSphereShape_getSphereCount"));
  mixin(bindCode("btMultiSphereShape_getSpherePosition", "D_btMultiSphereShape_getSpherePosition"));
  mixin(bindCode("btMultiSphereShape_getSphereRadius", "D_btMultiSphereShape_getSphereRadius"));
  mixin(bindCode("btMultiSphereShape_getName", "D_btMultiSphereShape_getName"));
  mixin(bindCode("btMultiSphereShape_calculateSerializeBufferSize", "D_btMultiSphereShape_calculateSerializeBufferSize"));
  mixin(bindCode("btMultiSphereShape_serialize", "D_btMultiSphereShape_serialize"));
  mixin(bindCode("delete_btMultiSphereShape", "D_delete_btMultiSphereShape"));
  mixin(bindCode("btMultiSphereShape_Upcast", "D_btMultiSphereShape_Upcast"));
  mixin(bindCode("btPositionAndRadius_m_pos_set", "D_btPositionAndRadius_m_pos_set"));
  mixin(bindCode("btPositionAndRadius_m_pos_get", "D_btPositionAndRadius_m_pos_get"));
  mixin(bindCode("btPositionAndRadius_m_radius_set", "D_btPositionAndRadius_m_radius_set"));
  mixin(bindCode("btPositionAndRadius_m_radius_get", "D_btPositionAndRadius_m_radius_get"));
  mixin(bindCode("new_btPositionAndRadius", "D_new_btPositionAndRadius"));
  mixin(bindCode("delete_btPositionAndRadius", "D_delete_btPositionAndRadius"));
  mixin(bindCode("btMultiSphereShapeData_m_convexInternalShapeData_set", "D_btMultiSphereShapeData_m_convexInternalShapeData_set"));
  mixin(bindCode("btMultiSphereShapeData_m_convexInternalShapeData_get", "D_btMultiSphereShapeData_m_convexInternalShapeData_get"));
  mixin(bindCode("btMultiSphereShapeData_m_localPositionArrayPtr_set", "D_btMultiSphereShapeData_m_localPositionArrayPtr_set"));
  mixin(bindCode("btMultiSphereShapeData_m_localPositionArrayPtr_get", "D_btMultiSphereShapeData_m_localPositionArrayPtr_get"));
  mixin(bindCode("btMultiSphereShapeData_m_localPositionArraySize_set", "D_btMultiSphereShapeData_m_localPositionArraySize_set"));
  mixin(bindCode("btMultiSphereShapeData_m_localPositionArraySize_get", "D_btMultiSphereShapeData_m_localPositionArraySize_get"));
  mixin(bindCode("btMultiSphereShapeData_m_padding_set", "D_btMultiSphereShapeData_m_padding_set"));
  mixin(bindCode("btMultiSphereShapeData_m_padding_get", "D_btMultiSphereShapeData_m_padding_get"));
  mixin(bindCode("new_btMultiSphereShapeData", "D_new_btMultiSphereShapeData"));
  mixin(bindCode("delete_btMultiSphereShapeData", "D_delete_btMultiSphereShapeData"));
  mixin(bindCode("new_btUniformScalingShape", "D_new_btUniformScalingShape"));
  mixin(bindCode("delete_btUniformScalingShape", "D_delete_btUniformScalingShape"));
  mixin(bindCode("btUniformScalingShape_localGetSupportingVertexWithoutMargin", "D_btUniformScalingShape_localGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btUniformScalingShape_localGetSupportingVertex", "D_btUniformScalingShape_localGetSupportingVertex"));
  mixin(bindCode("btUniformScalingShape_batchedUnitVectorGetSupportingVertexWithoutMargin", "D_btUniformScalingShape_batchedUnitVectorGetSupportingVertexWithoutMargin"));
  mixin(bindCode("btUniformScalingShape_calculateLocalInertia", "D_btUniformScalingShape_calculateLocalInertia"));
  mixin(bindCode("btUniformScalingShape_getUniformScalingFactor", "D_btUniformScalingShape_getUniformScalingFactor"));
  mixin(bindCode("btUniformScalingShape_getChildShape__SWIG_0", "D_btUniformScalingShape_getChildShape__SWIG_0"));
  mixin(bindCode("btUniformScalingShape_getName", "D_btUniformScalingShape_getName"));
  mixin(bindCode("btUniformScalingShape_getAabb", "D_btUniformScalingShape_getAabb"));
  mixin(bindCode("btUniformScalingShape_getAabbSlow", "D_btUniformScalingShape_getAabbSlow"));
  mixin(bindCode("btUniformScalingShape_setLocalScaling", "D_btUniformScalingShape_setLocalScaling"));
  mixin(bindCode("btUniformScalingShape_getLocalScaling", "D_btUniformScalingShape_getLocalScaling"));
  mixin(bindCode("btUniformScalingShape_setMargin", "D_btUniformScalingShape_setMargin"));
  mixin(bindCode("btUniformScalingShape_getMargin", "D_btUniformScalingShape_getMargin"));
  mixin(bindCode("btUniformScalingShape_getNumPreferredPenetrationDirections", "D_btUniformScalingShape_getNumPreferredPenetrationDirections"));
  mixin(bindCode("btUniformScalingShape_getPreferredPenetrationDirection", "D_btUniformScalingShape_getPreferredPenetrationDirection"));
  mixin(bindCode("btUniformScalingShape_Upcast", "D_btUniformScalingShape_Upcast"));
  mixin(bindCode("delete_btCollisionConfiguration", "D_delete_btCollisionConfiguration"));
  mixin(bindCode("btCollisionConfiguration_getPersistentManifoldPool", "D_btCollisionConfiguration_getPersistentManifoldPool"));
  mixin(bindCode("btCollisionConfiguration_getCollisionAlgorithmPool", "D_btCollisionConfiguration_getCollisionAlgorithmPool"));
  mixin(bindCode("btCollisionConfiguration_getStackAllocator", "D_btCollisionConfiguration_getStackAllocator"));
  mixin(bindCode("btCollisionConfiguration_getCollisionAlgorithmCreateFunc", "D_btCollisionConfiguration_getCollisionAlgorithmCreateFunc"));
  mixin(bindCode("new_btSphereSphereCollisionAlgorithm__SWIG_0", "D_new_btSphereSphereCollisionAlgorithm__SWIG_0"));
  mixin(bindCode("new_btSphereSphereCollisionAlgorithm__SWIG_1", "D_new_btSphereSphereCollisionAlgorithm__SWIG_1"));
  mixin(bindCode("btSphereSphereCollisionAlgorithm_processCollision", "D_btSphereSphereCollisionAlgorithm_processCollision"));
  mixin(bindCode("btSphereSphereCollisionAlgorithm_calculateTimeOfImpact", "D_btSphereSphereCollisionAlgorithm_calculateTimeOfImpact"));
  mixin(bindCode("btSphereSphereCollisionAlgorithm_getAllContactManifolds", "D_btSphereSphereCollisionAlgorithm_getAllContactManifolds"));
  mixin(bindCode("delete_btSphereSphereCollisionAlgorithm", "D_delete_btSphereSphereCollisionAlgorithm"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_stackAlloc_set", "D_btDefaultCollisionConstructionInfo_m_stackAlloc_set"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_stackAlloc_get", "D_btDefaultCollisionConstructionInfo_m_stackAlloc_get"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_persistentManifoldPool_set", "D_btDefaultCollisionConstructionInfo_m_persistentManifoldPool_set"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_persistentManifoldPool_get", "D_btDefaultCollisionConstructionInfo_m_persistentManifoldPool_get"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_set", "D_btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_set"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_get", "D_btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_get"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_set", "D_btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_set"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_get", "D_btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_get"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_set", "D_btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_set"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_get", "D_btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_get"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_set", "D_btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_set"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_get", "D_btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_get"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_set", "D_btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_set"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_get", "D_btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_get"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_set", "D_btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_set"));
  mixin(bindCode("btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_get", "D_btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_get"));
  mixin(bindCode("new_btDefaultCollisionConstructionInfo", "D_new_btDefaultCollisionConstructionInfo"));
  mixin(bindCode("delete_btDefaultCollisionConstructionInfo", "D_delete_btDefaultCollisionConstructionInfo"));
  mixin(bindCode("new_btDefaultCollisionConfiguration__SWIG_0", "D_new_btDefaultCollisionConfiguration__SWIG_0"));
  mixin(bindCode("new_btDefaultCollisionConfiguration__SWIG_1", "D_new_btDefaultCollisionConfiguration__SWIG_1"));
  mixin(bindCode("delete_btDefaultCollisionConfiguration", "D_delete_btDefaultCollisionConfiguration"));
  mixin(bindCode("btDefaultCollisionConfiguration_getPersistentManifoldPool", "D_btDefaultCollisionConfiguration_getPersistentManifoldPool"));
  mixin(bindCode("btDefaultCollisionConfiguration_getCollisionAlgorithmPool", "D_btDefaultCollisionConfiguration_getCollisionAlgorithmPool"));
  mixin(bindCode("btDefaultCollisionConfiguration_getStackAllocator", "D_btDefaultCollisionConfiguration_getStackAllocator"));
  mixin(bindCode("btDefaultCollisionConfiguration_getSimplexSolver", "D_btDefaultCollisionConfiguration_getSimplexSolver"));
  mixin(bindCode("btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc", "D_btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc"));
  mixin(bindCode("btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_0", "D_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_0"));
  mixin(bindCode("btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_1", "D_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_1"));
  mixin(bindCode("btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_2", "D_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_2"));
  mixin(bindCode("btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_0", "D_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_0"));
  mixin(bindCode("btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_1", "D_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_1"));
  mixin(bindCode("btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_2", "D_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_2"));
  mixin(bindCode("btDefaultCollisionConfiguration_Upcast", "D_btDefaultCollisionConfiguration_Upcast"));
  mixin(bindCode("new_btDispatcherInfo", "D_new_btDispatcherInfo"));
  mixin(bindCode("btDispatcherInfo_m_timeStep_set", "D_btDispatcherInfo_m_timeStep_set"));
  mixin(bindCode("btDispatcherInfo_m_timeStep_get", "D_btDispatcherInfo_m_timeStep_get"));
  mixin(bindCode("btDispatcherInfo_m_stepCount_set", "D_btDispatcherInfo_m_stepCount_set"));
  mixin(bindCode("btDispatcherInfo_m_stepCount_get", "D_btDispatcherInfo_m_stepCount_get"));
  mixin(bindCode("btDispatcherInfo_m_dispatchFunc_set", "D_btDispatcherInfo_m_dispatchFunc_set"));
  mixin(bindCode("btDispatcherInfo_m_dispatchFunc_get", "D_btDispatcherInfo_m_dispatchFunc_get"));
  mixin(bindCode("btDispatcherInfo_m_timeOfImpact_set", "D_btDispatcherInfo_m_timeOfImpact_set"));
  mixin(bindCode("btDispatcherInfo_m_timeOfImpact_get", "D_btDispatcherInfo_m_timeOfImpact_get"));
  mixin(bindCode("btDispatcherInfo_m_useContinuous_set", "D_btDispatcherInfo_m_useContinuous_set"));
  mixin(bindCode("btDispatcherInfo_m_useContinuous_get", "D_btDispatcherInfo_m_useContinuous_get"));
  mixin(bindCode("btDispatcherInfo_m_debugDraw_set", "D_btDispatcherInfo_m_debugDraw_set"));
  mixin(bindCode("btDispatcherInfo_m_debugDraw_get", "D_btDispatcherInfo_m_debugDraw_get"));
  mixin(bindCode("btDispatcherInfo_m_enableSatConvex_set", "D_btDispatcherInfo_m_enableSatConvex_set"));
  mixin(bindCode("btDispatcherInfo_m_enableSatConvex_get", "D_btDispatcherInfo_m_enableSatConvex_get"));
  mixin(bindCode("btDispatcherInfo_m_enableSPU_set", "D_btDispatcherInfo_m_enableSPU_set"));
  mixin(bindCode("btDispatcherInfo_m_enableSPU_get", "D_btDispatcherInfo_m_enableSPU_get"));
  mixin(bindCode("btDispatcherInfo_m_useEpa_set", "D_btDispatcherInfo_m_useEpa_set"));
  mixin(bindCode("btDispatcherInfo_m_useEpa_get", "D_btDispatcherInfo_m_useEpa_get"));
  mixin(bindCode("btDispatcherInfo_m_allowedCcdPenetration_set", "D_btDispatcherInfo_m_allowedCcdPenetration_set"));
  mixin(bindCode("btDispatcherInfo_m_allowedCcdPenetration_get", "D_btDispatcherInfo_m_allowedCcdPenetration_get"));
  mixin(bindCode("btDispatcherInfo_m_useConvexConservativeDistanceUtil_set", "D_btDispatcherInfo_m_useConvexConservativeDistanceUtil_set"));
  mixin(bindCode("btDispatcherInfo_m_useConvexConservativeDistanceUtil_get", "D_btDispatcherInfo_m_useConvexConservativeDistanceUtil_get"));
  mixin(bindCode("btDispatcherInfo_m_convexConservativeDistanceThreshold_set", "D_btDispatcherInfo_m_convexConservativeDistanceThreshold_set"));
  mixin(bindCode("btDispatcherInfo_m_convexConservativeDistanceThreshold_get", "D_btDispatcherInfo_m_convexConservativeDistanceThreshold_get"));
  mixin(bindCode("btDispatcherInfo_m_stackAllocator_set", "D_btDispatcherInfo_m_stackAllocator_set"));
  mixin(bindCode("btDispatcherInfo_m_stackAllocator_get", "D_btDispatcherInfo_m_stackAllocator_get"));
  mixin(bindCode("delete_btDispatcherInfo", "D_delete_btDispatcherInfo"));
  mixin(bindCode("delete_btDispatcher", "D_delete_btDispatcher"));
  mixin(bindCode("btDispatcher_findAlgorithm__SWIG_0", "D_btDispatcher_findAlgorithm__SWIG_0"));
  mixin(bindCode("btDispatcher_findAlgorithm__SWIG_1", "D_btDispatcher_findAlgorithm__SWIG_1"));
  mixin(bindCode("btDispatcher_getNewManifold", "D_btDispatcher_getNewManifold"));
  mixin(bindCode("btDispatcher_releaseManifold", "D_btDispatcher_releaseManifold"));
  mixin(bindCode("btDispatcher_clearManifold", "D_btDispatcher_clearManifold"));
  mixin(bindCode("btDispatcher_needsCollision", "D_btDispatcher_needsCollision"));
  mixin(bindCode("btDispatcher_needsResponse", "D_btDispatcher_needsResponse"));
  mixin(bindCode("btDispatcher_dispatchAllCollisionPairs", "D_btDispatcher_dispatchAllCollisionPairs"));
  mixin(bindCode("btDispatcher_getNumManifolds", "D_btDispatcher_getNumManifolds"));
  mixin(bindCode("btDispatcher_getManifoldByIndexInternal", "D_btDispatcher_getManifoldByIndexInternal"));
  mixin(bindCode("btDispatcher_getInternalManifoldPointer", "D_btDispatcher_getInternalManifoldPointer"));
  mixin(bindCode("btDispatcher_getInternalManifoldPool__SWIG_0", "D_btDispatcher_getInternalManifoldPool__SWIG_0"));
  mixin(bindCode("btDispatcher_allocateCollisionAlgorithm", "D_btDispatcher_allocateCollisionAlgorithm"));
  mixin(bindCode("btDispatcher_freeCollisionAlgorithm", "D_btDispatcher_freeCollisionAlgorithm"));
  mixin(bindCode("USE_DISPATCH_REGISTRY_ARRAY_get", "D_USE_DISPATCH_REGISTRY_ARRAY_get"));
  mixin(bindCode("btCollisionDispatcher_getDispatcherFlags", "D_btCollisionDispatcher_getDispatcherFlags"));
  mixin(bindCode("btCollisionDispatcher_setDispatcherFlags", "D_btCollisionDispatcher_setDispatcherFlags"));
  mixin(bindCode("btCollisionDispatcher_registerCollisionCreateFunc", "D_btCollisionDispatcher_registerCollisionCreateFunc"));
  mixin(bindCode("btCollisionDispatcher_getNumManifolds", "D_btCollisionDispatcher_getNumManifolds"));
  mixin(bindCode("btCollisionDispatcher_getInternalManifoldPointer", "D_btCollisionDispatcher_getInternalManifoldPointer"));
  mixin(bindCode("btCollisionDispatcher_getManifoldByIndexInternal__SWIG_0", "D_btCollisionDispatcher_getManifoldByIndexInternal__SWIG_0"));
  mixin(bindCode("new_btCollisionDispatcher", "D_new_btCollisionDispatcher"));
  mixin(bindCode("delete_btCollisionDispatcher", "D_delete_btCollisionDispatcher"));
  mixin(bindCode("btCollisionDispatcher_getNewManifold", "D_btCollisionDispatcher_getNewManifold"));
  mixin(bindCode("btCollisionDispatcher_releaseManifold", "D_btCollisionDispatcher_releaseManifold"));
  mixin(bindCode("btCollisionDispatcher_clearManifold", "D_btCollisionDispatcher_clearManifold"));
  mixin(bindCode("btCollisionDispatcher_findAlgorithm__SWIG_0", "D_btCollisionDispatcher_findAlgorithm__SWIG_0"));
  mixin(bindCode("btCollisionDispatcher_findAlgorithm__SWIG_1", "D_btCollisionDispatcher_findAlgorithm__SWIG_1"));
  mixin(bindCode("btCollisionDispatcher_needsCollision", "D_btCollisionDispatcher_needsCollision"));
  mixin(bindCode("btCollisionDispatcher_needsResponse", "D_btCollisionDispatcher_needsResponse"));
  mixin(bindCode("btCollisionDispatcher_dispatchAllCollisionPairs", "D_btCollisionDispatcher_dispatchAllCollisionPairs"));
  mixin(bindCode("btCollisionDispatcher_setNearCallback", "D_btCollisionDispatcher_setNearCallback"));
  mixin(bindCode("btCollisionDispatcher_getNearCallback", "D_btCollisionDispatcher_getNearCallback"));
  mixin(bindCode("btCollisionDispatcher_defaultNearCallback", "D_btCollisionDispatcher_defaultNearCallback"));
  mixin(bindCode("btCollisionDispatcher_allocateCollisionAlgorithm", "D_btCollisionDispatcher_allocateCollisionAlgorithm"));
  mixin(bindCode("btCollisionDispatcher_freeCollisionAlgorithm", "D_btCollisionDispatcher_freeCollisionAlgorithm"));
  mixin(bindCode("btCollisionDispatcher_getCollisionConfiguration__SWIG_0", "D_btCollisionDispatcher_getCollisionConfiguration__SWIG_0"));
  mixin(bindCode("btCollisionDispatcher_setCollisionConfiguration", "D_btCollisionDispatcher_setCollisionConfiguration"));
  mixin(bindCode("btCollisionDispatcher_getInternalManifoldPool__SWIG_0", "D_btCollisionDispatcher_getInternalManifoldPool__SWIG_0"));
  mixin(bindCode("btCollisionDispatcher_Upcast", "D_btCollisionDispatcher_Upcast"));
  mixin(bindCode("delete_btBroadphaseAabbCallback", "D_delete_btBroadphaseAabbCallback"));
  mixin(bindCode("btBroadphaseAabbCallback_process", "D_btBroadphaseAabbCallback_process"));
  mixin(bindCode("btBroadphaseRayCallback_m_rayDirectionInverse_set", "D_btBroadphaseRayCallback_m_rayDirectionInverse_set"));
  mixin(bindCode("btBroadphaseRayCallback_m_rayDirectionInverse_get", "D_btBroadphaseRayCallback_m_rayDirectionInverse_get"));
  mixin(bindCode("btBroadphaseRayCallback_m_signs_set", "D_btBroadphaseRayCallback_m_signs_set"));
  mixin(bindCode("btBroadphaseRayCallback_m_signs_get", "D_btBroadphaseRayCallback_m_signs_get"));
  mixin(bindCode("btBroadphaseRayCallback_m_lambda_max_set", "D_btBroadphaseRayCallback_m_lambda_max_set"));
  mixin(bindCode("btBroadphaseRayCallback_m_lambda_max_get", "D_btBroadphaseRayCallback_m_lambda_max_get"));
  mixin(bindCode("delete_btBroadphaseRayCallback", "D_delete_btBroadphaseRayCallback"));
  mixin(bindCode("btBroadphaseRayCallback_Upcast", "D_btBroadphaseRayCallback_Upcast"));
  mixin(bindCode("delete_btBroadphaseInterface", "D_delete_btBroadphaseInterface"));
  mixin(bindCode("btBroadphaseInterface_createProxy", "D_btBroadphaseInterface_createProxy"));
  mixin(bindCode("btBroadphaseInterface_destroyProxy", "D_btBroadphaseInterface_destroyProxy"));
  mixin(bindCode("btBroadphaseInterface_setAabb", "D_btBroadphaseInterface_setAabb"));
  mixin(bindCode("btBroadphaseInterface_getAabb", "D_btBroadphaseInterface_getAabb"));
  mixin(bindCode("btBroadphaseInterface_rayTest__SWIG_0", "D_btBroadphaseInterface_rayTest__SWIG_0"));
  mixin(bindCode("btBroadphaseInterface_rayTest__SWIG_1", "D_btBroadphaseInterface_rayTest__SWIG_1"));
  mixin(bindCode("btBroadphaseInterface_rayTest__SWIG_2", "D_btBroadphaseInterface_rayTest__SWIG_2"));
  mixin(bindCode("btBroadphaseInterface_aabbTest", "D_btBroadphaseInterface_aabbTest"));
  mixin(bindCode("btBroadphaseInterface_calculateOverlappingPairs", "D_btBroadphaseInterface_calculateOverlappingPairs"));
  mixin(bindCode("btBroadphaseInterface_getOverlappingPairCache__SWIG_0", "D_btBroadphaseInterface_getOverlappingPairCache__SWIG_0"));
  mixin(bindCode("btBroadphaseInterface_getBroadphaseAabb", "D_btBroadphaseInterface_getBroadphaseAabb"));
  mixin(bindCode("btBroadphaseInterface_resetPool", "D_btBroadphaseInterface_resetPool"));
  mixin(bindCode("btBroadphaseInterface_printStats", "D_btBroadphaseInterface_printStats"));
  mixin(bindCode("btSimpleBroadphaseProxy_m_nextFree_set", "D_btSimpleBroadphaseProxy_m_nextFree_set"));
  mixin(bindCode("btSimpleBroadphaseProxy_m_nextFree_get", "D_btSimpleBroadphaseProxy_m_nextFree_get"));
  mixin(bindCode("new_btSimpleBroadphaseProxy__SWIG_0", "D_new_btSimpleBroadphaseProxy__SWIG_0"));
  mixin(bindCode("new_btSimpleBroadphaseProxy__SWIG_1", "D_new_btSimpleBroadphaseProxy__SWIG_1"));
  mixin(bindCode("btSimpleBroadphaseProxy_SetNextFree", "D_btSimpleBroadphaseProxy_SetNextFree"));
  mixin(bindCode("btSimpleBroadphaseProxy_GetNextFree", "D_btSimpleBroadphaseProxy_GetNextFree"));
  mixin(bindCode("delete_btSimpleBroadphaseProxy", "D_delete_btSimpleBroadphaseProxy"));
  mixin(bindCode("new_btSimpleBroadphase__SWIG_0", "D_new_btSimpleBroadphase__SWIG_0"));
  mixin(bindCode("new_btSimpleBroadphase__SWIG_1", "D_new_btSimpleBroadphase__SWIG_1"));
  mixin(bindCode("new_btSimpleBroadphase__SWIG_2", "D_new_btSimpleBroadphase__SWIG_2"));
  mixin(bindCode("delete_btSimpleBroadphase", "D_delete_btSimpleBroadphase"));
  mixin(bindCode("btSimpleBroadphase_aabbOverlap", "D_btSimpleBroadphase_aabbOverlap"));
  mixin(bindCode("btSimpleBroadphase_createProxy", "D_btSimpleBroadphase_createProxy"));
  mixin(bindCode("btSimpleBroadphase_calculateOverlappingPairs", "D_btSimpleBroadphase_calculateOverlappingPairs"));
  mixin(bindCode("btSimpleBroadphase_destroyProxy", "D_btSimpleBroadphase_destroyProxy"));
  mixin(bindCode("btSimpleBroadphase_setAabb", "D_btSimpleBroadphase_setAabb"));
  mixin(bindCode("btSimpleBroadphase_getAabb", "D_btSimpleBroadphase_getAabb"));
  mixin(bindCode("btSimpleBroadphase_rayTest__SWIG_0", "D_btSimpleBroadphase_rayTest__SWIG_0"));
  mixin(bindCode("btSimpleBroadphase_rayTest__SWIG_1", "D_btSimpleBroadphase_rayTest__SWIG_1"));
  mixin(bindCode("btSimpleBroadphase_rayTest__SWIG_2", "D_btSimpleBroadphase_rayTest__SWIG_2"));
  mixin(bindCode("btSimpleBroadphase_aabbTest", "D_btSimpleBroadphase_aabbTest"));
  mixin(bindCode("btSimpleBroadphase_getOverlappingPairCache__SWIG_0", "D_btSimpleBroadphase_getOverlappingPairCache__SWIG_0"));
  mixin(bindCode("btSimpleBroadphase_testAabbOverlap", "D_btSimpleBroadphase_testAabbOverlap"));
  mixin(bindCode("btSimpleBroadphase_getBroadphaseAabb", "D_btSimpleBroadphase_getBroadphaseAabb"));
  mixin(bindCode("btSimpleBroadphase_printStats", "D_btSimpleBroadphase_printStats"));
  mixin(bindCode("btSimpleBroadphase_Upcast", "D_btSimpleBroadphase_Upcast"));
  mixin(bindCode("USE_OVERLAP_TEST_ON_REMOVES_get", "D_USE_OVERLAP_TEST_ON_REMOVES_get"));
  mixin(bindCode("gOverlappingPairs_set", "D_gOverlappingPairs_set"));
  mixin(bindCode("gOverlappingPairs_get", "D_gOverlappingPairs_get"));
  mixin(bindCode("new_btAxisSweep3__SWIG_0", "D_new_btAxisSweep3__SWIG_0"));
  mixin(bindCode("new_btAxisSweep3__SWIG_1", "D_new_btAxisSweep3__SWIG_1"));
  mixin(bindCode("new_btAxisSweep3__SWIG_2", "D_new_btAxisSweep3__SWIG_2"));
  mixin(bindCode("new_btAxisSweep3__SWIG_3", "D_new_btAxisSweep3__SWIG_3"));
  mixin(bindCode("delete_btAxisSweep3", "D_delete_btAxisSweep3"));
  mixin(bindCode("new_bt32BitAxisSweep3__SWIG_0", "D_new_bt32BitAxisSweep3__SWIG_0"));
  mixin(bindCode("new_bt32BitAxisSweep3__SWIG_1", "D_new_bt32BitAxisSweep3__SWIG_1"));
  mixin(bindCode("new_bt32BitAxisSweep3__SWIG_2", "D_new_bt32BitAxisSweep3__SWIG_2"));
  mixin(bindCode("new_bt32BitAxisSweep3__SWIG_3", "D_new_bt32BitAxisSweep3__SWIG_3"));
  mixin(bindCode("delete_bt32BitAxisSweep3", "D_delete_bt32BitAxisSweep3"));
  mixin(bindCode("DBVT_BP_PROFILE_get", "D_DBVT_BP_PROFILE_get"));
  mixin(bindCode("DBVT_BP_PREVENTFALSEUPDATE_get", "D_DBVT_BP_PREVENTFALSEUPDATE_get"));
  mixin(bindCode("DBVT_BP_ACCURATESLEEPING_get", "D_DBVT_BP_ACCURATESLEEPING_get"));
  mixin(bindCode("DBVT_BP_ENABLE_BENCHMARK_get", "D_DBVT_BP_ENABLE_BENCHMARK_get"));
  mixin(bindCode("btDbvtProxy_leaf_set", "D_btDbvtProxy_leaf_set"));
  mixin(bindCode("btDbvtProxy_leaf_get", "D_btDbvtProxy_leaf_get"));
  mixin(bindCode("btDbvtProxy_links_set", "D_btDbvtProxy_links_set"));
  mixin(bindCode("btDbvtProxy_links_get", "D_btDbvtProxy_links_get"));
  mixin(bindCode("btDbvtProxy_stage_set", "D_btDbvtProxy_stage_set"));
  mixin(bindCode("btDbvtProxy_stage_get", "D_btDbvtProxy_stage_get"));
  mixin(bindCode("new_btDbvtProxy", "D_new_btDbvtProxy"));
  mixin(bindCode("delete_btDbvtProxy", "D_delete_btDbvtProxy"));
  mixin(bindCode("btDbvtBroadphase_m_sets_set", "D_btDbvtBroadphase_m_sets_set"));
  mixin(bindCode("btDbvtBroadphase_m_sets_get", "D_btDbvtBroadphase_m_sets_get"));
  mixin(bindCode("btDbvtBroadphase_m_stageRoots_set", "D_btDbvtBroadphase_m_stageRoots_set"));
  mixin(bindCode("btDbvtBroadphase_m_stageRoots_get", "D_btDbvtBroadphase_m_stageRoots_get"));
  mixin(bindCode("btDbvtBroadphase_m_paircache_set", "D_btDbvtBroadphase_m_paircache_set"));
  mixin(bindCode("btDbvtBroadphase_m_paircache_get", "D_btDbvtBroadphase_m_paircache_get"));
  mixin(bindCode("btDbvtBroadphase_m_prediction_set", "D_btDbvtBroadphase_m_prediction_set"));
  mixin(bindCode("btDbvtBroadphase_m_prediction_get", "D_btDbvtBroadphase_m_prediction_get"));
  mixin(bindCode("btDbvtBroadphase_m_stageCurrent_set", "D_btDbvtBroadphase_m_stageCurrent_set"));
  mixin(bindCode("btDbvtBroadphase_m_stageCurrent_get", "D_btDbvtBroadphase_m_stageCurrent_get"));
  mixin(bindCode("btDbvtBroadphase_m_fupdates_set", "D_btDbvtBroadphase_m_fupdates_set"));
  mixin(bindCode("btDbvtBroadphase_m_fupdates_get", "D_btDbvtBroadphase_m_fupdates_get"));
  mixin(bindCode("btDbvtBroadphase_m_dupdates_set", "D_btDbvtBroadphase_m_dupdates_set"));
  mixin(bindCode("btDbvtBroadphase_m_dupdates_get", "D_btDbvtBroadphase_m_dupdates_get"));
  mixin(bindCode("btDbvtBroadphase_m_cupdates_set", "D_btDbvtBroadphase_m_cupdates_set"));
  mixin(bindCode("btDbvtBroadphase_m_cupdates_get", "D_btDbvtBroadphase_m_cupdates_get"));
  mixin(bindCode("btDbvtBroadphase_m_newpairs_set", "D_btDbvtBroadphase_m_newpairs_set"));
  mixin(bindCode("btDbvtBroadphase_m_newpairs_get", "D_btDbvtBroadphase_m_newpairs_get"));
  mixin(bindCode("btDbvtBroadphase_m_fixedleft_set", "D_btDbvtBroadphase_m_fixedleft_set"));
  mixin(bindCode("btDbvtBroadphase_m_fixedleft_get", "D_btDbvtBroadphase_m_fixedleft_get"));
  mixin(bindCode("btDbvtBroadphase_m_updates_call_set", "D_btDbvtBroadphase_m_updates_call_set"));
  mixin(bindCode("btDbvtBroadphase_m_updates_call_get", "D_btDbvtBroadphase_m_updates_call_get"));
  mixin(bindCode("btDbvtBroadphase_m_updates_done_set", "D_btDbvtBroadphase_m_updates_done_set"));
  mixin(bindCode("btDbvtBroadphase_m_updates_done_get", "D_btDbvtBroadphase_m_updates_done_get"));
  mixin(bindCode("btDbvtBroadphase_m_updates_ratio_set", "D_btDbvtBroadphase_m_updates_ratio_set"));
  mixin(bindCode("btDbvtBroadphase_m_updates_ratio_get", "D_btDbvtBroadphase_m_updates_ratio_get"));
  mixin(bindCode("btDbvtBroadphase_m_pid_set", "D_btDbvtBroadphase_m_pid_set"));
  mixin(bindCode("btDbvtBroadphase_m_pid_get", "D_btDbvtBroadphase_m_pid_get"));
  mixin(bindCode("btDbvtBroadphase_m_cid_set", "D_btDbvtBroadphase_m_cid_set"));
  mixin(bindCode("btDbvtBroadphase_m_cid_get", "D_btDbvtBroadphase_m_cid_get"));
  mixin(bindCode("btDbvtBroadphase_m_gid_set", "D_btDbvtBroadphase_m_gid_set"));
  mixin(bindCode("btDbvtBroadphase_m_gid_get", "D_btDbvtBroadphase_m_gid_get"));
  mixin(bindCode("btDbvtBroadphase_m_releasepaircache_set", "D_btDbvtBroadphase_m_releasepaircache_set"));
  mixin(bindCode("btDbvtBroadphase_m_releasepaircache_get", "D_btDbvtBroadphase_m_releasepaircache_get"));
  mixin(bindCode("btDbvtBroadphase_m_deferedcollide_set", "D_btDbvtBroadphase_m_deferedcollide_set"));
  mixin(bindCode("btDbvtBroadphase_m_deferedcollide_get", "D_btDbvtBroadphase_m_deferedcollide_get"));
  mixin(bindCode("btDbvtBroadphase_m_needcleanup_set", "D_btDbvtBroadphase_m_needcleanup_set"));
  mixin(bindCode("btDbvtBroadphase_m_needcleanup_get", "D_btDbvtBroadphase_m_needcleanup_get"));
  mixin(bindCode("new_btDbvtBroadphase__SWIG_0", "D_new_btDbvtBroadphase__SWIG_0"));
  mixin(bindCode("new_btDbvtBroadphase__SWIG_1", "D_new_btDbvtBroadphase__SWIG_1"));
  mixin(bindCode("delete_btDbvtBroadphase", "D_delete_btDbvtBroadphase"));
  mixin(bindCode("btDbvtBroadphase_collide", "D_btDbvtBroadphase_collide"));
  mixin(bindCode("btDbvtBroadphase_optimize", "D_btDbvtBroadphase_optimize"));
  mixin(bindCode("btDbvtBroadphase_createProxy", "D_btDbvtBroadphase_createProxy"));
  mixin(bindCode("btDbvtBroadphase_destroyProxy", "D_btDbvtBroadphase_destroyProxy"));
  mixin(bindCode("btDbvtBroadphase_setAabb", "D_btDbvtBroadphase_setAabb"));
  mixin(bindCode("btDbvtBroadphase_rayTest__SWIG_0", "D_btDbvtBroadphase_rayTest__SWIG_0"));
  mixin(bindCode("btDbvtBroadphase_rayTest__SWIG_1", "D_btDbvtBroadphase_rayTest__SWIG_1"));
  mixin(bindCode("btDbvtBroadphase_rayTest__SWIG_2", "D_btDbvtBroadphase_rayTest__SWIG_2"));
  mixin(bindCode("btDbvtBroadphase_aabbTest", "D_btDbvtBroadphase_aabbTest"));
  mixin(bindCode("btDbvtBroadphase_getAabb", "D_btDbvtBroadphase_getAabb"));
  mixin(bindCode("btDbvtBroadphase_calculateOverlappingPairs", "D_btDbvtBroadphase_calculateOverlappingPairs"));
  mixin(bindCode("btDbvtBroadphase_getOverlappingPairCache__SWIG_0", "D_btDbvtBroadphase_getOverlappingPairCache__SWIG_0"));
  mixin(bindCode("btDbvtBroadphase_getBroadphaseAabb", "D_btDbvtBroadphase_getBroadphaseAabb"));
  mixin(bindCode("btDbvtBroadphase_printStats", "D_btDbvtBroadphase_printStats"));
  mixin(bindCode("btDbvtBroadphase_resetPool", "D_btDbvtBroadphase_resetPool"));
  mixin(bindCode("btDbvtBroadphase_performDeferredRemoval", "D_btDbvtBroadphase_performDeferredRemoval"));
  mixin(bindCode("btDbvtBroadphase_setVelocityPrediction", "D_btDbvtBroadphase_setVelocityPrediction"));
  mixin(bindCode("btDbvtBroadphase_getVelocityPrediction", "D_btDbvtBroadphase_getVelocityPrediction"));
  mixin(bindCode("btDbvtBroadphase_setAabbForceUpdate", "D_btDbvtBroadphase_setAabbForceUpdate"));
  mixin(bindCode("btDbvtBroadphase_benchmark", "D_btDbvtBroadphase_benchmark"));
  mixin(bindCode("btDbvtBroadphase_Upcast", "D_btDbvtBroadphase_Upcast"));
  mixin(bindCode("new_btDiscreteDynamicsWorld", "D_new_btDiscreteDynamicsWorld"));
  mixin(bindCode("delete_btDiscreteDynamicsWorld", "D_delete_btDiscreteDynamicsWorld"));
  mixin(bindCode("btDiscreteDynamicsWorld_stepSimulation__SWIG_0", "D_btDiscreteDynamicsWorld_stepSimulation__SWIG_0"));
  mixin(bindCode("btDiscreteDynamicsWorld_stepSimulation__SWIG_1", "D_btDiscreteDynamicsWorld_stepSimulation__SWIG_1"));
  mixin(bindCode("btDiscreteDynamicsWorld_stepSimulation__SWIG_2", "D_btDiscreteDynamicsWorld_stepSimulation__SWIG_2"));
  mixin(bindCode("btDiscreteDynamicsWorld_synchronizeMotionStates", "D_btDiscreteDynamicsWorld_synchronizeMotionStates"));
  mixin(bindCode("btDiscreteDynamicsWorld_synchronizeSingleMotionState", "D_btDiscreteDynamicsWorld_synchronizeSingleMotionState"));
  mixin(bindCode("btDiscreteDynamicsWorld_addConstraint__SWIG_0", "D_btDiscreteDynamicsWorld_addConstraint__SWIG_0"));
  mixin(bindCode("btDiscreteDynamicsWorld_addConstraint__SWIG_1", "D_btDiscreteDynamicsWorld_addConstraint__SWIG_1"));
  mixin(bindCode("btDiscreteDynamicsWorld_removeConstraint", "D_btDiscreteDynamicsWorld_removeConstraint"));
  mixin(bindCode("btDiscreteDynamicsWorld_addAction", "D_btDiscreteDynamicsWorld_addAction"));
  mixin(bindCode("btDiscreteDynamicsWorld_removeAction", "D_btDiscreteDynamicsWorld_removeAction"));
  mixin(bindCode("btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_0", "D_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_0"));
  mixin(bindCode("btDiscreteDynamicsWorld_getCollisionWorld", "D_btDiscreteDynamicsWorld_getCollisionWorld"));
  mixin(bindCode("btDiscreteDynamicsWorld_setGravity", "D_btDiscreteDynamicsWorld_setGravity"));
  mixin(bindCode("btDiscreteDynamicsWorld_getGravity", "D_btDiscreteDynamicsWorld_getGravity"));
  mixin(bindCode("btDiscreteDynamicsWorld_addCollisionObject__SWIG_0", "D_btDiscreteDynamicsWorld_addCollisionObject__SWIG_0"));
  mixin(bindCode("btDiscreteDynamicsWorld_addCollisionObject__SWIG_1", "D_btDiscreteDynamicsWorld_addCollisionObject__SWIG_1"));
  mixin(bindCode("btDiscreteDynamicsWorld_addCollisionObject__SWIG_2", "D_btDiscreteDynamicsWorld_addCollisionObject__SWIG_2"));
  mixin(bindCode("btDiscreteDynamicsWorld_addRigidBody__SWIG_0", "D_btDiscreteDynamicsWorld_addRigidBody__SWIG_0"));
  mixin(bindCode("btDiscreteDynamicsWorld_addRigidBody__SWIG_1", "D_btDiscreteDynamicsWorld_addRigidBody__SWIG_1"));
  mixin(bindCode("btDiscreteDynamicsWorld_removeRigidBody", "D_btDiscreteDynamicsWorld_removeRigidBody"));
  mixin(bindCode("btDiscreteDynamicsWorld_removeCollisionObject", "D_btDiscreteDynamicsWorld_removeCollisionObject"));
  mixin(bindCode("btDiscreteDynamicsWorld_debugDrawConstraint", "D_btDiscreteDynamicsWorld_debugDrawConstraint"));
  mixin(bindCode("btDiscreteDynamicsWorld_debugDrawWorld", "D_btDiscreteDynamicsWorld_debugDrawWorld"));
  mixin(bindCode("btDiscreteDynamicsWorld_setConstraintSolver", "D_btDiscreteDynamicsWorld_setConstraintSolver"));
  mixin(bindCode("btDiscreteDynamicsWorld_getConstraintSolver", "D_btDiscreteDynamicsWorld_getConstraintSolver"));
  mixin(bindCode("btDiscreteDynamicsWorld_getNumConstraints", "D_btDiscreteDynamicsWorld_getNumConstraints"));
  mixin(bindCode("btDiscreteDynamicsWorld_getConstraint__SWIG_0", "D_btDiscreteDynamicsWorld_getConstraint__SWIG_0"));
  mixin(bindCode("btDiscreteDynamicsWorld_getWorldType", "D_btDiscreteDynamicsWorld_getWorldType"));
  mixin(bindCode("btDiscreteDynamicsWorld_clearForces", "D_btDiscreteDynamicsWorld_clearForces"));
  mixin(bindCode("btDiscreteDynamicsWorld_applyGravity", "D_btDiscreteDynamicsWorld_applyGravity"));
  mixin(bindCode("btDiscreteDynamicsWorld_setNumTasks", "D_btDiscreteDynamicsWorld_setNumTasks"));
  mixin(bindCode("btDiscreteDynamicsWorld_updateVehicles", "D_btDiscreteDynamicsWorld_updateVehicles"));
  mixin(bindCode("btDiscreteDynamicsWorld_addVehicle", "D_btDiscreteDynamicsWorld_addVehicle"));
  mixin(bindCode("btDiscreteDynamicsWorld_removeVehicle", "D_btDiscreteDynamicsWorld_removeVehicle"));
  mixin(bindCode("btDiscreteDynamicsWorld_addCharacter", "D_btDiscreteDynamicsWorld_addCharacter"));
  mixin(bindCode("btDiscreteDynamicsWorld_removeCharacter", "D_btDiscreteDynamicsWorld_removeCharacter"));
  mixin(bindCode("btDiscreteDynamicsWorld_setSynchronizeAllMotionStates", "D_btDiscreteDynamicsWorld_setSynchronizeAllMotionStates"));
  mixin(bindCode("btDiscreteDynamicsWorld_getSynchronizeAllMotionStates", "D_btDiscreteDynamicsWorld_getSynchronizeAllMotionStates"));
  mixin(bindCode("btDiscreteDynamicsWorld_serialize", "D_btDiscreteDynamicsWorld_serialize"));
  mixin(bindCode("new_btSimpleDynamicsWorld", "D_new_btSimpleDynamicsWorld"));
  mixin(bindCode("delete_btSimpleDynamicsWorld", "D_delete_btSimpleDynamicsWorld"));
  mixin(bindCode("btSimpleDynamicsWorld_stepSimulation__SWIG_0", "D_btSimpleDynamicsWorld_stepSimulation__SWIG_0"));
  mixin(bindCode("btSimpleDynamicsWorld_stepSimulation__SWIG_1", "D_btSimpleDynamicsWorld_stepSimulation__SWIG_1"));
  mixin(bindCode("btSimpleDynamicsWorld_stepSimulation__SWIG_2", "D_btSimpleDynamicsWorld_stepSimulation__SWIG_2"));
  mixin(bindCode("btSimpleDynamicsWorld_setGravity", "D_btSimpleDynamicsWorld_setGravity"));
  mixin(bindCode("btSimpleDynamicsWorld_getGravity", "D_btSimpleDynamicsWorld_getGravity"));
  mixin(bindCode("btSimpleDynamicsWorld_addRigidBody__SWIG_0", "D_btSimpleDynamicsWorld_addRigidBody__SWIG_0"));
  mixin(bindCode("btSimpleDynamicsWorld_addRigidBody__SWIG_1", "D_btSimpleDynamicsWorld_addRigidBody__SWIG_1"));
  mixin(bindCode("btSimpleDynamicsWorld_removeRigidBody", "D_btSimpleDynamicsWorld_removeRigidBody"));
  mixin(bindCode("btSimpleDynamicsWorld_debugDrawWorld", "D_btSimpleDynamicsWorld_debugDrawWorld"));
  mixin(bindCode("btSimpleDynamicsWorld_addAction", "D_btSimpleDynamicsWorld_addAction"));
  mixin(bindCode("btSimpleDynamicsWorld_removeAction", "D_btSimpleDynamicsWorld_removeAction"));
  mixin(bindCode("btSimpleDynamicsWorld_removeCollisionObject", "D_btSimpleDynamicsWorld_removeCollisionObject"));
  mixin(bindCode("btSimpleDynamicsWorld_updateAabbs", "D_btSimpleDynamicsWorld_updateAabbs"));
  mixin(bindCode("btSimpleDynamicsWorld_synchronizeMotionStates", "D_btSimpleDynamicsWorld_synchronizeMotionStates"));
  mixin(bindCode("btSimpleDynamicsWorld_setConstraintSolver", "D_btSimpleDynamicsWorld_setConstraintSolver"));
  mixin(bindCode("btSimpleDynamicsWorld_getConstraintSolver", "D_btSimpleDynamicsWorld_getConstraintSolver"));
  mixin(bindCode("btSimpleDynamicsWorld_getWorldType", "D_btSimpleDynamicsWorld_getWorldType"));
  mixin(bindCode("btSimpleDynamicsWorld_clearForces", "D_btSimpleDynamicsWorld_clearForces"));
  mixin(bindCode("gDeactivationTime_set", "D_gDeactivationTime_set"));
  mixin(bindCode("gDeactivationTime_get", "D_gDeactivationTime_get"));
  mixin(bindCode("gDisableDeactivation_set", "D_gDisableDeactivation_set"));
  mixin(bindCode("gDisableDeactivation_get", "D_gDisableDeactivation_get"));
  mixin(bindCode("btRigidBodyDataName_get", "D_btRigidBodyDataName_get"));
  mixin(bindCode("new_btRigidBody__SWIG_0", "D_new_btRigidBody__SWIG_0"));
  mixin(bindCode("new_btRigidBody__SWIG_1", "D_new_btRigidBody__SWIG_1"));
  mixin(bindCode("new_btRigidBody__SWIG_2", "D_new_btRigidBody__SWIG_2"));
  mixin(bindCode("delete_btRigidBody", "D_delete_btRigidBody"));
  mixin(bindCode("btRigidBody_proceedToTransform", "D_btRigidBody_proceedToTransform"));
  mixin(bindCode("btRigidBody_upcast__SWIG_0", "D_btRigidBody_upcast__SWIG_0"));
  mixin(bindCode("btRigidBody_predictIntegratedTransform", "D_btRigidBody_predictIntegratedTransform"));
  mixin(bindCode("btRigidBody_saveKinematicState", "D_btRigidBody_saveKinematicState"));
  mixin(bindCode("btRigidBody_applyGravity", "D_btRigidBody_applyGravity"));
  mixin(bindCode("btRigidBody_setGravity", "D_btRigidBody_setGravity"));
  mixin(bindCode("btRigidBody_getGravity", "D_btRigidBody_getGravity"));
  mixin(bindCode("btRigidBody_setDamping", "D_btRigidBody_setDamping"));
  mixin(bindCode("btRigidBody_getLinearDamping", "D_btRigidBody_getLinearDamping"));
  mixin(bindCode("btRigidBody_getAngularDamping", "D_btRigidBody_getAngularDamping"));
  mixin(bindCode("btRigidBody_getLinearSleepingThreshold", "D_btRigidBody_getLinearSleepingThreshold"));
  mixin(bindCode("btRigidBody_getAngularSleepingThreshold", "D_btRigidBody_getAngularSleepingThreshold"));
  mixin(bindCode("btRigidBody_applyDamping", "D_btRigidBody_applyDamping"));
  mixin(bindCode("btRigidBody_getCollisionShape__SWIG_0", "D_btRigidBody_getCollisionShape__SWIG_0"));
  mixin(bindCode("btRigidBody_setMassProps", "D_btRigidBody_setMassProps"));
  mixin(bindCode("btRigidBody_getLinearFactor", "D_btRigidBody_getLinearFactor"));
  mixin(bindCode("btRigidBody_setLinearFactor", "D_btRigidBody_setLinearFactor"));
  mixin(bindCode("btRigidBody_getInvMass", "D_btRigidBody_getInvMass"));
  mixin(bindCode("btRigidBody_getInvInertiaTensorWorld", "D_btRigidBody_getInvInertiaTensorWorld"));
  mixin(bindCode("btRigidBody_integrateVelocities", "D_btRigidBody_integrateVelocities"));
  mixin(bindCode("btRigidBody_setCenterOfMassTransform", "D_btRigidBody_setCenterOfMassTransform"));
  mixin(bindCode("btRigidBody_applyCentralForce", "D_btRigidBody_applyCentralForce"));
  mixin(bindCode("btRigidBody_getTotalForce", "D_btRigidBody_getTotalForce"));
  mixin(bindCode("btRigidBody_getTotalTorque", "D_btRigidBody_getTotalTorque"));
  mixin(bindCode("btRigidBody_getInvInertiaDiagLocal", "D_btRigidBody_getInvInertiaDiagLocal"));
  mixin(bindCode("btRigidBody_setInvInertiaDiagLocal", "D_btRigidBody_setInvInertiaDiagLocal"));
  mixin(bindCode("btRigidBody_setSleepingThresholds", "D_btRigidBody_setSleepingThresholds"));
  mixin(bindCode("btRigidBody_applyTorque", "D_btRigidBody_applyTorque"));
  mixin(bindCode("btRigidBody_applyForce", "D_btRigidBody_applyForce"));
  mixin(bindCode("btRigidBody_applyCentralImpulse", "D_btRigidBody_applyCentralImpulse"));
  mixin(bindCode("btRigidBody_applyTorqueImpulse", "D_btRigidBody_applyTorqueImpulse"));
  mixin(bindCode("btRigidBody_applyImpulse", "D_btRigidBody_applyImpulse"));
  mixin(bindCode("btRigidBody_clearForces", "D_btRigidBody_clearForces"));
  mixin(bindCode("btRigidBody_updateInertiaTensor", "D_btRigidBody_updateInertiaTensor"));
  mixin(bindCode("btRigidBody_getCenterOfMassPosition", "D_btRigidBody_getCenterOfMassPosition"));
  mixin(bindCode("btRigidBody_getOrientation", "D_btRigidBody_getOrientation"));
  mixin(bindCode("btRigidBody_getCenterOfMassTransform", "D_btRigidBody_getCenterOfMassTransform"));
  mixin(bindCode("btRigidBody_getLinearVelocity", "D_btRigidBody_getLinearVelocity"));
  mixin(bindCode("btRigidBody_getAngularVelocity", "D_btRigidBody_getAngularVelocity"));
  mixin(bindCode("btRigidBody_setLinearVelocity", "D_btRigidBody_setLinearVelocity"));
  mixin(bindCode("btRigidBody_setAngularVelocity", "D_btRigidBody_setAngularVelocity"));
  mixin(bindCode("btRigidBody_getVelocityInLocalPoint", "D_btRigidBody_getVelocityInLocalPoint"));
  mixin(bindCode("btRigidBody_translate", "D_btRigidBody_translate"));
  mixin(bindCode("btRigidBody_getAabb", "D_btRigidBody_getAabb"));
  mixin(bindCode("btRigidBody_computeImpulseDenominator", "D_btRigidBody_computeImpulseDenominator"));
  mixin(bindCode("btRigidBody_computeAngularImpulseDenominator", "D_btRigidBody_computeAngularImpulseDenominator"));
  mixin(bindCode("btRigidBody_updateDeactivation", "D_btRigidBody_updateDeactivation"));
  mixin(bindCode("btRigidBody_wantsSleeping", "D_btRigidBody_wantsSleeping"));
  mixin(bindCode("btRigidBody_getBroadphaseProxy__SWIG_0", "D_btRigidBody_getBroadphaseProxy__SWIG_0"));
  mixin(bindCode("btRigidBody_setNewBroadphaseProxy", "D_btRigidBody_setNewBroadphaseProxy"));
  mixin(bindCode("btRigidBody_getMotionState__SWIG_0", "D_btRigidBody_getMotionState__SWIG_0"));
  mixin(bindCode("btRigidBody_setMotionState", "D_btRigidBody_setMotionState"));
  mixin(bindCode("btRigidBody_m_contactSolverType_set", "D_btRigidBody_m_contactSolverType_set"));
  mixin(bindCode("btRigidBody_m_contactSolverType_get", "D_btRigidBody_m_contactSolverType_get"));
  mixin(bindCode("btRigidBody_m_frictionSolverType_set", "D_btRigidBody_m_frictionSolverType_set"));
  mixin(bindCode("btRigidBody_m_frictionSolverType_get", "D_btRigidBody_m_frictionSolverType_get"));
  mixin(bindCode("btRigidBody_setAngularFactor__SWIG_0", "D_btRigidBody_setAngularFactor__SWIG_0"));
  mixin(bindCode("btRigidBody_setAngularFactor__SWIG_1", "D_btRigidBody_setAngularFactor__SWIG_1"));
  mixin(bindCode("btRigidBody_getAngularFactor", "D_btRigidBody_getAngularFactor"));
  mixin(bindCode("btRigidBody_isInWorld", "D_btRigidBody_isInWorld"));
  mixin(bindCode("btRigidBody_checkCollideWithOverride", "D_btRigidBody_checkCollideWithOverride"));
  mixin(bindCode("btRigidBody_addConstraintRef", "D_btRigidBody_addConstraintRef"));
  mixin(bindCode("btRigidBody_removeConstraintRef", "D_btRigidBody_removeConstraintRef"));
  mixin(bindCode("btRigidBody_getConstraintRef", "D_btRigidBody_getConstraintRef"));
  mixin(bindCode("btRigidBody_getNumConstraintRefs", "D_btRigidBody_getNumConstraintRefs"));
  mixin(bindCode("btRigidBody_setFlags", "D_btRigidBody_setFlags"));
  mixin(bindCode("btRigidBody_getFlags", "D_btRigidBody_getFlags"));
  mixin(bindCode("btRigidBody_getDeltaLinearVelocity", "D_btRigidBody_getDeltaLinearVelocity"));
  mixin(bindCode("btRigidBody_getDeltaAngularVelocity", "D_btRigidBody_getDeltaAngularVelocity"));
  mixin(bindCode("btRigidBody_getPushVelocity", "D_btRigidBody_getPushVelocity"));
  mixin(bindCode("btRigidBody_getTurnVelocity", "D_btRigidBody_getTurnVelocity"));
  mixin(bindCode("btRigidBody_internalGetDeltaLinearVelocity", "D_btRigidBody_internalGetDeltaLinearVelocity"));
  mixin(bindCode("btRigidBody_internalGetDeltaAngularVelocity", "D_btRigidBody_internalGetDeltaAngularVelocity"));
  mixin(bindCode("btRigidBody_internalGetAngularFactor", "D_btRigidBody_internalGetAngularFactor"));
  mixin(bindCode("btRigidBody_internalGetInvMass", "D_btRigidBody_internalGetInvMass"));
  mixin(bindCode("btRigidBody_internalGetPushVelocity", "D_btRigidBody_internalGetPushVelocity"));
  mixin(bindCode("btRigidBody_internalGetTurnVelocity", "D_btRigidBody_internalGetTurnVelocity"));
  mixin(bindCode("btRigidBody_internalGetVelocityInLocalPointObsolete", "D_btRigidBody_internalGetVelocityInLocalPointObsolete"));
  mixin(bindCode("btRigidBody_internalGetAngularVelocity", "D_btRigidBody_internalGetAngularVelocity"));
  mixin(bindCode("btRigidBody_internalApplyImpulse", "D_btRigidBody_internalApplyImpulse"));
  mixin(bindCode("btRigidBody_internalApplyPushImpulse", "D_btRigidBody_internalApplyPushImpulse"));
  mixin(bindCode("btRigidBody_internalWritebackVelocity__SWIG_0", "D_btRigidBody_internalWritebackVelocity__SWIG_0"));
  mixin(bindCode("btRigidBody_internalWritebackVelocity__SWIG_1", "D_btRigidBody_internalWritebackVelocity__SWIG_1"));
  mixin(bindCode("btRigidBody_calculateSerializeBufferSize", "D_btRigidBody_calculateSerializeBufferSize"));
  mixin(bindCode("btRigidBody_serialize", "D_btRigidBody_serialize"));
  mixin(bindCode("btRigidBody_serializeSingleObject", "D_btRigidBody_serializeSingleObject"));
  mixin(bindCode("btRigidBody_Upcast", "D_btRigidBody_Upcast"));
  mixin(bindCode("btRigidBodyFloatData_m_collisionObjectData_set", "D_btRigidBodyFloatData_m_collisionObjectData_set"));
  mixin(bindCode("btRigidBodyFloatData_m_collisionObjectData_get", "D_btRigidBodyFloatData_m_collisionObjectData_get"));
  mixin(bindCode("btRigidBodyFloatData_m_invInertiaTensorWorld_set", "D_btRigidBodyFloatData_m_invInertiaTensorWorld_set"));
  mixin(bindCode("btRigidBodyFloatData_m_invInertiaTensorWorld_get", "D_btRigidBodyFloatData_m_invInertiaTensorWorld_get"));
  mixin(bindCode("btRigidBodyFloatData_m_linearVelocity_set", "D_btRigidBodyFloatData_m_linearVelocity_set"));
  mixin(bindCode("btRigidBodyFloatData_m_linearVelocity_get", "D_btRigidBodyFloatData_m_linearVelocity_get"));
  mixin(bindCode("btRigidBodyFloatData_m_angularVelocity_set", "D_btRigidBodyFloatData_m_angularVelocity_set"));
  mixin(bindCode("btRigidBodyFloatData_m_angularVelocity_get", "D_btRigidBodyFloatData_m_angularVelocity_get"));
  mixin(bindCode("btRigidBodyFloatData_m_angularFactor_set", "D_btRigidBodyFloatData_m_angularFactor_set"));
  mixin(bindCode("btRigidBodyFloatData_m_angularFactor_get", "D_btRigidBodyFloatData_m_angularFactor_get"));
  mixin(bindCode("btRigidBodyFloatData_m_linearFactor_set", "D_btRigidBodyFloatData_m_linearFactor_set"));
  mixin(bindCode("btRigidBodyFloatData_m_linearFactor_get", "D_btRigidBodyFloatData_m_linearFactor_get"));
  mixin(bindCode("btRigidBodyFloatData_m_gravity_set", "D_btRigidBodyFloatData_m_gravity_set"));
  mixin(bindCode("btRigidBodyFloatData_m_gravity_get", "D_btRigidBodyFloatData_m_gravity_get"));
  mixin(bindCode("btRigidBodyFloatData_m_gravity_acceleration_set", "D_btRigidBodyFloatData_m_gravity_acceleration_set"));
  mixin(bindCode("btRigidBodyFloatData_m_gravity_acceleration_get", "D_btRigidBodyFloatData_m_gravity_acceleration_get"));
  mixin(bindCode("btRigidBodyFloatData_m_invInertiaLocal_set", "D_btRigidBodyFloatData_m_invInertiaLocal_set"));
  mixin(bindCode("btRigidBodyFloatData_m_invInertiaLocal_get", "D_btRigidBodyFloatData_m_invInertiaLocal_get"));
  mixin(bindCode("btRigidBodyFloatData_m_totalForce_set", "D_btRigidBodyFloatData_m_totalForce_set"));
  mixin(bindCode("btRigidBodyFloatData_m_totalForce_get", "D_btRigidBodyFloatData_m_totalForce_get"));
  mixin(bindCode("btRigidBodyFloatData_m_totalTorque_set", "D_btRigidBodyFloatData_m_totalTorque_set"));
  mixin(bindCode("btRigidBodyFloatData_m_totalTorque_get", "D_btRigidBodyFloatData_m_totalTorque_get"));
  mixin(bindCode("btRigidBodyFloatData_m_inverseMass_set", "D_btRigidBodyFloatData_m_inverseMass_set"));
  mixin(bindCode("btRigidBodyFloatData_m_inverseMass_get", "D_btRigidBodyFloatData_m_inverseMass_get"));
  mixin(bindCode("btRigidBodyFloatData_m_linearDamping_set", "D_btRigidBodyFloatData_m_linearDamping_set"));
  mixin(bindCode("btRigidBodyFloatData_m_linearDamping_get", "D_btRigidBodyFloatData_m_linearDamping_get"));
  mixin(bindCode("btRigidBodyFloatData_m_angularDamping_set", "D_btRigidBodyFloatData_m_angularDamping_set"));
  mixin(bindCode("btRigidBodyFloatData_m_angularDamping_get", "D_btRigidBodyFloatData_m_angularDamping_get"));
  mixin(bindCode("btRigidBodyFloatData_m_additionalDampingFactor_set", "D_btRigidBodyFloatData_m_additionalDampingFactor_set"));
  mixin(bindCode("btRigidBodyFloatData_m_additionalDampingFactor_get", "D_btRigidBodyFloatData_m_additionalDampingFactor_get"));
  mixin(bindCode("btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set", "D_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set"));
  mixin(bindCode("btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get", "D_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get"));
  mixin(bindCode("btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set", "D_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set"));
  mixin(bindCode("btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get", "D_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get"));
  mixin(bindCode("btRigidBodyFloatData_m_additionalAngularDampingFactor_set", "D_btRigidBodyFloatData_m_additionalAngularDampingFactor_set"));
  mixin(bindCode("btRigidBodyFloatData_m_additionalAngularDampingFactor_get", "D_btRigidBodyFloatData_m_additionalAngularDampingFactor_get"));
  mixin(bindCode("btRigidBodyFloatData_m_linearSleepingThreshold_set", "D_btRigidBodyFloatData_m_linearSleepingThreshold_set"));
  mixin(bindCode("btRigidBodyFloatData_m_linearSleepingThreshold_get", "D_btRigidBodyFloatData_m_linearSleepingThreshold_get"));
  mixin(bindCode("btRigidBodyFloatData_m_angularSleepingThreshold_set", "D_btRigidBodyFloatData_m_angularSleepingThreshold_set"));
  mixin(bindCode("btRigidBodyFloatData_m_angularSleepingThreshold_get", "D_btRigidBodyFloatData_m_angularSleepingThreshold_get"));
  mixin(bindCode("btRigidBodyFloatData_m_additionalDamping_set", "D_btRigidBodyFloatData_m_additionalDamping_set"));
  mixin(bindCode("btRigidBodyFloatData_m_additionalDamping_get", "D_btRigidBodyFloatData_m_additionalDamping_get"));
  mixin(bindCode("new_btRigidBodyFloatData", "D_new_btRigidBodyFloatData"));
  mixin(bindCode("delete_btRigidBodyFloatData", "D_delete_btRigidBodyFloatData"));
  mixin(bindCode("btRigidBodyDoubleData_m_collisionObjectData_set", "D_btRigidBodyDoubleData_m_collisionObjectData_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_collisionObjectData_get", "D_btRigidBodyDoubleData_m_collisionObjectData_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_invInertiaTensorWorld_set", "D_btRigidBodyDoubleData_m_invInertiaTensorWorld_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_invInertiaTensorWorld_get", "D_btRigidBodyDoubleData_m_invInertiaTensorWorld_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_linearVelocity_set", "D_btRigidBodyDoubleData_m_linearVelocity_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_linearVelocity_get", "D_btRigidBodyDoubleData_m_linearVelocity_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_angularVelocity_set", "D_btRigidBodyDoubleData_m_angularVelocity_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_angularVelocity_get", "D_btRigidBodyDoubleData_m_angularVelocity_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_angularFactor_set", "D_btRigidBodyDoubleData_m_angularFactor_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_angularFactor_get", "D_btRigidBodyDoubleData_m_angularFactor_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_linearFactor_set", "D_btRigidBodyDoubleData_m_linearFactor_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_linearFactor_get", "D_btRigidBodyDoubleData_m_linearFactor_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_gravity_set", "D_btRigidBodyDoubleData_m_gravity_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_gravity_get", "D_btRigidBodyDoubleData_m_gravity_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_gravity_acceleration_set", "D_btRigidBodyDoubleData_m_gravity_acceleration_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_gravity_acceleration_get", "D_btRigidBodyDoubleData_m_gravity_acceleration_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_invInertiaLocal_set", "D_btRigidBodyDoubleData_m_invInertiaLocal_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_invInertiaLocal_get", "D_btRigidBodyDoubleData_m_invInertiaLocal_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_totalForce_set", "D_btRigidBodyDoubleData_m_totalForce_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_totalForce_get", "D_btRigidBodyDoubleData_m_totalForce_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_totalTorque_set", "D_btRigidBodyDoubleData_m_totalTorque_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_totalTorque_get", "D_btRigidBodyDoubleData_m_totalTorque_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_inverseMass_set", "D_btRigidBodyDoubleData_m_inverseMass_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_inverseMass_get", "D_btRigidBodyDoubleData_m_inverseMass_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_linearDamping_set", "D_btRigidBodyDoubleData_m_linearDamping_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_linearDamping_get", "D_btRigidBodyDoubleData_m_linearDamping_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_angularDamping_set", "D_btRigidBodyDoubleData_m_angularDamping_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_angularDamping_get", "D_btRigidBodyDoubleData_m_angularDamping_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_additionalDampingFactor_set", "D_btRigidBodyDoubleData_m_additionalDampingFactor_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_additionalDampingFactor_get", "D_btRigidBodyDoubleData_m_additionalDampingFactor_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set", "D_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get", "D_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set", "D_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get", "D_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_additionalAngularDampingFactor_set", "D_btRigidBodyDoubleData_m_additionalAngularDampingFactor_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_additionalAngularDampingFactor_get", "D_btRigidBodyDoubleData_m_additionalAngularDampingFactor_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_linearSleepingThreshold_set", "D_btRigidBodyDoubleData_m_linearSleepingThreshold_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_linearSleepingThreshold_get", "D_btRigidBodyDoubleData_m_linearSleepingThreshold_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_angularSleepingThreshold_set", "D_btRigidBodyDoubleData_m_angularSleepingThreshold_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_angularSleepingThreshold_get", "D_btRigidBodyDoubleData_m_angularSleepingThreshold_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_additionalDamping_set", "D_btRigidBodyDoubleData_m_additionalDamping_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_additionalDamping_get", "D_btRigidBodyDoubleData_m_additionalDamping_get"));
  mixin(bindCode("btRigidBodyDoubleData_m_padding_set", "D_btRigidBodyDoubleData_m_padding_set"));
  mixin(bindCode("btRigidBodyDoubleData_m_padding_get", "D_btRigidBodyDoubleData_m_padding_get"));
  mixin(bindCode("new_btRigidBodyDoubleData", "D_new_btRigidBodyDoubleData"));
  mixin(bindCode("delete_btRigidBodyDoubleData", "D_delete_btRigidBodyDoubleData"));
  mixin(bindCode("delete_btConstraintSolver", "D_delete_btConstraintSolver"));
  mixin(bindCode("btConstraintSolver_prepareSolve", "D_btConstraintSolver_prepareSolve"));
  mixin(bindCode("btConstraintSolver_solveGroup", "D_btConstraintSolver_solveGroup"));
  mixin(bindCode("btConstraintSolver_allSolved", "D_btConstraintSolver_allSolved"));
  mixin(bindCode("btConstraintSolver_reset", "D_btConstraintSolver_reset"));
  mixin(bindCode("delete_btTypedConstraint", "D_delete_btTypedConstraint"));
  mixin(bindCode("btTypedConstraint_buildJacobian", "D_btTypedConstraint_buildJacobian"));
  mixin(bindCode("btTypedConstraint_setupSolverConstraint", "D_btTypedConstraint_setupSolverConstraint"));
  mixin(bindCode("btTypedConstraint_getInfo1", "D_btTypedConstraint_getInfo1"));
  mixin(bindCode("btTypedConstraint_getInfo2", "D_btTypedConstraint_getInfo2"));
  mixin(bindCode("btTypedConstraint_internalSetAppliedImpulse", "D_btTypedConstraint_internalSetAppliedImpulse"));
  mixin(bindCode("btTypedConstraint_internalGetAppliedImpulse", "D_btTypedConstraint_internalGetAppliedImpulse"));
  mixin(bindCode("btTypedConstraint_getBreakingImpulseThreshold", "D_btTypedConstraint_getBreakingImpulseThreshold"));
  mixin(bindCode("btTypedConstraint_setBreakingImpulseThreshold", "D_btTypedConstraint_setBreakingImpulseThreshold"));
  mixin(bindCode("btTypedConstraint_isEnabled", "D_btTypedConstraint_isEnabled"));
  mixin(bindCode("btTypedConstraint_setEnabled", "D_btTypedConstraint_setEnabled"));
  mixin(bindCode("btTypedConstraint_solveConstraintObsolete", "D_btTypedConstraint_solveConstraintObsolete"));
  mixin(bindCode("btTypedConstraint_getRigidBodyA__SWIG_0", "D_btTypedConstraint_getRigidBodyA__SWIG_0"));
  mixin(bindCode("btTypedConstraint_getRigidBodyB__SWIG_0", "D_btTypedConstraint_getRigidBodyB__SWIG_0"));
  mixin(bindCode("btTypedConstraint_getUserConstraintType", "D_btTypedConstraint_getUserConstraintType"));
  mixin(bindCode("btTypedConstraint_setUserConstraintType", "D_btTypedConstraint_setUserConstraintType"));
  mixin(bindCode("btTypedConstraint_setUserConstraintId", "D_btTypedConstraint_setUserConstraintId"));
  mixin(bindCode("btTypedConstraint_getUserConstraintId", "D_btTypedConstraint_getUserConstraintId"));
  mixin(bindCode("btTypedConstraint_setUserConstraintPtr", "D_btTypedConstraint_setUserConstraintPtr"));
  mixin(bindCode("btTypedConstraint_getUserConstraintPtr", "D_btTypedConstraint_getUserConstraintPtr"));
  mixin(bindCode("btTypedConstraint_getUid", "D_btTypedConstraint_getUid"));
  mixin(bindCode("btTypedConstraint_needsFeedback", "D_btTypedConstraint_needsFeedback"));
  mixin(bindCode("btTypedConstraint_enableFeedback", "D_btTypedConstraint_enableFeedback"));
  mixin(bindCode("btTypedConstraint_getAppliedImpulse", "D_btTypedConstraint_getAppliedImpulse"));
  mixin(bindCode("btTypedConstraint_getConstraintType", "D_btTypedConstraint_getConstraintType"));
  mixin(bindCode("btTypedConstraint_setDbgDrawSize", "D_btTypedConstraint_setDbgDrawSize"));
  mixin(bindCode("btTypedConstraint_getDbgDrawSize", "D_btTypedConstraint_getDbgDrawSize"));
  mixin(bindCode("btTypedConstraint_setParam__SWIG_0", "D_btTypedConstraint_setParam__SWIG_0"));
  mixin(bindCode("btTypedConstraint_setParam__SWIG_1", "D_btTypedConstraint_setParam__SWIG_1"));
  mixin(bindCode("btTypedConstraint_getParam__SWIG_0", "D_btTypedConstraint_getParam__SWIG_0"));
  mixin(bindCode("btTypedConstraint_getParam__SWIG_1", "D_btTypedConstraint_getParam__SWIG_1"));
  mixin(bindCode("btTypedConstraint_calculateSerializeBufferSize", "D_btTypedConstraint_calculateSerializeBufferSize"));
  mixin(bindCode("btTypedConstraint_serialize", "D_btTypedConstraint_serialize"));
  mixin(bindCode("btTypedConstraint_Upcast", "D_btTypedConstraint_Upcast"));
  mixin(bindCode("btAdjustAngleToLimits", "D_btAdjustAngleToLimits"));
  mixin(bindCode("btTypedConstraintData_m_rbA_set", "D_btTypedConstraintData_m_rbA_set"));
  mixin(bindCode("btTypedConstraintData_m_rbA_get", "D_btTypedConstraintData_m_rbA_get"));
  mixin(bindCode("btTypedConstraintData_m_rbB_set", "D_btTypedConstraintData_m_rbB_set"));
  mixin(bindCode("btTypedConstraintData_m_rbB_get", "D_btTypedConstraintData_m_rbB_get"));
  mixin(bindCode("btTypedConstraintData_m_name_set", "D_btTypedConstraintData_m_name_set"));
  mixin(bindCode("btTypedConstraintData_m_name_get", "D_btTypedConstraintData_m_name_get"));
  mixin(bindCode("btTypedConstraintData_m_objectType_set", "D_btTypedConstraintData_m_objectType_set"));
  mixin(bindCode("btTypedConstraintData_m_objectType_get", "D_btTypedConstraintData_m_objectType_get"));
  mixin(bindCode("btTypedConstraintData_m_userConstraintType_set", "D_btTypedConstraintData_m_userConstraintType_set"));
  mixin(bindCode("btTypedConstraintData_m_userConstraintType_get", "D_btTypedConstraintData_m_userConstraintType_get"));
  mixin(bindCode("btTypedConstraintData_m_userConstraintId_set", "D_btTypedConstraintData_m_userConstraintId_set"));
  mixin(bindCode("btTypedConstraintData_m_userConstraintId_get", "D_btTypedConstraintData_m_userConstraintId_get"));
  mixin(bindCode("btTypedConstraintData_m_needsFeedback_set", "D_btTypedConstraintData_m_needsFeedback_set"));
  mixin(bindCode("btTypedConstraintData_m_needsFeedback_get", "D_btTypedConstraintData_m_needsFeedback_get"));
  mixin(bindCode("btTypedConstraintData_m_appliedImpulse_set", "D_btTypedConstraintData_m_appliedImpulse_set"));
  mixin(bindCode("btTypedConstraintData_m_appliedImpulse_get", "D_btTypedConstraintData_m_appliedImpulse_get"));
  mixin(bindCode("btTypedConstraintData_m_dbgDrawSize_set", "D_btTypedConstraintData_m_dbgDrawSize_set"));
  mixin(bindCode("btTypedConstraintData_m_dbgDrawSize_get", "D_btTypedConstraintData_m_dbgDrawSize_get"));
  mixin(bindCode("btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_set", "D_btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_set"));
  mixin(bindCode("btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_get", "D_btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_get"));
  mixin(bindCode("btTypedConstraintData_m_pad4_set", "D_btTypedConstraintData_m_pad4_set"));
  mixin(bindCode("btTypedConstraintData_m_pad4_get", "D_btTypedConstraintData_m_pad4_get"));
  mixin(bindCode("new_btTypedConstraintData", "D_new_btTypedConstraintData"));
  mixin(bindCode("delete_btTypedConstraintData", "D_delete_btTypedConstraintData"));
  mixin(bindCode("new_btAngularLimit", "D_new_btAngularLimit"));
  mixin(bindCode("btAngularLimit_set__SWIG_0", "D_btAngularLimit_set__SWIG_0"));
  mixin(bindCode("btAngularLimit_set__SWIG_1", "D_btAngularLimit_set__SWIG_1"));
  mixin(bindCode("btAngularLimit_set__SWIG_2", "D_btAngularLimit_set__SWIG_2"));
  mixin(bindCode("btAngularLimit_set__SWIG_3", "D_btAngularLimit_set__SWIG_3"));
  mixin(bindCode("btAngularLimit_test", "D_btAngularLimit_test"));
  mixin(bindCode("btAngularLimit_getSoftness", "D_btAngularLimit_getSoftness"));
  mixin(bindCode("btAngularLimit_getBiasFactor", "D_btAngularLimit_getBiasFactor"));
  mixin(bindCode("btAngularLimit_getRelaxationFactor", "D_btAngularLimit_getRelaxationFactor"));
  mixin(bindCode("btAngularLimit_getCorrection", "D_btAngularLimit_getCorrection"));
  mixin(bindCode("btAngularLimit_getSign", "D_btAngularLimit_getSign"));
  mixin(bindCode("btAngularLimit_getHalfRange", "D_btAngularLimit_getHalfRange"));
  mixin(bindCode("btAngularLimit_isLimit", "D_btAngularLimit_isLimit"));
  mixin(bindCode("btAngularLimit_fit", "D_btAngularLimit_fit"));
  mixin(bindCode("btAngularLimit_getError", "D_btAngularLimit_getError"));
  mixin(bindCode("btAngularLimit_getLow", "D_btAngularLimit_getLow"));
  mixin(bindCode("btAngularLimit_getHigh", "D_btAngularLimit_getHigh"));
  mixin(bindCode("delete_btAngularLimit", "D_delete_btAngularLimit"));
  mixin(bindCode("btPoint2PointConstraintDataName_get", "D_btPoint2PointConstraintDataName_get"));
  mixin(bindCode("new_btConstraintSetting", "D_new_btConstraintSetting"));
  mixin(bindCode("btConstraintSetting_m_tau_set", "D_btConstraintSetting_m_tau_set"));
  mixin(bindCode("btConstraintSetting_m_tau_get", "D_btConstraintSetting_m_tau_get"));
  mixin(bindCode("btConstraintSetting_m_damping_set", "D_btConstraintSetting_m_damping_set"));
  mixin(bindCode("btConstraintSetting_m_damping_get", "D_btConstraintSetting_m_damping_get"));
  mixin(bindCode("btConstraintSetting_m_impulseClamp_set", "D_btConstraintSetting_m_impulseClamp_set"));
  mixin(bindCode("btConstraintSetting_m_impulseClamp_get", "D_btConstraintSetting_m_impulseClamp_get"));
  mixin(bindCode("delete_btConstraintSetting", "D_delete_btConstraintSetting"));
  mixin(bindCode("btPoint2PointConstraint_m_useSolveConstraintObsolete_set", "D_btPoint2PointConstraint_m_useSolveConstraintObsolete_set"));
  mixin(bindCode("btPoint2PointConstraint_m_useSolveConstraintObsolete_get", "D_btPoint2PointConstraint_m_useSolveConstraintObsolete_get"));
  mixin(bindCode("btPoint2PointConstraint_m_setting_set", "D_btPoint2PointConstraint_m_setting_set"));
  mixin(bindCode("btPoint2PointConstraint_m_setting_get", "D_btPoint2PointConstraint_m_setting_get"));
  mixin(bindCode("new_btPoint2PointConstraint__SWIG_0", "D_new_btPoint2PointConstraint__SWIG_0"));
  mixin(bindCode("new_btPoint2PointConstraint__SWIG_1", "D_new_btPoint2PointConstraint__SWIG_1"));
  mixin(bindCode("btPoint2PointConstraint_buildJacobian", "D_btPoint2PointConstraint_buildJacobian"));
  mixin(bindCode("btPoint2PointConstraint_getInfo1", "D_btPoint2PointConstraint_getInfo1"));
  mixin(bindCode("btPoint2PointConstraint_getInfo1NonVirtual", "D_btPoint2PointConstraint_getInfo1NonVirtual"));
  mixin(bindCode("btPoint2PointConstraint_getInfo2", "D_btPoint2PointConstraint_getInfo2"));
  mixin(bindCode("btPoint2PointConstraint_getInfo2NonVirtual", "D_btPoint2PointConstraint_getInfo2NonVirtual"));
  mixin(bindCode("btPoint2PointConstraint_updateRHS", "D_btPoint2PointConstraint_updateRHS"));
  mixin(bindCode("btPoint2PointConstraint_setPivotA", "D_btPoint2PointConstraint_setPivotA"));
  mixin(bindCode("btPoint2PointConstraint_setPivotB", "D_btPoint2PointConstraint_setPivotB"));
  mixin(bindCode("btPoint2PointConstraint_getPivotInA", "D_btPoint2PointConstraint_getPivotInA"));
  mixin(bindCode("btPoint2PointConstraint_getPivotInB", "D_btPoint2PointConstraint_getPivotInB"));
  mixin(bindCode("btPoint2PointConstraint_setParam__SWIG_0", "D_btPoint2PointConstraint_setParam__SWIG_0"));
  mixin(bindCode("btPoint2PointConstraint_setParam__SWIG_1", "D_btPoint2PointConstraint_setParam__SWIG_1"));
  mixin(bindCode("btPoint2PointConstraint_getParam__SWIG_0", "D_btPoint2PointConstraint_getParam__SWIG_0"));
  mixin(bindCode("btPoint2PointConstraint_getParam__SWIG_1", "D_btPoint2PointConstraint_getParam__SWIG_1"));
  mixin(bindCode("btPoint2PointConstraint_calculateSerializeBufferSize", "D_btPoint2PointConstraint_calculateSerializeBufferSize"));
  mixin(bindCode("btPoint2PointConstraint_serialize", "D_btPoint2PointConstraint_serialize"));
  mixin(bindCode("delete_btPoint2PointConstraint", "D_delete_btPoint2PointConstraint"));
  mixin(bindCode("btPoint2PointConstraint_Upcast", "D_btPoint2PointConstraint_Upcast"));
  mixin(bindCode("btPoint2PointConstraintFloatData_m_typeConstraintData_set", "D_btPoint2PointConstraintFloatData_m_typeConstraintData_set"));
  mixin(bindCode("btPoint2PointConstraintFloatData_m_typeConstraintData_get", "D_btPoint2PointConstraintFloatData_m_typeConstraintData_get"));
  mixin(bindCode("btPoint2PointConstraintFloatData_m_pivotInA_set", "D_btPoint2PointConstraintFloatData_m_pivotInA_set"));
  mixin(bindCode("btPoint2PointConstraintFloatData_m_pivotInA_get", "D_btPoint2PointConstraintFloatData_m_pivotInA_get"));
  mixin(bindCode("btPoint2PointConstraintFloatData_m_pivotInB_set", "D_btPoint2PointConstraintFloatData_m_pivotInB_set"));
  mixin(bindCode("btPoint2PointConstraintFloatData_m_pivotInB_get", "D_btPoint2PointConstraintFloatData_m_pivotInB_get"));
  mixin(bindCode("new_btPoint2PointConstraintFloatData", "D_new_btPoint2PointConstraintFloatData"));
  mixin(bindCode("delete_btPoint2PointConstraintFloatData", "D_delete_btPoint2PointConstraintFloatData"));
  mixin(bindCode("btPoint2PointConstraintDoubleData_m_typeConstraintData_set", "D_btPoint2PointConstraintDoubleData_m_typeConstraintData_set"));
  mixin(bindCode("btPoint2PointConstraintDoubleData_m_typeConstraintData_get", "D_btPoint2PointConstraintDoubleData_m_typeConstraintData_get"));
  mixin(bindCode("btPoint2PointConstraintDoubleData_m_pivotInA_set", "D_btPoint2PointConstraintDoubleData_m_pivotInA_set"));
  mixin(bindCode("btPoint2PointConstraintDoubleData_m_pivotInA_get", "D_btPoint2PointConstraintDoubleData_m_pivotInA_get"));
  mixin(bindCode("btPoint2PointConstraintDoubleData_m_pivotInB_set", "D_btPoint2PointConstraintDoubleData_m_pivotInB_set"));
  mixin(bindCode("btPoint2PointConstraintDoubleData_m_pivotInB_get", "D_btPoint2PointConstraintDoubleData_m_pivotInB_get"));
  mixin(bindCode("new_btPoint2PointConstraintDoubleData", "D_new_btPoint2PointConstraintDoubleData"));
  mixin(bindCode("delete_btPoint2PointConstraintDoubleData", "D_delete_btPoint2PointConstraintDoubleData"));
  mixin(bindCode("_BT_USE_CENTER_LIMIT__get", "D__BT_USE_CENTER_LIMIT__get"));
  mixin(bindCode("btHingeConstraintDataName_get", "D_btHingeConstraintDataName_get"));
  mixin(bindCode("new_btHingeConstraint__SWIG_0", "D_new_btHingeConstraint__SWIG_0"));
  mixin(bindCode("new_btHingeConstraint__SWIG_1", "D_new_btHingeConstraint__SWIG_1"));
  mixin(bindCode("new_btHingeConstraint__SWIG_2", "D_new_btHingeConstraint__SWIG_2"));
  mixin(bindCode("new_btHingeConstraint__SWIG_3", "D_new_btHingeConstraint__SWIG_3"));
  mixin(bindCode("new_btHingeConstraint__SWIG_4", "D_new_btHingeConstraint__SWIG_4"));
  mixin(bindCode("new_btHingeConstraint__SWIG_5", "D_new_btHingeConstraint__SWIG_5"));
  mixin(bindCode("new_btHingeConstraint__SWIG_6", "D_new_btHingeConstraint__SWIG_6"));
  mixin(bindCode("new_btHingeConstraint__SWIG_7", "D_new_btHingeConstraint__SWIG_7"));
  mixin(bindCode("btHingeConstraint_buildJacobian", "D_btHingeConstraint_buildJacobian"));
  mixin(bindCode("btHingeConstraint_getInfo1", "D_btHingeConstraint_getInfo1"));
  mixin(bindCode("btHingeConstraint_getInfo1NonVirtual", "D_btHingeConstraint_getInfo1NonVirtual"));
  mixin(bindCode("btHingeConstraint_getInfo2", "D_btHingeConstraint_getInfo2"));
  mixin(bindCode("btHingeConstraint_getInfo2NonVirtual", "D_btHingeConstraint_getInfo2NonVirtual"));
  mixin(bindCode("btHingeConstraint_getInfo2Internal", "D_btHingeConstraint_getInfo2Internal"));
  mixin(bindCode("btHingeConstraint_getInfo2InternalUsingFrameOffset", "D_btHingeConstraint_getInfo2InternalUsingFrameOffset"));
  mixin(bindCode("btHingeConstraint_updateRHS", "D_btHingeConstraint_updateRHS"));
  mixin(bindCode("btHingeConstraint_getRigidBodyA__SWIG_0", "D_btHingeConstraint_getRigidBodyA__SWIG_0"));
  mixin(bindCode("btHingeConstraint_getRigidBodyB__SWIG_0", "D_btHingeConstraint_getRigidBodyB__SWIG_0"));
  mixin(bindCode("btHingeConstraint_getFrameOffsetA", "D_btHingeConstraint_getFrameOffsetA"));
  mixin(bindCode("btHingeConstraint_getFrameOffsetB", "D_btHingeConstraint_getFrameOffsetB"));
  mixin(bindCode("btHingeConstraint_setFrames", "D_btHingeConstraint_setFrames"));
  mixin(bindCode("btHingeConstraint_setAngularOnly", "D_btHingeConstraint_setAngularOnly"));
  mixin(bindCode("btHingeConstraint_enableAngularMotor", "D_btHingeConstraint_enableAngularMotor"));
  mixin(bindCode("btHingeConstraint_enableMotor", "D_btHingeConstraint_enableMotor"));
  mixin(bindCode("btHingeConstraint_setMaxMotorImpulse", "D_btHingeConstraint_setMaxMotorImpulse"));
  mixin(bindCode("btHingeConstraint_setMotorTarget__SWIG_0", "D_btHingeConstraint_setMotorTarget__SWIG_0"));
  mixin(bindCode("btHingeConstraint_setMotorTarget__SWIG_1", "D_btHingeConstraint_setMotorTarget__SWIG_1"));
  mixin(bindCode("btHingeConstraint_setLimit__SWIG_0", "D_btHingeConstraint_setLimit__SWIG_0"));
  mixin(bindCode("btHingeConstraint_setLimit__SWIG_1", "D_btHingeConstraint_setLimit__SWIG_1"));
  mixin(bindCode("btHingeConstraint_setLimit__SWIG_2", "D_btHingeConstraint_setLimit__SWIG_2"));
  mixin(bindCode("btHingeConstraint_setLimit__SWIG_3", "D_btHingeConstraint_setLimit__SWIG_3"));
  mixin(bindCode("btHingeConstraint_setAxis", "D_btHingeConstraint_setAxis"));
  mixin(bindCode("btHingeConstraint_getLowerLimit", "D_btHingeConstraint_getLowerLimit"));
  mixin(bindCode("btHingeConstraint_getUpperLimit", "D_btHingeConstraint_getUpperLimit"));
  mixin(bindCode("btHingeConstraint_getHingeAngle__SWIG_0", "D_btHingeConstraint_getHingeAngle__SWIG_0"));
  mixin(bindCode("btHingeConstraint_getHingeAngle__SWIG_1", "D_btHingeConstraint_getHingeAngle__SWIG_1"));
  mixin(bindCode("btHingeConstraint_testLimit", "D_btHingeConstraint_testLimit"));
  mixin(bindCode("btHingeConstraint_getAFrame__SWIG_0", "D_btHingeConstraint_getAFrame__SWIG_0"));
  mixin(bindCode("btHingeConstraint_getBFrame__SWIG_0", "D_btHingeConstraint_getBFrame__SWIG_0"));
  mixin(bindCode("btHingeConstraint_getSolveLimit", "D_btHingeConstraint_getSolveLimit"));
  mixin(bindCode("btHingeConstraint_getLimitSign", "D_btHingeConstraint_getLimitSign"));
  mixin(bindCode("btHingeConstraint_getAngularOnly", "D_btHingeConstraint_getAngularOnly"));
  mixin(bindCode("btHingeConstraint_getEnableAngularMotor", "D_btHingeConstraint_getEnableAngularMotor"));
  mixin(bindCode("btHingeConstraint_getMotorTargetVelosity", "D_btHingeConstraint_getMotorTargetVelosity"));
  mixin(bindCode("btHingeConstraint_getMaxMotorImpulse", "D_btHingeConstraint_getMaxMotorImpulse"));
  mixin(bindCode("btHingeConstraint_getUseFrameOffset", "D_btHingeConstraint_getUseFrameOffset"));
  mixin(bindCode("btHingeConstraint_setUseFrameOffset", "D_btHingeConstraint_setUseFrameOffset"));
  mixin(bindCode("btHingeConstraint_setParam__SWIG_0", "D_btHingeConstraint_setParam__SWIG_0"));
  mixin(bindCode("btHingeConstraint_setParam__SWIG_1", "D_btHingeConstraint_setParam__SWIG_1"));
  mixin(bindCode("btHingeConstraint_getParam__SWIG_0", "D_btHingeConstraint_getParam__SWIG_0"));
  mixin(bindCode("btHingeConstraint_getParam__SWIG_1", "D_btHingeConstraint_getParam__SWIG_1"));
  mixin(bindCode("btHingeConstraint_calculateSerializeBufferSize", "D_btHingeConstraint_calculateSerializeBufferSize"));
  mixin(bindCode("btHingeConstraint_serialize", "D_btHingeConstraint_serialize"));
  mixin(bindCode("delete_btHingeConstraint", "D_delete_btHingeConstraint"));
  mixin(bindCode("btHingeConstraint_Upcast", "D_btHingeConstraint_Upcast"));
  mixin(bindCode("btHingeConstraintDoubleData_m_typeConstraintData_set", "D_btHingeConstraintDoubleData_m_typeConstraintData_set"));
  mixin(bindCode("btHingeConstraintDoubleData_m_typeConstraintData_get", "D_btHingeConstraintDoubleData_m_typeConstraintData_get"));
  mixin(bindCode("btHingeConstraintDoubleData_m_rbAFrame_set", "D_btHingeConstraintDoubleData_m_rbAFrame_set"));
  mixin(bindCode("btHingeConstraintDoubleData_m_rbAFrame_get", "D_btHingeConstraintDoubleData_m_rbAFrame_get"));
  mixin(bindCode("btHingeConstraintDoubleData_m_rbBFrame_set", "D_btHingeConstraintDoubleData_m_rbBFrame_set"));
  mixin(bindCode("btHingeConstraintDoubleData_m_rbBFrame_get", "D_btHingeConstraintDoubleData_m_rbBFrame_get"));
  mixin(bindCode("btHingeConstraintDoubleData_m_useReferenceFrameA_set", "D_btHingeConstraintDoubleData_m_useReferenceFrameA_set"));
  mixin(bindCode("btHingeConstraintDoubleData_m_useReferenceFrameA_get", "D_btHingeConstraintDoubleData_m_useReferenceFrameA_get"));
  mixin(bindCode("btHingeConstraintDoubleData_m_angularOnly_set", "D_btHingeConstraintDoubleData_m_angularOnly_set"));
  mixin(bindCode("btHingeConstraintDoubleData_m_angularOnly_get", "D_btHingeConstraintDoubleData_m_angularOnly_get"));
  mixin(bindCode("btHingeConstraintDoubleData_m_enableAngularMotor_set", "D_btHingeConstraintDoubleData_m_enableAngularMotor_set"));
  mixin(bindCode("btHingeConstraintDoubleData_m_enableAngularMotor_get", "D_btHingeConstraintDoubleData_m_enableAngularMotor_get"));
  mixin(bindCode("btHingeConstraintDoubleData_m_motorTargetVelocity_set", "D_btHingeConstraintDoubleData_m_motorTargetVelocity_set"));
  mixin(bindCode("btHingeConstraintDoubleData_m_motorTargetVelocity_get", "D_btHingeConstraintDoubleData_m_motorTargetVelocity_get"));
  mixin(bindCode("btHingeConstraintDoubleData_m_maxMotorImpulse_set", "D_btHingeConstraintDoubleData_m_maxMotorImpulse_set"));
  mixin(bindCode("btHingeConstraintDoubleData_m_maxMotorImpulse_get", "D_btHingeConstraintDoubleData_m_maxMotorImpulse_get"));
  mixin(bindCode("btHingeConstraintDoubleData_m_lowerLimit_set", "D_btHingeConstraintDoubleData_m_lowerLimit_set"));
  mixin(bindCode("btHingeConstraintDoubleData_m_lowerLimit_get", "D_btHingeConstraintDoubleData_m_lowerLimit_get"));
  mixin(bindCode("btHingeConstraintDoubleData_m_upperLimit_set", "D_btHingeConstraintDoubleData_m_upperLimit_set"));
  mixin(bindCode("btHingeConstraintDoubleData_m_upperLimit_get", "D_btHingeConstraintDoubleData_m_upperLimit_get"));
  mixin(bindCode("btHingeConstraintDoubleData_m_limitSoftness_set", "D_btHingeConstraintDoubleData_m_limitSoftness_set"));
  mixin(bindCode("btHingeConstraintDoubleData_m_limitSoftness_get", "D_btHingeConstraintDoubleData_m_limitSoftness_get"));
  mixin(bindCode("btHingeConstraintDoubleData_m_biasFactor_set", "D_btHingeConstraintDoubleData_m_biasFactor_set"));
  mixin(bindCode("btHingeConstraintDoubleData_m_biasFactor_get", "D_btHingeConstraintDoubleData_m_biasFactor_get"));
  mixin(bindCode("btHingeConstraintDoubleData_m_relaxationFactor_set", "D_btHingeConstraintDoubleData_m_relaxationFactor_set"));
  mixin(bindCode("btHingeConstraintDoubleData_m_relaxationFactor_get", "D_btHingeConstraintDoubleData_m_relaxationFactor_get"));
  mixin(bindCode("new_btHingeConstraintDoubleData", "D_new_btHingeConstraintDoubleData"));
  mixin(bindCode("delete_btHingeConstraintDoubleData", "D_delete_btHingeConstraintDoubleData"));
  mixin(bindCode("btHingeConstraintFloatData_m_typeConstraintData_set", "D_btHingeConstraintFloatData_m_typeConstraintData_set"));
  mixin(bindCode("btHingeConstraintFloatData_m_typeConstraintData_get", "D_btHingeConstraintFloatData_m_typeConstraintData_get"));
  mixin(bindCode("btHingeConstraintFloatData_m_rbAFrame_set", "D_btHingeConstraintFloatData_m_rbAFrame_set"));
  mixin(bindCode("btHingeConstraintFloatData_m_rbAFrame_get", "D_btHingeConstraintFloatData_m_rbAFrame_get"));
  mixin(bindCode("btHingeConstraintFloatData_m_rbBFrame_set", "D_btHingeConstraintFloatData_m_rbBFrame_set"));
  mixin(bindCode("btHingeConstraintFloatData_m_rbBFrame_get", "D_btHingeConstraintFloatData_m_rbBFrame_get"));
  mixin(bindCode("btHingeConstraintFloatData_m_useReferenceFrameA_set", "D_btHingeConstraintFloatData_m_useReferenceFrameA_set"));
  mixin(bindCode("btHingeConstraintFloatData_m_useReferenceFrameA_get", "D_btHingeConstraintFloatData_m_useReferenceFrameA_get"));
  mixin(bindCode("btHingeConstraintFloatData_m_angularOnly_set", "D_btHingeConstraintFloatData_m_angularOnly_set"));
  mixin(bindCode("btHingeConstraintFloatData_m_angularOnly_get", "D_btHingeConstraintFloatData_m_angularOnly_get"));
  mixin(bindCode("btHingeConstraintFloatData_m_enableAngularMotor_set", "D_btHingeConstraintFloatData_m_enableAngularMotor_set"));
  mixin(bindCode("btHingeConstraintFloatData_m_enableAngularMotor_get", "D_btHingeConstraintFloatData_m_enableAngularMotor_get"));
  mixin(bindCode("btHingeConstraintFloatData_m_motorTargetVelocity_set", "D_btHingeConstraintFloatData_m_motorTargetVelocity_set"));
  mixin(bindCode("btHingeConstraintFloatData_m_motorTargetVelocity_get", "D_btHingeConstraintFloatData_m_motorTargetVelocity_get"));
  mixin(bindCode("btHingeConstraintFloatData_m_maxMotorImpulse_set", "D_btHingeConstraintFloatData_m_maxMotorImpulse_set"));
  mixin(bindCode("btHingeConstraintFloatData_m_maxMotorImpulse_get", "D_btHingeConstraintFloatData_m_maxMotorImpulse_get"));
  mixin(bindCode("btHingeConstraintFloatData_m_lowerLimit_set", "D_btHingeConstraintFloatData_m_lowerLimit_set"));
  mixin(bindCode("btHingeConstraintFloatData_m_lowerLimit_get", "D_btHingeConstraintFloatData_m_lowerLimit_get"));
  mixin(bindCode("btHingeConstraintFloatData_m_upperLimit_set", "D_btHingeConstraintFloatData_m_upperLimit_set"));
  mixin(bindCode("btHingeConstraintFloatData_m_upperLimit_get", "D_btHingeConstraintFloatData_m_upperLimit_get"));
  mixin(bindCode("btHingeConstraintFloatData_m_limitSoftness_set", "D_btHingeConstraintFloatData_m_limitSoftness_set"));
  mixin(bindCode("btHingeConstraintFloatData_m_limitSoftness_get", "D_btHingeConstraintFloatData_m_limitSoftness_get"));
  mixin(bindCode("btHingeConstraintFloatData_m_biasFactor_set", "D_btHingeConstraintFloatData_m_biasFactor_set"));
  mixin(bindCode("btHingeConstraintFloatData_m_biasFactor_get", "D_btHingeConstraintFloatData_m_biasFactor_get"));
  mixin(bindCode("btHingeConstraintFloatData_m_relaxationFactor_set", "D_btHingeConstraintFloatData_m_relaxationFactor_set"));
  mixin(bindCode("btHingeConstraintFloatData_m_relaxationFactor_get", "D_btHingeConstraintFloatData_m_relaxationFactor_get"));
  mixin(bindCode("new_btHingeConstraintFloatData", "D_new_btHingeConstraintFloatData"));
  mixin(bindCode("delete_btHingeConstraintFloatData", "D_delete_btHingeConstraintFloatData"));
  mixin(bindCode("new_btConeTwistConstraint__SWIG_0", "D_new_btConeTwistConstraint__SWIG_0"));
  mixin(bindCode("new_btConeTwistConstraint__SWIG_1", "D_new_btConeTwistConstraint__SWIG_1"));
  mixin(bindCode("btConeTwistConstraint_buildJacobian", "D_btConeTwistConstraint_buildJacobian"));
  mixin(bindCode("btConeTwistConstraint_getInfo1", "D_btConeTwistConstraint_getInfo1"));
  mixin(bindCode("btConeTwistConstraint_getInfo1NonVirtual", "D_btConeTwistConstraint_getInfo1NonVirtual"));
  mixin(bindCode("btConeTwistConstraint_getInfo2", "D_btConeTwistConstraint_getInfo2"));
  mixin(bindCode("btConeTwistConstraint_getInfo2NonVirtual", "D_btConeTwistConstraint_getInfo2NonVirtual"));
  mixin(bindCode("btConeTwistConstraint_solveConstraintObsolete", "D_btConeTwistConstraint_solveConstraintObsolete"));
  mixin(bindCode("btConeTwistConstraint_updateRHS", "D_btConeTwistConstraint_updateRHS"));
  mixin(bindCode("btConeTwistConstraint_getRigidBodyA", "D_btConeTwistConstraint_getRigidBodyA"));
  mixin(bindCode("btConeTwistConstraint_getRigidBodyB", "D_btConeTwistConstraint_getRigidBodyB"));
  mixin(bindCode("btConeTwistConstraint_setAngularOnly", "D_btConeTwistConstraint_setAngularOnly"));
  mixin(bindCode("btConeTwistConstraint_setLimit__SWIG_0", "D_btConeTwistConstraint_setLimit__SWIG_0"));
  mixin(bindCode("btConeTwistConstraint_setLimit__SWIG_1", "D_btConeTwistConstraint_setLimit__SWIG_1"));
  mixin(bindCode("btConeTwistConstraint_setLimit__SWIG_2", "D_btConeTwistConstraint_setLimit__SWIG_2"));
  mixin(bindCode("btConeTwistConstraint_setLimit__SWIG_3", "D_btConeTwistConstraint_setLimit__SWIG_3"));
  mixin(bindCode("btConeTwistConstraint_setLimit__SWIG_4", "D_btConeTwistConstraint_setLimit__SWIG_4"));
  mixin(bindCode("btConeTwistConstraint_getAFrame", "D_btConeTwistConstraint_getAFrame"));
  mixin(bindCode("btConeTwistConstraint_getBFrame", "D_btConeTwistConstraint_getBFrame"));
  mixin(bindCode("btConeTwistConstraint_getSolveTwistLimit", "D_btConeTwistConstraint_getSolveTwistLimit"));
  mixin(bindCode("btConeTwistConstraint_getSolveSwingLimit", "D_btConeTwistConstraint_getSolveSwingLimit"));
  mixin(bindCode("btConeTwistConstraint_getTwistLimitSign", "D_btConeTwistConstraint_getTwistLimitSign"));
  mixin(bindCode("btConeTwistConstraint_calcAngleInfo", "D_btConeTwistConstraint_calcAngleInfo"));
  mixin(bindCode("btConeTwistConstraint_calcAngleInfo2", "D_btConeTwistConstraint_calcAngleInfo2"));
  mixin(bindCode("btConeTwistConstraint_getSwingSpan1", "D_btConeTwistConstraint_getSwingSpan1"));
  mixin(bindCode("btConeTwistConstraint_getSwingSpan2", "D_btConeTwistConstraint_getSwingSpan2"));
  mixin(bindCode("btConeTwistConstraint_getTwistSpan", "D_btConeTwistConstraint_getTwistSpan"));
  mixin(bindCode("btConeTwistConstraint_getTwistAngle", "D_btConeTwistConstraint_getTwistAngle"));
  mixin(bindCode("btConeTwistConstraint_isPastSwingLimit", "D_btConeTwistConstraint_isPastSwingLimit"));
  mixin(bindCode("btConeTwistConstraint_setDamping", "D_btConeTwistConstraint_setDamping"));
  mixin(bindCode("btConeTwistConstraint_enableMotor", "D_btConeTwistConstraint_enableMotor"));
  mixin(bindCode("btConeTwistConstraint_setMaxMotorImpulse", "D_btConeTwistConstraint_setMaxMotorImpulse"));
  mixin(bindCode("btConeTwistConstraint_setMaxMotorImpulseNormalized", "D_btConeTwistConstraint_setMaxMotorImpulseNormalized"));
  mixin(bindCode("btConeTwistConstraint_getFixThresh", "D_btConeTwistConstraint_getFixThresh"));
  mixin(bindCode("btConeTwistConstraint_setFixThresh", "D_btConeTwistConstraint_setFixThresh"));
  mixin(bindCode("btConeTwistConstraint_setMotorTarget", "D_btConeTwistConstraint_setMotorTarget"));
  mixin(bindCode("btConeTwistConstraint_setMotorTargetInConstraintSpace", "D_btConeTwistConstraint_setMotorTargetInConstraintSpace"));
  mixin(bindCode("btConeTwistConstraint_GetPointForAngle", "D_btConeTwistConstraint_GetPointForAngle"));
  mixin(bindCode("btConeTwistConstraint_setParam__SWIG_0", "D_btConeTwistConstraint_setParam__SWIG_0"));
  mixin(bindCode("btConeTwistConstraint_setParam__SWIG_1", "D_btConeTwistConstraint_setParam__SWIG_1"));
  mixin(bindCode("btConeTwistConstraint_setFrames", "D_btConeTwistConstraint_setFrames"));
  mixin(bindCode("btConeTwistConstraint_getFrameOffsetA", "D_btConeTwistConstraint_getFrameOffsetA"));
  mixin(bindCode("btConeTwistConstraint_getFrameOffsetB", "D_btConeTwistConstraint_getFrameOffsetB"));
  mixin(bindCode("btConeTwistConstraint_getParam__SWIG_0", "D_btConeTwistConstraint_getParam__SWIG_0"));
  mixin(bindCode("btConeTwistConstraint_getParam__SWIG_1", "D_btConeTwistConstraint_getParam__SWIG_1"));
  mixin(bindCode("btConeTwistConstraint_calculateSerializeBufferSize", "D_btConeTwistConstraint_calculateSerializeBufferSize"));
  mixin(bindCode("btConeTwistConstraint_serialize", "D_btConeTwistConstraint_serialize"));
  mixin(bindCode("delete_btConeTwistConstraint", "D_delete_btConeTwistConstraint"));
  mixin(bindCode("btConeTwistConstraint_Upcast", "D_btConeTwistConstraint_Upcast"));
  mixin(bindCode("btConeTwistConstraintData_m_typeConstraintData_set", "D_btConeTwistConstraintData_m_typeConstraintData_set"));
  mixin(bindCode("btConeTwistConstraintData_m_typeConstraintData_get", "D_btConeTwistConstraintData_m_typeConstraintData_get"));
  mixin(bindCode("btConeTwistConstraintData_m_rbAFrame_set", "D_btConeTwistConstraintData_m_rbAFrame_set"));
  mixin(bindCode("btConeTwistConstraintData_m_rbAFrame_get", "D_btConeTwistConstraintData_m_rbAFrame_get"));
  mixin(bindCode("btConeTwistConstraintData_m_rbBFrame_set", "D_btConeTwistConstraintData_m_rbBFrame_set"));
  mixin(bindCode("btConeTwistConstraintData_m_rbBFrame_get", "D_btConeTwistConstraintData_m_rbBFrame_get"));
  mixin(bindCode("btConeTwistConstraintData_m_swingSpan1_set", "D_btConeTwistConstraintData_m_swingSpan1_set"));
  mixin(bindCode("btConeTwistConstraintData_m_swingSpan1_get", "D_btConeTwistConstraintData_m_swingSpan1_get"));
  mixin(bindCode("btConeTwistConstraintData_m_swingSpan2_set", "D_btConeTwistConstraintData_m_swingSpan2_set"));
  mixin(bindCode("btConeTwistConstraintData_m_swingSpan2_get", "D_btConeTwistConstraintData_m_swingSpan2_get"));
  mixin(bindCode("btConeTwistConstraintData_m_twistSpan_set", "D_btConeTwistConstraintData_m_twistSpan_set"));
  mixin(bindCode("btConeTwistConstraintData_m_twistSpan_get", "D_btConeTwistConstraintData_m_twistSpan_get"));
  mixin(bindCode("btConeTwistConstraintData_m_limitSoftness_set", "D_btConeTwistConstraintData_m_limitSoftness_set"));
  mixin(bindCode("btConeTwistConstraintData_m_limitSoftness_get", "D_btConeTwistConstraintData_m_limitSoftness_get"));
  mixin(bindCode("btConeTwistConstraintData_m_biasFactor_set", "D_btConeTwistConstraintData_m_biasFactor_set"));
  mixin(bindCode("btConeTwistConstraintData_m_biasFactor_get", "D_btConeTwistConstraintData_m_biasFactor_get"));
  mixin(bindCode("btConeTwistConstraintData_m_relaxationFactor_set", "D_btConeTwistConstraintData_m_relaxationFactor_set"));
  mixin(bindCode("btConeTwistConstraintData_m_relaxationFactor_get", "D_btConeTwistConstraintData_m_relaxationFactor_get"));
  mixin(bindCode("btConeTwistConstraintData_m_damping_set", "D_btConeTwistConstraintData_m_damping_set"));
  mixin(bindCode("btConeTwistConstraintData_m_damping_get", "D_btConeTwistConstraintData_m_damping_get"));
  mixin(bindCode("btConeTwistConstraintData_m_pad_set", "D_btConeTwistConstraintData_m_pad_set"));
  mixin(bindCode("btConeTwistConstraintData_m_pad_get", "D_btConeTwistConstraintData_m_pad_get"));
  mixin(bindCode("new_btConeTwistConstraintData", "D_new_btConeTwistConstraintData"));
  mixin(bindCode("delete_btConeTwistConstraintData", "D_delete_btConeTwistConstraintData"));
  mixin(bindCode("btRotationalLimitMotor_m_loLimit_set", "D_btRotationalLimitMotor_m_loLimit_set"));
  mixin(bindCode("btRotationalLimitMotor_m_loLimit_get", "D_btRotationalLimitMotor_m_loLimit_get"));
  mixin(bindCode("btRotationalLimitMotor_m_hiLimit_set", "D_btRotationalLimitMotor_m_hiLimit_set"));
  mixin(bindCode("btRotationalLimitMotor_m_hiLimit_get", "D_btRotationalLimitMotor_m_hiLimit_get"));
  mixin(bindCode("btRotationalLimitMotor_m_targetVelocity_set", "D_btRotationalLimitMotor_m_targetVelocity_set"));
  mixin(bindCode("btRotationalLimitMotor_m_targetVelocity_get", "D_btRotationalLimitMotor_m_targetVelocity_get"));
  mixin(bindCode("btRotationalLimitMotor_m_maxMotorForce_set", "D_btRotationalLimitMotor_m_maxMotorForce_set"));
  mixin(bindCode("btRotationalLimitMotor_m_maxMotorForce_get", "D_btRotationalLimitMotor_m_maxMotorForce_get"));
  mixin(bindCode("btRotationalLimitMotor_m_maxLimitForce_set", "D_btRotationalLimitMotor_m_maxLimitForce_set"));
  mixin(bindCode("btRotationalLimitMotor_m_maxLimitForce_get", "D_btRotationalLimitMotor_m_maxLimitForce_get"));
  mixin(bindCode("btRotationalLimitMotor_m_damping_set", "D_btRotationalLimitMotor_m_damping_set"));
  mixin(bindCode("btRotationalLimitMotor_m_damping_get", "D_btRotationalLimitMotor_m_damping_get"));
  mixin(bindCode("btRotationalLimitMotor_m_limitSoftness_set", "D_btRotationalLimitMotor_m_limitSoftness_set"));
  mixin(bindCode("btRotationalLimitMotor_m_limitSoftness_get", "D_btRotationalLimitMotor_m_limitSoftness_get"));
  mixin(bindCode("btRotationalLimitMotor_m_normalCFM_set", "D_btRotationalLimitMotor_m_normalCFM_set"));
  mixin(bindCode("btRotationalLimitMotor_m_normalCFM_get", "D_btRotationalLimitMotor_m_normalCFM_get"));
  mixin(bindCode("btRotationalLimitMotor_m_stopERP_set", "D_btRotationalLimitMotor_m_stopERP_set"));
  mixin(bindCode("btRotationalLimitMotor_m_stopERP_get", "D_btRotationalLimitMotor_m_stopERP_get"));
  mixin(bindCode("btRotationalLimitMotor_m_stopCFM_set", "D_btRotationalLimitMotor_m_stopCFM_set"));
  mixin(bindCode("btRotationalLimitMotor_m_stopCFM_get", "D_btRotationalLimitMotor_m_stopCFM_get"));
  mixin(bindCode("btRotationalLimitMotor_m_bounce_set", "D_btRotationalLimitMotor_m_bounce_set"));
  mixin(bindCode("btRotationalLimitMotor_m_bounce_get", "D_btRotationalLimitMotor_m_bounce_get"));
  mixin(bindCode("btRotationalLimitMotor_m_enableMotor_set", "D_btRotationalLimitMotor_m_enableMotor_set"));
  mixin(bindCode("btRotationalLimitMotor_m_enableMotor_get", "D_btRotationalLimitMotor_m_enableMotor_get"));
  mixin(bindCode("btRotationalLimitMotor_m_currentLimitError_set", "D_btRotationalLimitMotor_m_currentLimitError_set"));
  mixin(bindCode("btRotationalLimitMotor_m_currentLimitError_get", "D_btRotationalLimitMotor_m_currentLimitError_get"));
  mixin(bindCode("btRotationalLimitMotor_m_currentPosition_set", "D_btRotationalLimitMotor_m_currentPosition_set"));
  mixin(bindCode("btRotationalLimitMotor_m_currentPosition_get", "D_btRotationalLimitMotor_m_currentPosition_get"));
  mixin(bindCode("btRotationalLimitMotor_m_currentLimit_set", "D_btRotationalLimitMotor_m_currentLimit_set"));
  mixin(bindCode("btRotationalLimitMotor_m_currentLimit_get", "D_btRotationalLimitMotor_m_currentLimit_get"));
  mixin(bindCode("btRotationalLimitMotor_m_accumulatedImpulse_set", "D_btRotationalLimitMotor_m_accumulatedImpulse_set"));
  mixin(bindCode("btRotationalLimitMotor_m_accumulatedImpulse_get", "D_btRotationalLimitMotor_m_accumulatedImpulse_get"));
  mixin(bindCode("new_btRotationalLimitMotor__SWIG_0", "D_new_btRotationalLimitMotor__SWIG_0"));
  mixin(bindCode("new_btRotationalLimitMotor__SWIG_1", "D_new_btRotationalLimitMotor__SWIG_1"));
  mixin(bindCode("btRotationalLimitMotor_isLimited", "D_btRotationalLimitMotor_isLimited"));
  mixin(bindCode("btRotationalLimitMotor_needApplyTorques", "D_btRotationalLimitMotor_needApplyTorques"));
  mixin(bindCode("btRotationalLimitMotor_testLimitValue", "D_btRotationalLimitMotor_testLimitValue"));
  mixin(bindCode("btRotationalLimitMotor_solveAngularLimits", "D_btRotationalLimitMotor_solveAngularLimits"));
  mixin(bindCode("delete_btRotationalLimitMotor", "D_delete_btRotationalLimitMotor"));
  mixin(bindCode("btTranslationalLimitMotor_m_lowerLimit_set", "D_btTranslationalLimitMotor_m_lowerLimit_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_lowerLimit_get", "D_btTranslationalLimitMotor_m_lowerLimit_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_upperLimit_set", "D_btTranslationalLimitMotor_m_upperLimit_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_upperLimit_get", "D_btTranslationalLimitMotor_m_upperLimit_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_accumulatedImpulse_set", "D_btTranslationalLimitMotor_m_accumulatedImpulse_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_accumulatedImpulse_get", "D_btTranslationalLimitMotor_m_accumulatedImpulse_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_limitSoftness_set", "D_btTranslationalLimitMotor_m_limitSoftness_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_limitSoftness_get", "D_btTranslationalLimitMotor_m_limitSoftness_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_damping_set", "D_btTranslationalLimitMotor_m_damping_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_damping_get", "D_btTranslationalLimitMotor_m_damping_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_restitution_set", "D_btTranslationalLimitMotor_m_restitution_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_restitution_get", "D_btTranslationalLimitMotor_m_restitution_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_normalCFM_set", "D_btTranslationalLimitMotor_m_normalCFM_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_normalCFM_get", "D_btTranslationalLimitMotor_m_normalCFM_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_stopERP_set", "D_btTranslationalLimitMotor_m_stopERP_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_stopERP_get", "D_btTranslationalLimitMotor_m_stopERP_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_stopCFM_set", "D_btTranslationalLimitMotor_m_stopCFM_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_stopCFM_get", "D_btTranslationalLimitMotor_m_stopCFM_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_enableMotor_set", "D_btTranslationalLimitMotor_m_enableMotor_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_enableMotor_get", "D_btTranslationalLimitMotor_m_enableMotor_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_targetVelocity_set", "D_btTranslationalLimitMotor_m_targetVelocity_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_targetVelocity_get", "D_btTranslationalLimitMotor_m_targetVelocity_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_maxMotorForce_set", "D_btTranslationalLimitMotor_m_maxMotorForce_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_maxMotorForce_get", "D_btTranslationalLimitMotor_m_maxMotorForce_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_currentLimitError_set", "D_btTranslationalLimitMotor_m_currentLimitError_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_currentLimitError_get", "D_btTranslationalLimitMotor_m_currentLimitError_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_currentLinearDiff_set", "D_btTranslationalLimitMotor_m_currentLinearDiff_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_currentLinearDiff_get", "D_btTranslationalLimitMotor_m_currentLinearDiff_get"));
  mixin(bindCode("btTranslationalLimitMotor_m_currentLimit_set", "D_btTranslationalLimitMotor_m_currentLimit_set"));
  mixin(bindCode("btTranslationalLimitMotor_m_currentLimit_get", "D_btTranslationalLimitMotor_m_currentLimit_get"));
  mixin(bindCode("new_btTranslationalLimitMotor__SWIG_0", "D_new_btTranslationalLimitMotor__SWIG_0"));
  mixin(bindCode("new_btTranslationalLimitMotor__SWIG_1", "D_new_btTranslationalLimitMotor__SWIG_1"));
  mixin(bindCode("btTranslationalLimitMotor_isLimited", "D_btTranslationalLimitMotor_isLimited"));
  mixin(bindCode("btTranslationalLimitMotor_needApplyForce", "D_btTranslationalLimitMotor_needApplyForce"));
  mixin(bindCode("btTranslationalLimitMotor_testLimitValue", "D_btTranslationalLimitMotor_testLimitValue"));
  mixin(bindCode("btTranslationalLimitMotor_solveLinearAxis", "D_btTranslationalLimitMotor_solveLinearAxis"));
  mixin(bindCode("delete_btTranslationalLimitMotor", "D_delete_btTranslationalLimitMotor"));
  mixin(bindCode("BT_6DOF_FLAGS_AXIS_SHIFT_get", "D_BT_6DOF_FLAGS_AXIS_SHIFT_get"));
  mixin(bindCode("btGeneric6DofConstraint_m_useSolveConstraintObsolete_set", "D_btGeneric6DofConstraint_m_useSolveConstraintObsolete_set"));
  mixin(bindCode("btGeneric6DofConstraint_m_useSolveConstraintObsolete_get", "D_btGeneric6DofConstraint_m_useSolveConstraintObsolete_get"));
  mixin(bindCode("new_btGeneric6DofConstraint__SWIG_0", "D_new_btGeneric6DofConstraint__SWIG_0"));
  mixin(bindCode("new_btGeneric6DofConstraint__SWIG_1", "D_new_btGeneric6DofConstraint__SWIG_1"));
  mixin(bindCode("btGeneric6DofConstraint_calculateTransforms__SWIG_0", "D_btGeneric6DofConstraint_calculateTransforms__SWIG_0"));
  mixin(bindCode("btGeneric6DofConstraint_calculateTransforms__SWIG_1", "D_btGeneric6DofConstraint_calculateTransforms__SWIG_1"));
  mixin(bindCode("btGeneric6DofConstraint_getCalculatedTransformA", "D_btGeneric6DofConstraint_getCalculatedTransformA"));
  mixin(bindCode("btGeneric6DofConstraint_getCalculatedTransformB", "D_btGeneric6DofConstraint_getCalculatedTransformB"));
  mixin(bindCode("btGeneric6DofConstraint_getFrameOffsetA__SWIG_0", "D_btGeneric6DofConstraint_getFrameOffsetA__SWIG_0"));
  mixin(bindCode("btGeneric6DofConstraint_getFrameOffsetB__SWIG_0", "D_btGeneric6DofConstraint_getFrameOffsetB__SWIG_0"));
  mixin(bindCode("btGeneric6DofConstraint_buildJacobian", "D_btGeneric6DofConstraint_buildJacobian"));
  mixin(bindCode("btGeneric6DofConstraint_getInfo1", "D_btGeneric6DofConstraint_getInfo1"));
  mixin(bindCode("btGeneric6DofConstraint_getInfo1NonVirtual", "D_btGeneric6DofConstraint_getInfo1NonVirtual"));
  mixin(bindCode("btGeneric6DofConstraint_getInfo2", "D_btGeneric6DofConstraint_getInfo2"));
  mixin(bindCode("btGeneric6DofConstraint_getInfo2NonVirtual", "D_btGeneric6DofConstraint_getInfo2NonVirtual"));
  mixin(bindCode("btGeneric6DofConstraint_updateRHS", "D_btGeneric6DofConstraint_updateRHS"));
  mixin(bindCode("btGeneric6DofConstraint_getAxis", "D_btGeneric6DofConstraint_getAxis"));
  mixin(bindCode("btGeneric6DofConstraint_getAngle", "D_btGeneric6DofConstraint_getAngle"));
  mixin(bindCode("btGeneric6DofConstraint_getRelativePivotPosition", "D_btGeneric6DofConstraint_getRelativePivotPosition"));
  mixin(bindCode("btGeneric6DofConstraint_setFrames", "D_btGeneric6DofConstraint_setFrames"));
  mixin(bindCode("btGeneric6DofConstraint_testAngularLimitMotor", "D_btGeneric6DofConstraint_testAngularLimitMotor"));
  mixin(bindCode("btGeneric6DofConstraint_setLinearLowerLimit", "D_btGeneric6DofConstraint_setLinearLowerLimit"));
  mixin(bindCode("btGeneric6DofConstraint_getLinearLowerLimit", "D_btGeneric6DofConstraint_getLinearLowerLimit"));
  mixin(bindCode("btGeneric6DofConstraint_setLinearUpperLimit", "D_btGeneric6DofConstraint_setLinearUpperLimit"));
  mixin(bindCode("btGeneric6DofConstraint_getLinearUpperLimit", "D_btGeneric6DofConstraint_getLinearUpperLimit"));
  mixin(bindCode("btGeneric6DofConstraint_setAngularLowerLimit", "D_btGeneric6DofConstraint_setAngularLowerLimit"));
  mixin(bindCode("btGeneric6DofConstraint_getAngularLowerLimit", "D_btGeneric6DofConstraint_getAngularLowerLimit"));
  mixin(bindCode("btGeneric6DofConstraint_setAngularUpperLimit", "D_btGeneric6DofConstraint_setAngularUpperLimit"));
  mixin(bindCode("btGeneric6DofConstraint_getAngularUpperLimit", "D_btGeneric6DofConstraint_getAngularUpperLimit"));
  mixin(bindCode("btGeneric6DofConstraint_getRotationalLimitMotor", "D_btGeneric6DofConstraint_getRotationalLimitMotor"));
  mixin(bindCode("btGeneric6DofConstraint_getTranslationalLimitMotor", "D_btGeneric6DofConstraint_getTranslationalLimitMotor"));
  mixin(bindCode("btGeneric6DofConstraint_setLimit", "D_btGeneric6DofConstraint_setLimit"));
  mixin(bindCode("btGeneric6DofConstraint_isLimited", "D_btGeneric6DofConstraint_isLimited"));
  mixin(bindCode("btGeneric6DofConstraint_calcAnchorPos", "D_btGeneric6DofConstraint_calcAnchorPos"));
  mixin(bindCode("btGeneric6DofConstraint_get_limit_motor_info2__SWIG_0", "D_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_0"));
  mixin(bindCode("btGeneric6DofConstraint_get_limit_motor_info2__SWIG_1", "D_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_1"));
  mixin(bindCode("btGeneric6DofConstraint_getUseFrameOffset", "D_btGeneric6DofConstraint_getUseFrameOffset"));
  mixin(bindCode("btGeneric6DofConstraint_setUseFrameOffset", "D_btGeneric6DofConstraint_setUseFrameOffset"));
  mixin(bindCode("btGeneric6DofConstraint_setParam__SWIG_0", "D_btGeneric6DofConstraint_setParam__SWIG_0"));
  mixin(bindCode("btGeneric6DofConstraint_setParam__SWIG_1", "D_btGeneric6DofConstraint_setParam__SWIG_1"));
  mixin(bindCode("btGeneric6DofConstraint_getParam__SWIG_0", "D_btGeneric6DofConstraint_getParam__SWIG_0"));
  mixin(bindCode("btGeneric6DofConstraint_getParam__SWIG_1", "D_btGeneric6DofConstraint_getParam__SWIG_1"));
  mixin(bindCode("btGeneric6DofConstraint_setAxis", "D_btGeneric6DofConstraint_setAxis"));
  mixin(bindCode("btGeneric6DofConstraint_calculateSerializeBufferSize", "D_btGeneric6DofConstraint_calculateSerializeBufferSize"));
  mixin(bindCode("btGeneric6DofConstraint_serialize", "D_btGeneric6DofConstraint_serialize"));
  mixin(bindCode("delete_btGeneric6DofConstraint", "D_delete_btGeneric6DofConstraint"));
  mixin(bindCode("btGeneric6DofConstraint_Upcast", "D_btGeneric6DofConstraint_Upcast"));
  mixin(bindCode("btGeneric6DofConstraintData_m_typeConstraintData_set", "D_btGeneric6DofConstraintData_m_typeConstraintData_set"));
  mixin(bindCode("btGeneric6DofConstraintData_m_typeConstraintData_get", "D_btGeneric6DofConstraintData_m_typeConstraintData_get"));
  mixin(bindCode("btGeneric6DofConstraintData_m_rbAFrame_set", "D_btGeneric6DofConstraintData_m_rbAFrame_set"));
  mixin(bindCode("btGeneric6DofConstraintData_m_rbAFrame_get", "D_btGeneric6DofConstraintData_m_rbAFrame_get"));
  mixin(bindCode("btGeneric6DofConstraintData_m_rbBFrame_set", "D_btGeneric6DofConstraintData_m_rbBFrame_set"));
  mixin(bindCode("btGeneric6DofConstraintData_m_rbBFrame_get", "D_btGeneric6DofConstraintData_m_rbBFrame_get"));
  mixin(bindCode("btGeneric6DofConstraintData_m_linearUpperLimit_set", "D_btGeneric6DofConstraintData_m_linearUpperLimit_set"));
  mixin(bindCode("btGeneric6DofConstraintData_m_linearUpperLimit_get", "D_btGeneric6DofConstraintData_m_linearUpperLimit_get"));
  mixin(bindCode("btGeneric6DofConstraintData_m_linearLowerLimit_set", "D_btGeneric6DofConstraintData_m_linearLowerLimit_set"));
  mixin(bindCode("btGeneric6DofConstraintData_m_linearLowerLimit_get", "D_btGeneric6DofConstraintData_m_linearLowerLimit_get"));
  mixin(bindCode("btGeneric6DofConstraintData_m_angularUpperLimit_set", "D_btGeneric6DofConstraintData_m_angularUpperLimit_set"));
  mixin(bindCode("btGeneric6DofConstraintData_m_angularUpperLimit_get", "D_btGeneric6DofConstraintData_m_angularUpperLimit_get"));
  mixin(bindCode("btGeneric6DofConstraintData_m_angularLowerLimit_set", "D_btGeneric6DofConstraintData_m_angularLowerLimit_set"));
  mixin(bindCode("btGeneric6DofConstraintData_m_angularLowerLimit_get", "D_btGeneric6DofConstraintData_m_angularLowerLimit_get"));
  mixin(bindCode("btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set", "D_btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set"));
  mixin(bindCode("btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get", "D_btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get"));
  mixin(bindCode("btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set", "D_btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set"));
  mixin(bindCode("btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get", "D_btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get"));
  mixin(bindCode("new_btGeneric6DofConstraintData", "D_new_btGeneric6DofConstraintData"));
  mixin(bindCode("delete_btGeneric6DofConstraintData", "D_delete_btGeneric6DofConstraintData"));
  mixin(bindCode("new_btSliderConstraint__SWIG_0", "D_new_btSliderConstraint__SWIG_0"));
  mixin(bindCode("new_btSliderConstraint__SWIG_1", "D_new_btSliderConstraint__SWIG_1"));
  mixin(bindCode("btSliderConstraint_getInfo1", "D_btSliderConstraint_getInfo1"));
  mixin(bindCode("btSliderConstraint_getInfo1NonVirtual", "D_btSliderConstraint_getInfo1NonVirtual"));
  mixin(bindCode("btSliderConstraint_getInfo2", "D_btSliderConstraint_getInfo2"));
  mixin(bindCode("btSliderConstraint_getInfo2NonVirtual", "D_btSliderConstraint_getInfo2NonVirtual"));
  mixin(bindCode("btSliderConstraint_getRigidBodyA", "D_btSliderConstraint_getRigidBodyA"));
  mixin(bindCode("btSliderConstraint_getRigidBodyB", "D_btSliderConstraint_getRigidBodyB"));
  mixin(bindCode("btSliderConstraint_getCalculatedTransformA", "D_btSliderConstraint_getCalculatedTransformA"));
  mixin(bindCode("btSliderConstraint_getCalculatedTransformB", "D_btSliderConstraint_getCalculatedTransformB"));
  mixin(bindCode("btSliderConstraint_getFrameOffsetA__SWIG_0", "D_btSliderConstraint_getFrameOffsetA__SWIG_0"));
  mixin(bindCode("btSliderConstraint_getFrameOffsetB__SWIG_0", "D_btSliderConstraint_getFrameOffsetB__SWIG_0"));
  mixin(bindCode("btSliderConstraint_getLowerLinLimit", "D_btSliderConstraint_getLowerLinLimit"));
  mixin(bindCode("btSliderConstraint_setLowerLinLimit", "D_btSliderConstraint_setLowerLinLimit"));
  mixin(bindCode("btSliderConstraint_getUpperLinLimit", "D_btSliderConstraint_getUpperLinLimit"));
  mixin(bindCode("btSliderConstraint_setUpperLinLimit", "D_btSliderConstraint_setUpperLinLimit"));
  mixin(bindCode("btSliderConstraint_getLowerAngLimit", "D_btSliderConstraint_getLowerAngLimit"));
  mixin(bindCode("btSliderConstraint_setLowerAngLimit", "D_btSliderConstraint_setLowerAngLimit"));
  mixin(bindCode("btSliderConstraint_getUpperAngLimit", "D_btSliderConstraint_getUpperAngLimit"));
  mixin(bindCode("btSliderConstraint_setUpperAngLimit", "D_btSliderConstraint_setUpperAngLimit"));
  mixin(bindCode("btSliderConstraint_getUseLinearReferenceFrameA", "D_btSliderConstraint_getUseLinearReferenceFrameA"));
  mixin(bindCode("btSliderConstraint_getSoftnessDirLin", "D_btSliderConstraint_getSoftnessDirLin"));
  mixin(bindCode("btSliderConstraint_getRestitutionDirLin", "D_btSliderConstraint_getRestitutionDirLin"));
  mixin(bindCode("btSliderConstraint_getDampingDirLin", "D_btSliderConstraint_getDampingDirLin"));
  mixin(bindCode("btSliderConstraint_getSoftnessDirAng", "D_btSliderConstraint_getSoftnessDirAng"));
  mixin(bindCode("btSliderConstraint_getRestitutionDirAng", "D_btSliderConstraint_getRestitutionDirAng"));
  mixin(bindCode("btSliderConstraint_getDampingDirAng", "D_btSliderConstraint_getDampingDirAng"));
  mixin(bindCode("btSliderConstraint_getSoftnessLimLin", "D_btSliderConstraint_getSoftnessLimLin"));
  mixin(bindCode("btSliderConstraint_getRestitutionLimLin", "D_btSliderConstraint_getRestitutionLimLin"));
  mixin(bindCode("btSliderConstraint_getDampingLimLin", "D_btSliderConstraint_getDampingLimLin"));
  mixin(bindCode("btSliderConstraint_getSoftnessLimAng", "D_btSliderConstraint_getSoftnessLimAng"));
  mixin(bindCode("btSliderConstraint_getRestitutionLimAng", "D_btSliderConstraint_getRestitutionLimAng"));
  mixin(bindCode("btSliderConstraint_getDampingLimAng", "D_btSliderConstraint_getDampingLimAng"));
  mixin(bindCode("btSliderConstraint_getSoftnessOrthoLin", "D_btSliderConstraint_getSoftnessOrthoLin"));
  mixin(bindCode("btSliderConstraint_getRestitutionOrthoLin", "D_btSliderConstraint_getRestitutionOrthoLin"));
  mixin(bindCode("btSliderConstraint_getDampingOrthoLin", "D_btSliderConstraint_getDampingOrthoLin"));
  mixin(bindCode("btSliderConstraint_getSoftnessOrthoAng", "D_btSliderConstraint_getSoftnessOrthoAng"));
  mixin(bindCode("btSliderConstraint_getRestitutionOrthoAng", "D_btSliderConstraint_getRestitutionOrthoAng"));
  mixin(bindCode("btSliderConstraint_getDampingOrthoAng", "D_btSliderConstraint_getDampingOrthoAng"));
  mixin(bindCode("btSliderConstraint_setSoftnessDirLin", "D_btSliderConstraint_setSoftnessDirLin"));
  mixin(bindCode("btSliderConstraint_setRestitutionDirLin", "D_btSliderConstraint_setRestitutionDirLin"));
  mixin(bindCode("btSliderConstraint_setDampingDirLin", "D_btSliderConstraint_setDampingDirLin"));
  mixin(bindCode("btSliderConstraint_setSoftnessDirAng", "D_btSliderConstraint_setSoftnessDirAng"));
  mixin(bindCode("btSliderConstraint_setRestitutionDirAng", "D_btSliderConstraint_setRestitutionDirAng"));
  mixin(bindCode("btSliderConstraint_setDampingDirAng", "D_btSliderConstraint_setDampingDirAng"));
  mixin(bindCode("btSliderConstraint_setSoftnessLimLin", "D_btSliderConstraint_setSoftnessLimLin"));
  mixin(bindCode("btSliderConstraint_setRestitutionLimLin", "D_btSliderConstraint_setRestitutionLimLin"));
  mixin(bindCode("btSliderConstraint_setDampingLimLin", "D_btSliderConstraint_setDampingLimLin"));
  mixin(bindCode("btSliderConstraint_setSoftnessLimAng", "D_btSliderConstraint_setSoftnessLimAng"));
  mixin(bindCode("btSliderConstraint_setRestitutionLimAng", "D_btSliderConstraint_setRestitutionLimAng"));
  mixin(bindCode("btSliderConstraint_setDampingLimAng", "D_btSliderConstraint_setDampingLimAng"));
  mixin(bindCode("btSliderConstraint_setSoftnessOrthoLin", "D_btSliderConstraint_setSoftnessOrthoLin"));
  mixin(bindCode("btSliderConstraint_setRestitutionOrthoLin", "D_btSliderConstraint_setRestitutionOrthoLin"));
  mixin(bindCode("btSliderConstraint_setDampingOrthoLin", "D_btSliderConstraint_setDampingOrthoLin"));
  mixin(bindCode("btSliderConstraint_setSoftnessOrthoAng", "D_btSliderConstraint_setSoftnessOrthoAng"));
  mixin(bindCode("btSliderConstraint_setRestitutionOrthoAng", "D_btSliderConstraint_setRestitutionOrthoAng"));
  mixin(bindCode("btSliderConstraint_setDampingOrthoAng", "D_btSliderConstraint_setDampingOrthoAng"));
  mixin(bindCode("btSliderConstraint_setPoweredLinMotor", "D_btSliderConstraint_setPoweredLinMotor"));
  mixin(bindCode("btSliderConstraint_getPoweredLinMotor", "D_btSliderConstraint_getPoweredLinMotor"));
  mixin(bindCode("btSliderConstraint_setTargetLinMotorVelocity", "D_btSliderConstraint_setTargetLinMotorVelocity"));
  mixin(bindCode("btSliderConstraint_getTargetLinMotorVelocity", "D_btSliderConstraint_getTargetLinMotorVelocity"));
  mixin(bindCode("btSliderConstraint_setMaxLinMotorForce", "D_btSliderConstraint_setMaxLinMotorForce"));
  mixin(bindCode("btSliderConstraint_getMaxLinMotorForce", "D_btSliderConstraint_getMaxLinMotorForce"));
  mixin(bindCode("btSliderConstraint_setPoweredAngMotor", "D_btSliderConstraint_setPoweredAngMotor"));
  mixin(bindCode("btSliderConstraint_getPoweredAngMotor", "D_btSliderConstraint_getPoweredAngMotor"));
  mixin(bindCode("btSliderConstraint_setTargetAngMotorVelocity", "D_btSliderConstraint_setTargetAngMotorVelocity"));
  mixin(bindCode("btSliderConstraint_getTargetAngMotorVelocity", "D_btSliderConstraint_getTargetAngMotorVelocity"));
  mixin(bindCode("btSliderConstraint_setMaxAngMotorForce", "D_btSliderConstraint_setMaxAngMotorForce"));
  mixin(bindCode("btSliderConstraint_getMaxAngMotorForce", "D_btSliderConstraint_getMaxAngMotorForce"));
  mixin(bindCode("btSliderConstraint_getLinearPos", "D_btSliderConstraint_getLinearPos"));
  mixin(bindCode("btSliderConstraint_getAngularPos", "D_btSliderConstraint_getAngularPos"));
  mixin(bindCode("btSliderConstraint_getSolveLinLimit", "D_btSliderConstraint_getSolveLinLimit"));
  mixin(bindCode("btSliderConstraint_getLinDepth", "D_btSliderConstraint_getLinDepth"));
  mixin(bindCode("btSliderConstraint_getSolveAngLimit", "D_btSliderConstraint_getSolveAngLimit"));
  mixin(bindCode("btSliderConstraint_getAngDepth", "D_btSliderConstraint_getAngDepth"));
  mixin(bindCode("btSliderConstraint_calculateTransforms", "D_btSliderConstraint_calculateTransforms"));
  mixin(bindCode("btSliderConstraint_testLinLimits", "D_btSliderConstraint_testLinLimits"));
  mixin(bindCode("btSliderConstraint_testAngLimits", "D_btSliderConstraint_testAngLimits"));
  mixin(bindCode("btSliderConstraint_getAncorInA", "D_btSliderConstraint_getAncorInA"));
  mixin(bindCode("btSliderConstraint_getAncorInB", "D_btSliderConstraint_getAncorInB"));
  mixin(bindCode("btSliderConstraint_getUseFrameOffset", "D_btSliderConstraint_getUseFrameOffset"));
  mixin(bindCode("btSliderConstraint_setUseFrameOffset", "D_btSliderConstraint_setUseFrameOffset"));
  mixin(bindCode("btSliderConstraint_setFrames", "D_btSliderConstraint_setFrames"));
  mixin(bindCode("btSliderConstraint_setParam__SWIG_0", "D_btSliderConstraint_setParam__SWIG_0"));
  mixin(bindCode("btSliderConstraint_setParam__SWIG_1", "D_btSliderConstraint_setParam__SWIG_1"));
  mixin(bindCode("btSliderConstraint_getParam__SWIG_0", "D_btSliderConstraint_getParam__SWIG_0"));
  mixin(bindCode("btSliderConstraint_getParam__SWIG_1", "D_btSliderConstraint_getParam__SWIG_1"));
  mixin(bindCode("btSliderConstraint_calculateSerializeBufferSize", "D_btSliderConstraint_calculateSerializeBufferSize"));
  mixin(bindCode("btSliderConstraint_serialize", "D_btSliderConstraint_serialize"));
  mixin(bindCode("delete_btSliderConstraint", "D_delete_btSliderConstraint"));
  mixin(bindCode("btSliderConstraint_Upcast", "D_btSliderConstraint_Upcast"));
  mixin(bindCode("btSliderConstraintData_m_typeConstraintData_set", "D_btSliderConstraintData_m_typeConstraintData_set"));
  mixin(bindCode("btSliderConstraintData_m_typeConstraintData_get", "D_btSliderConstraintData_m_typeConstraintData_get"));
  mixin(bindCode("btSliderConstraintData_m_rbAFrame_set", "D_btSliderConstraintData_m_rbAFrame_set"));
  mixin(bindCode("btSliderConstraintData_m_rbAFrame_get", "D_btSliderConstraintData_m_rbAFrame_get"));
  mixin(bindCode("btSliderConstraintData_m_rbBFrame_set", "D_btSliderConstraintData_m_rbBFrame_set"));
  mixin(bindCode("btSliderConstraintData_m_rbBFrame_get", "D_btSliderConstraintData_m_rbBFrame_get"));
  mixin(bindCode("btSliderConstraintData_m_linearUpperLimit_set", "D_btSliderConstraintData_m_linearUpperLimit_set"));
  mixin(bindCode("btSliderConstraintData_m_linearUpperLimit_get", "D_btSliderConstraintData_m_linearUpperLimit_get"));
  mixin(bindCode("btSliderConstraintData_m_linearLowerLimit_set", "D_btSliderConstraintData_m_linearLowerLimit_set"));
  mixin(bindCode("btSliderConstraintData_m_linearLowerLimit_get", "D_btSliderConstraintData_m_linearLowerLimit_get"));
  mixin(bindCode("btSliderConstraintData_m_angularUpperLimit_set", "D_btSliderConstraintData_m_angularUpperLimit_set"));
  mixin(bindCode("btSliderConstraintData_m_angularUpperLimit_get", "D_btSliderConstraintData_m_angularUpperLimit_get"));
  mixin(bindCode("btSliderConstraintData_m_angularLowerLimit_set", "D_btSliderConstraintData_m_angularLowerLimit_set"));
  mixin(bindCode("btSliderConstraintData_m_angularLowerLimit_get", "D_btSliderConstraintData_m_angularLowerLimit_get"));
  mixin(bindCode("btSliderConstraintData_m_useLinearReferenceFrameA_set", "D_btSliderConstraintData_m_useLinearReferenceFrameA_set"));
  mixin(bindCode("btSliderConstraintData_m_useLinearReferenceFrameA_get", "D_btSliderConstraintData_m_useLinearReferenceFrameA_get"));
  mixin(bindCode("btSliderConstraintData_m_useOffsetForConstraintFrame_set", "D_btSliderConstraintData_m_useOffsetForConstraintFrame_set"));
  mixin(bindCode("btSliderConstraintData_m_useOffsetForConstraintFrame_get", "D_btSliderConstraintData_m_useOffsetForConstraintFrame_get"));
  mixin(bindCode("new_btSliderConstraintData", "D_new_btSliderConstraintData"));
  mixin(bindCode("delete_btSliderConstraintData", "D_delete_btSliderConstraintData"));
  mixin(bindCode("new_btGeneric6DofSpringConstraint", "D_new_btGeneric6DofSpringConstraint"));
  mixin(bindCode("btGeneric6DofSpringConstraint_enableSpring", "D_btGeneric6DofSpringConstraint_enableSpring"));
  mixin(bindCode("btGeneric6DofSpringConstraint_setStiffness", "D_btGeneric6DofSpringConstraint_setStiffness"));
  mixin(bindCode("btGeneric6DofSpringConstraint_setDamping", "D_btGeneric6DofSpringConstraint_setDamping"));
  mixin(bindCode("btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_0", "D_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_0"));
  mixin(bindCode("btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_1", "D_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_1"));
  mixin(bindCode("btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_2", "D_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_2"));
  mixin(bindCode("btGeneric6DofSpringConstraint_setAxis", "D_btGeneric6DofSpringConstraint_setAxis"));
  mixin(bindCode("btGeneric6DofSpringConstraint_getInfo2", "D_btGeneric6DofSpringConstraint_getInfo2"));
  mixin(bindCode("btGeneric6DofSpringConstraint_calculateSerializeBufferSize", "D_btGeneric6DofSpringConstraint_calculateSerializeBufferSize"));
  mixin(bindCode("btGeneric6DofSpringConstraint_serialize", "D_btGeneric6DofSpringConstraint_serialize"));
  mixin(bindCode("delete_btGeneric6DofSpringConstraint", "D_delete_btGeneric6DofSpringConstraint"));
  mixin(bindCode("btGeneric6DofSpringConstraint_Upcast", "D_btGeneric6DofSpringConstraint_Upcast"));
  mixin(bindCode("btGeneric6DofSpringConstraintData_m_6dofData_set", "D_btGeneric6DofSpringConstraintData_m_6dofData_set"));
  mixin(bindCode("btGeneric6DofSpringConstraintData_m_6dofData_get", "D_btGeneric6DofSpringConstraintData_m_6dofData_get"));
  mixin(bindCode("btGeneric6DofSpringConstraintData_m_springEnabled_set", "D_btGeneric6DofSpringConstraintData_m_springEnabled_set"));
  mixin(bindCode("btGeneric6DofSpringConstraintData_m_springEnabled_get", "D_btGeneric6DofSpringConstraintData_m_springEnabled_get"));
  mixin(bindCode("btGeneric6DofSpringConstraintData_m_equilibriumPoint_set", "D_btGeneric6DofSpringConstraintData_m_equilibriumPoint_set"));
  mixin(bindCode("btGeneric6DofSpringConstraintData_m_equilibriumPoint_get", "D_btGeneric6DofSpringConstraintData_m_equilibriumPoint_get"));
  mixin(bindCode("btGeneric6DofSpringConstraintData_m_springStiffness_set", "D_btGeneric6DofSpringConstraintData_m_springStiffness_set"));
  mixin(bindCode("btGeneric6DofSpringConstraintData_m_springStiffness_get", "D_btGeneric6DofSpringConstraintData_m_springStiffness_get"));
  mixin(bindCode("btGeneric6DofSpringConstraintData_m_springDamping_set", "D_btGeneric6DofSpringConstraintData_m_springDamping_set"));
  mixin(bindCode("btGeneric6DofSpringConstraintData_m_springDamping_get", "D_btGeneric6DofSpringConstraintData_m_springDamping_get"));
  mixin(bindCode("new_btGeneric6DofSpringConstraintData", "D_new_btGeneric6DofSpringConstraintData"));
  mixin(bindCode("delete_btGeneric6DofSpringConstraintData", "D_delete_btGeneric6DofSpringConstraintData"));
  mixin(bindCode("new_btUniversalConstraint", "D_new_btUniversalConstraint"));
  mixin(bindCode("btUniversalConstraint_getAnchor", "D_btUniversalConstraint_getAnchor"));
  mixin(bindCode("btUniversalConstraint_getAnchor2", "D_btUniversalConstraint_getAnchor2"));
  mixin(bindCode("btUniversalConstraint_getAxis1", "D_btUniversalConstraint_getAxis1"));
  mixin(bindCode("btUniversalConstraint_getAxis2", "D_btUniversalConstraint_getAxis2"));
  mixin(bindCode("btUniversalConstraint_getAngle1", "D_btUniversalConstraint_getAngle1"));
  mixin(bindCode("btUniversalConstraint_getAngle2", "D_btUniversalConstraint_getAngle2"));
  mixin(bindCode("btUniversalConstraint_setUpperLimit", "D_btUniversalConstraint_setUpperLimit"));
  mixin(bindCode("btUniversalConstraint_setLowerLimit", "D_btUniversalConstraint_setLowerLimit"));
  mixin(bindCode("btUniversalConstraint_setAxis", "D_btUniversalConstraint_setAxis"));
  mixin(bindCode("delete_btUniversalConstraint", "D_delete_btUniversalConstraint"));
  mixin(bindCode("btUniversalConstraint_Upcast", "D_btUniversalConstraint_Upcast"));
  mixin(bindCode("new_btHinge2Constraint", "D_new_btHinge2Constraint"));
  mixin(bindCode("btHinge2Constraint_getAnchor", "D_btHinge2Constraint_getAnchor"));
  mixin(bindCode("btHinge2Constraint_getAnchor2", "D_btHinge2Constraint_getAnchor2"));
  mixin(bindCode("btHinge2Constraint_getAxis1", "D_btHinge2Constraint_getAxis1"));
  mixin(bindCode("btHinge2Constraint_getAxis2", "D_btHinge2Constraint_getAxis2"));
  mixin(bindCode("btHinge2Constraint_getAngle1", "D_btHinge2Constraint_getAngle1"));
  mixin(bindCode("btHinge2Constraint_getAngle2", "D_btHinge2Constraint_getAngle2"));
  mixin(bindCode("btHinge2Constraint_setUpperLimit", "D_btHinge2Constraint_setUpperLimit"));
  mixin(bindCode("btHinge2Constraint_setLowerLimit", "D_btHinge2Constraint_setLowerLimit"));
  mixin(bindCode("delete_btHinge2Constraint", "D_delete_btHinge2Constraint"));
  mixin(bindCode("btHinge2Constraint_Upcast", "D_btHinge2Constraint_Upcast"));
  mixin(bindCode("new_btSequentialImpulseConstraintSolver", "D_new_btSequentialImpulseConstraintSolver"));
  mixin(bindCode("delete_btSequentialImpulseConstraintSolver", "D_delete_btSequentialImpulseConstraintSolver"));
  mixin(bindCode("btSequentialImpulseConstraintSolver_solveGroup", "D_btSequentialImpulseConstraintSolver_solveGroup"));
  mixin(bindCode("btSequentialImpulseConstraintSolver_reset", "D_btSequentialImpulseConstraintSolver_reset"));
  mixin(bindCode("btSequentialImpulseConstraintSolver_btRand2", "D_btSequentialImpulseConstraintSolver_btRand2"));
  mixin(bindCode("btSequentialImpulseConstraintSolver_btRandInt2", "D_btSequentialImpulseConstraintSolver_btRandInt2"));
  mixin(bindCode("btSequentialImpulseConstraintSolver_setRandSeed", "D_btSequentialImpulseConstraintSolver_setRandSeed"));
  mixin(bindCode("btSequentialImpulseConstraintSolver_getRandSeed", "D_btSequentialImpulseConstraintSolver_getRandSeed"));
  mixin(bindCode("btSequentialImpulseConstraintSolver_Upcast", "D_btSequentialImpulseConstraintSolver_Upcast"));
}

//#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
extern(C) void function(
  SwigExceptionCallback exceptionCallback,
  SwigExceptionCallback illegalArgumentCallback,
  SwigExceptionCallback illegalElementCallback,
  SwigExceptionCallback ioCallback,
  SwigExceptionCallback noSuchElementCallback) swigRegisterExceptionCallbacks;
//#endif // SWIG_D_NO_EXCEPTION_HELPER

//#if !defined(SWIG_D_NO_STRING_HELPER)
extern(C) void function(SwigStringCallback callback) swigRegisterStringCallback;
//#endif // SWIG_D_NO_STRING_HELPER


mixin template SwigOperatorDefinitions() {
  public override bool opEquals(Object o) {
    if (auto rhs = cast(typeof(this))o) {
      if (swigCPtr == rhs.swigCPtr) return true;
      static if (is(typeof(swigOpEquals(rhs)))) {
        return swigOpEquals(rhs);
      } else {
        return false; 
      }
    }
    return super.opEquals(o);
  }

  
  public override int opCmp(Object o) {
    static if (__traits(compiles, swigOpLt(typeof(this).init) &&
        swigOpEquals(typeof(this).init))) {
      if (auto rhs = cast(typeof(this))o) {
        if (swigOpLt(rhs)) {
          return -1;
        } else if (swigOpEquals(rhs)) {
          return 0;
        } else {
          return 1;
        }
      }
    }
    return super.opCmp(o);
  }

  private template swigOpBinary(string operator, string name) {
    enum swigOpBinary = `public void opOpAssign(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `Assign(rhs))) { swigOp` ~ name ~ `Assign(rhs);}` ~
      `public auto opBinary(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `(rhs))) { return swigOp` ~ name ~ `(rhs);}`;
  }
  mixin(swigOpBinary!("+", "Add"));
  mixin(swigOpBinary!("-", "Sub"));
  mixin(swigOpBinary!("*", "Mul"));
  mixin(swigOpBinary!("/", "Div"));
  mixin(swigOpBinary!("%", "Mod"));
  mixin(swigOpBinary!("&", "And"));
  mixin(swigOpBinary!("|", "Or"));
  mixin(swigOpBinary!("^", "Xor"));
  mixin(swigOpBinary!("<<", "Shl"));
  mixin(swigOpBinary!(">>", "Shr"));
  
  private template swigOpUnary(string operator, string name) {
    enum swigOpUnary = `public auto opUnary(string op)() if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `())) { return swigOp` ~ name ~ `();}`;   
  }
  mixin(swigOpUnary!("+", "Pos"));
  mixin(swigOpUnary!("-", "Neg"));
  mixin(swigOpUnary!("~", "Com"));
  mixin(swigOpUnary!("++", "Inc"));
  mixin(swigOpUnary!("--", "Dec"));


}


private class SwigExceptionHelper {
  static this() {
	// The D1/Tango version maps C++ exceptions to multiple exception types.
    swigRegisterExceptionCallbacks(
      &setException,
      &setException,
      &setException,
      &setException,
      &setException
    );
  }

  static void setException(char* message) {
    auto exception = new object.Exception(std.conv.to!string(message).idup);
    exception.next = SwigPendingException.retrieve();
    SwigPendingException.set(exception);
  }
}

package struct SwigPendingException {
public:
  static this() {
    m_sPendingCount = 0;
    m_sPendingException = null;
  }

  static bool isPending() {
    bool pending = false;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        pending = true;
      }
    }
    return pending;
  }

  static void set(object.Exception e) {
    if (m_sPendingException !is null) {
      throw new object.Exception("FATAL: An earlier pending exception from C/C++ code " ~
        "was missed and thus not thrown (" ~ m_sPendingException.classinfo.name ~
        ": " ~ m_sPendingException.msg ~ ")!", e);
    }

    m_sPendingException = e;
    synchronized {
      ++m_sPendingCount;
    }
  }

  static object.Exception retrieve() {
    object.Exception e = null;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        e = m_sPendingException;
        m_sPendingException = null;
        synchronized {
          --m_sPendingCount;
        }
      }
    }
    return e;
  }

private:
  // The pending exception counter is stored thread-global.
  static shared int m_sPendingCount;

  // The reference to the pending exception (if any) is stored thread-local.
  static object.Exception m_sPendingException;
}
alias void function(const char* message) SwigExceptionCallback;


private class SwigStringHelper {
  static this() {
    swigRegisterStringCallback(&createString);
  }

  static const(char)* createString(const(char*) cString) {
    // We are effectively dup'ing the string here.
    // TODO: Is this also correct for D2/Phobos?
    return std.string.toStringz(std.conv.to!string(cString));
  }
}
alias const(char)* function(const(char*) cString) SwigStringCallback;

extern(C) int function() BT_BULLET_VERSION_get;
extern(C) int function() btGetVersion;
extern(C) double function() BT_LARGE_FLOAT_get;
extern(C) float function(float jarg1) btSqrt;
extern(C) float function(float jarg1) btFabs;
extern(C) float function(float jarg1) btCos;
extern(C) float function(float jarg1) btSin;
extern(C) float function(float jarg1) btTan;
extern(C) float function(float jarg1) btAcos;
extern(C) float function(float jarg1) btAsin;
extern(C) float function(float jarg1) btAtan;
extern(C) float function(float jarg1, float jarg2) btAtan2;
extern(C) float function(float jarg1) btExp;
extern(C) float function(float jarg1) btLog;
extern(C) float function(float jarg1, float jarg2) btPow;
extern(C) float function(float jarg1, float jarg2) btFmod;
extern(C) float function(float jarg1, float jarg2) btAtan2Fast;
extern(C) uint function(float jarg1) btFuzzyZero;
extern(C) uint function(float jarg1, float jarg2) btEqual;
extern(C) uint function(float jarg1, float jarg2) btGreaterEqual;
extern(C) int function(float jarg1) btIsNegative;
extern(C) float function(float jarg1) btRadians;
extern(C) float function(float jarg1) btDegrees;
extern(C) float function(float jarg1, float jarg2, float jarg3) btFsel;
extern(C) uint function() btMachineIsLittleEndian;
extern(C) uint function(uint jarg1, uint jarg2, uint jarg3) btSelect__SWIG_0;
extern(C) int function(uint jarg1, int jarg2, int jarg3) btSelect__SWIG_1;
extern(C) float function(uint jarg1, float jarg2, float jarg3) btSelect__SWIG_2;
extern(C) uint function(uint jarg1) btSwapEndian__SWIG_0;
extern(C) ushort function(ushort jarg1) btSwapEndian__SWIG_1;
extern(C) uint function(int jarg1) btSwapEndian__SWIG_2;
extern(C) ushort function(short jarg1) btSwapEndian__SWIG_3;
extern(C) uint function(float jarg1) btSwapEndianFloat;
extern(C) float function(uint jarg1) btUnswapEndianFloat;
extern(C) void function(double jarg1, void* jarg2) btSwapEndianDouble;
extern(C) double function(void* jarg1) btUnswapEndianDouble;
extern(C) float function(float jarg1) btNormalizeAngle;
extern(C) void* function(int jarg1) new_btTypedObject;
extern(C) void function(void* jarg1, int jarg2) btTypedObject_m_objectType_set;
extern(C) int function(void* jarg1) btTypedObject_m_objectType_get;
extern(C) int function(void* jarg1) btTypedObject_getObjectType;
extern(C) void function(void* jarg1) delete_btTypedObject;
extern(C) const(char)* function() btVector3DataName_get;
extern(C) void function(void* jarg1, void* jarg2) btVector3_m_floats_set;
extern(C) void* function(void* jarg1) btVector3_m_floats_get;
extern(C) void* function() new_btVector3__SWIG_0;
extern(C) void* function(float jarg1, float jarg2, float jarg3) new_btVector3__SWIG_1;
extern(C) void* function(void* jarg1, void* jarg2) btVector3_swigOpAddAssign;
extern(C) void* function(void* jarg1, void* jarg2) btVector3_swigOpSubAssign;
extern(C) void* function(void* jarg1, float jarg2) btVector3_swigOpMulAssign__SWIG_0;
extern(C) void* function(void* jarg1, float jarg2) btVector3_swigOpDivAssign;
extern(C) float function(void* jarg1, void* jarg2) btVector3_dot;
extern(C) float function(void* jarg1) btVector3_length2;
extern(C) float function(void* jarg1) btVector3_length;
extern(C) float function(void* jarg1, void* jarg2) btVector3_distance2;
extern(C) float function(void* jarg1, void* jarg2) btVector3_distance;
extern(C) void* function(void* jarg1) btVector3_safeNormalize;
extern(C) void* function(void* jarg1) btVector3_normalize;
extern(C) void* function(void* jarg1) btVector3_normalized;
extern(C) void* function(void* jarg1, void* jarg2, float jarg3) btVector3_rotate;
extern(C) float function(void* jarg1, void* jarg2) btVector3_angle;
extern(C) void* function(void* jarg1) btVector3_absolute;
extern(C) void* function(void* jarg1, void* jarg2) btVector3_cross;
extern(C) float function(void* jarg1, void* jarg2, void* jarg3) btVector3_triple;
extern(C) int function(void* jarg1) btVector3_minAxis;
extern(C) int function(void* jarg1) btVector3_maxAxis;
extern(C) int function(void* jarg1) btVector3_furthestAxis;
extern(C) int function(void* jarg1) btVector3_closestAxis;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, float jarg4) btVector3_setInterpolate3;
extern(C) void* function(void* jarg1, void* jarg2, float jarg3) btVector3_lerp;
extern(C) void* function(void* jarg1, void* jarg2) btVector3_swigOpMulAssign__SWIG_1;
extern(C) float function(void* jarg1) btVector3_getX;
extern(C) float function(void* jarg1) btVector3_getY;
extern(C) float function(void* jarg1) btVector3_getZ;
extern(C) void function(void* jarg1, float jarg2) btVector3_setX;
extern(C) void function(void* jarg1, float jarg2) btVector3_setY;
extern(C) void function(void* jarg1, float jarg2) btVector3_setZ;
extern(C) void function(void* jarg1, float jarg2) btVector3_setW;
extern(C) float function(void* jarg1) btVector3_x;
extern(C) float function(void* jarg1) btVector3_y;
extern(C) float function(void* jarg1) btVector3_z;
extern(C) float function(void* jarg1) btVector3_w;
extern(C) uint function(void* jarg1, void* jarg2) btVector3_swigOpEquals;
extern(C) void function(void* jarg1, void* jarg2) btVector3_setMax;
extern(C) void function(void* jarg1, void* jarg2) btVector3_setMin;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4) btVector3_setValue;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btVector3_getSkewSymmetricMatrix;
extern(C) void function(void* jarg1) btVector3_setZero;
extern(C) uint function(void* jarg1) btVector3_isZero;
extern(C) uint function(void* jarg1) btVector3_fuzzyZero;
extern(C) void function(void* jarg1, void* jarg2) btVector3_serialize;
extern(C) void function(void* jarg1, void* jarg2) btVector3_deSerialize;
extern(C) void function(void* jarg1, void* jarg2) btVector3_serializeFloat;
extern(C) void function(void* jarg1, void* jarg2) btVector3_deSerializeFloat;
extern(C) void function(void* jarg1, void* jarg2) btVector3_serializeDouble;
extern(C) void function(void* jarg1, void* jarg2) btVector3_deSerializeDouble;
extern(C) void function(void* jarg1) delete_btVector3;
extern(C) float function(void* jarg1, void* jarg2) btDot;
extern(C) float function(void* jarg1, void* jarg2) btDistance2;
extern(C) float function(void* jarg1, void* jarg2) btDistance;
extern(C) float function(void* jarg1, void* jarg2) btAngle;
extern(C) void* function(void* jarg1, void* jarg2) btCross;
extern(C) float function(void* jarg1, void* jarg2, void* jarg3) btTriple;
extern(C) void* function(void* jarg1, void* jarg2, float jarg3) lerp;
extern(C) void* function() new_btVector4__SWIG_0;
extern(C) void* function(float jarg1, float jarg2, float jarg3, float jarg4) new_btVector4__SWIG_1;
extern(C) void* function(void* jarg1) btVector4_absolute4;
extern(C) float function(void* jarg1) btVector4_getW;
extern(C) int function(void* jarg1) btVector4_maxAxis4;
extern(C) int function(void* jarg1) btVector4_minAxis4;
extern(C) int function(void* jarg1) btVector4_closestAxis4;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4, float jarg5) btVector4_setValue;
extern(C) void function(void* jarg1) delete_btVector4;
extern(C) void* function(void* objectRef) btVector4_Upcast;
extern(C) void function(float jarg1, void* jarg2) btSwapScalarEndian;
extern(C) void function(void* jarg1, void* jarg2) btSwapVector3Endian;
extern(C) void function(void* jarg1) btUnSwapVector3Endian;
extern(C) void function(void* jarg1, void* jarg2) btVector3FloatData_m_floats_set;
extern(C) void* function(void* jarg1) btVector3FloatData_m_floats_get;
extern(C) void* function() new_btVector3FloatData;
extern(C) void function(void* jarg1) delete_btVector3FloatData;
extern(C) void function(void* jarg1, void* jarg2) btVector3DoubleData_m_floats_set;
extern(C) void* function(void* jarg1) btVector3DoubleData_m_floats_get;
extern(C) void* function() new_btVector3DoubleData;
extern(C) void function(void* jarg1) delete_btVector3DoubleData;
extern(C) void* function() new_btQuaternion__SWIG_0;
extern(C) void* function(float jarg1, float jarg2, float jarg3, float jarg4) new_btQuaternion__SWIG_1;
extern(C) void* function(void* jarg1, float jarg2) new_btQuaternion__SWIG_2;
extern(C) void* function(float jarg1, float jarg2, float jarg3) new_btQuaternion__SWIG_3;
extern(C) void function(void* jarg1, void* jarg2, float jarg3) btQuaternion_setRotation;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4) btQuaternion_setEuler;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4) btQuaternion_setEulerZYX;
extern(C) void* function(void* jarg1, void* jarg2) btQuaternion_swigOpAddAssign;
extern(C) void* function(void* jarg1, void* jarg2) btQuaternion_swigOpSubAssign;
extern(C) void* function(void* jarg1, float jarg2) btQuaternion_swigOpMulAssign__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) btQuaternion_swigOpMulAssign__SWIG_1;
extern(C) float function(void* jarg1, void* jarg2) btQuaternion_dot;
extern(C) float function(void* jarg1) btQuaternion_length2;
extern(C) float function(void* jarg1) btQuaternion_length;
extern(C) void* function(void* jarg1) btQuaternion_normalize;
extern(C) void* function(void* jarg1, float jarg2) btQuaternion_swigOpMul;
extern(C) void* function(void* jarg1, float jarg2) btQuaternion_swigOpDiv;
extern(C) void* function(void* jarg1, float jarg2) btQuaternion_swigOpDivAssign;
extern(C) void* function(void* jarg1) btQuaternion_normalized;
extern(C) float function(void* jarg1, void* jarg2) btQuaternion_angle;
extern(C) float function(void* jarg1) btQuaternion_getAngle;
extern(C) void* function(void* jarg1) btQuaternion_getAxis;
extern(C) void* function(void* jarg1) btQuaternion_inverse;
extern(C) void* function(void* jarg1, void* jarg2) btQuaternion_swigOpAdd;
extern(C) void* function(void* jarg1, void* jarg2) btQuaternion_swigOpSub;
extern(C) void* function(void* jarg1) btQuaternion_swigOpNeg;
extern(C) void* function(void* jarg1, void* jarg2) btQuaternion_farthest;
extern(C) void* function(void* jarg1, void* jarg2) btQuaternion_nearest;
extern(C) void* function(void* jarg1, void* jarg2, float jarg3) btQuaternion_slerp;
extern(C) void* function() btQuaternion_getIdentity;
extern(C) float function(void* jarg1) btQuaternion_getW;
extern(C) void function(void* jarg1) delete_btQuaternion;
extern(C) float function(void* jarg1, void* jarg2) dot;
extern(C) float function(void* jarg1) length;
extern(C) float function(void* jarg1, void* jarg2) angle;
extern(C) void* function(void* jarg1) inverse;
extern(C) void* function(void* jarg1, void* jarg2, float jarg3) slerp;
extern(C) void* function(void* jarg1, void* jarg2) quatRotate;
extern(C) void* function(void* jarg1, void* jarg2) shortestArcQuat;
extern(C) void* function(void* jarg1, void* jarg2) shortestArcQuatNormalize2;
extern(C) void* function() new_btTransform__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) new_btTransform__SWIG_1;
extern(C) void* function(void* jarg1) new_btTransform__SWIG_2;
extern(C) void* function(void* jarg1, void* jarg2) new_btTransform__SWIG_3;
extern(C) void* function(void* jarg1) new_btTransform__SWIG_4;
extern(C) void* function(void* jarg1) new_btTransform__SWIG_5;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btTransform_mult;
extern(C) void* function(void* jarg1, void* jarg2) btTransform_opCall;
extern(C) void* function(void* jarg1, void* jarg2) btTransform_swigOpMul__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) btTransform_swigOpMul__SWIG_1;
extern(C) void* function(void* jarg1) btTransform_getBasis__SWIG_0;
extern(C) void* function(void* jarg1) btTransform_getOrigin__SWIG_0;
extern(C) void* function(void* jarg1) btTransform_getRotation;
extern(C) void function(void* jarg1, void* jarg2) btTransform_setFromOpenGLMatrix;
extern(C) void function(void* jarg1, void* jarg2) btTransform_getOpenGLMatrix;
extern(C) void function(void* jarg1, void* jarg2) btTransform_setOrigin;
extern(C) void* function(void* jarg1, void* jarg2) btTransform_invXform;
extern(C) void function(void* jarg1, void* jarg2) btTransform_setBasis;
extern(C) void function(void* jarg1, void* jarg2) btTransform_setRotation;
extern(C) void function(void* jarg1) btTransform_setIdentity;
extern(C) void* function(void* jarg1, void* jarg2) btTransform_swigOpMulAssign;
extern(C) void* function(void* jarg1) btTransform_inverse;
extern(C) void* function(void* jarg1, void* jarg2) btTransform_inverseTimes;
extern(C) void* function(void* jarg1, void* jarg2) btTransform_swigOpMul__SWIG_2;
extern(C) void* function() btTransform_getIdentity;
extern(C) void function(void* jarg1, void* jarg2) btTransform_serialize;
extern(C) void function(void* jarg1, void* jarg2) btTransform_serializeFloat;
extern(C) void function(void* jarg1, void* jarg2) btTransform_deSerialize;
extern(C) void function(void* jarg1, void* jarg2) btTransform_deSerializeDouble;
extern(C) void function(void* jarg1, void* jarg2) btTransform_deSerializeFloat;
extern(C) void function(void* jarg1) delete_btTransform;
extern(C) void function(void* jarg1, void* jarg2) btTransformFloatData_m_basis_set;
extern(C) void* function(void* jarg1) btTransformFloatData_m_basis_get;
extern(C) void function(void* jarg1, void* jarg2) btTransformFloatData_m_origin_set;
extern(C) void* function(void* jarg1) btTransformFloatData_m_origin_get;
extern(C) void* function() new_btTransformFloatData;
extern(C) void function(void* jarg1) delete_btTransformFloatData;
extern(C) void function(void* jarg1, void* jarg2) btTransformDoubleData_m_basis_set;
extern(C) void* function(void* jarg1) btTransformDoubleData_m_basis_get;
extern(C) void function(void* jarg1, void* jarg2) btTransformDoubleData_m_origin_set;
extern(C) void* function(void* jarg1) btTransformDoubleData_m_origin_get;
extern(C) void* function() new_btTransformDoubleData;
extern(C) void function(void* jarg1) delete_btTransformDoubleData;
extern(C) void function(void* jarg1) delete_btMotionState;
extern(C) void function(void* jarg1, void* jarg2) btMotionState_getWorldTransform;
extern(C) void function(void* jarg1, void* jarg2) btMotionState_setWorldTransform;
extern(C) void function(void* jarg1, void* jarg2) btDefaultMotionState_m_graphicsWorldTrans_set;
extern(C) void* function(void* jarg1) btDefaultMotionState_m_graphicsWorldTrans_get;
extern(C) void function(void* jarg1, void* jarg2) btDefaultMotionState_m_centerOfMassOffset_set;
extern(C) void* function(void* jarg1) btDefaultMotionState_m_centerOfMassOffset_get;
extern(C) void function(void* jarg1, void* jarg2) btDefaultMotionState_m_startWorldTrans_set;
extern(C) void* function(void* jarg1) btDefaultMotionState_m_startWorldTrans_get;
extern(C) void function(void* jarg1, void* jarg2) btDefaultMotionState_m_userPointer_set;
extern(C) void* function(void* jarg1) btDefaultMotionState_m_userPointer_get;
extern(C) void* function(void* jarg1, void* jarg2) new_btDefaultMotionState__SWIG_0;
extern(C) void* function(void* jarg1) new_btDefaultMotionState__SWIG_1;
extern(C) void* function() new_btDefaultMotionState__SWIG_2;
extern(C) void function(void* jarg1, void* jarg2) btDefaultMotionState_getWorldTransform;
extern(C) void function(void* jarg1, void* jarg2) btDefaultMotionState_setWorldTransform;
extern(C) void function(void* jarg1) delete_btDefaultMotionState;
extern(C) void* function(void* objectRef) btDefaultMotionState_Upcast;
extern(C) void function(void* jarg1) delete_btIDebugDraw;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btIDebugDraw_drawLine__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btIDebugDraw_drawLine__SWIG_1;
extern(C) void function(void* jarg1, float jarg2, void* jarg3, void* jarg4) btIDebugDraw_drawSphere__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, float jarg3, void* jarg4) btIDebugDraw_drawSphere__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6, void* jarg7, void* jarg8, float jarg9) btIDebugDraw_drawTriangle__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, float jarg6) btIDebugDraw_drawTriangle__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, float jarg4, int jarg5, void* jarg6) btIDebugDraw_drawContactPoint;
extern(C) void function(void* jarg1, const(char)* jarg2) btIDebugDraw_reportErrorWarning;
extern(C) void function(void* jarg1, void* jarg2, const(char)* jarg3) btIDebugDraw_draw3dText;
extern(C) void function(void* jarg1, int jarg2) btIDebugDraw_setDebugMode;
extern(C) int function(void* jarg1) btIDebugDraw_getDebugMode;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btIDebugDraw_drawAabb;
extern(C) void function(void* jarg1, void* jarg2, float jarg3) btIDebugDraw_drawTransform;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, float jarg5, float jarg6, float jarg7, float jarg8, void* jarg9, uint jarg10, float jarg11) btIDebugDraw_drawArc__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, float jarg5, float jarg6, float jarg7, float jarg8, void* jarg9, uint jarg10) btIDebugDraw_drawArc__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, void* jarg10, float jarg11) btIDebugDraw_drawSpherePatch__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, void* jarg10) btIDebugDraw_drawSpherePatch__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btIDebugDraw_drawBox__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btIDebugDraw_drawBox__SWIG_1;
extern(C) void function(void* jarg1, float jarg2, float jarg3, int jarg4, void* jarg5, void* jarg6) btIDebugDraw_drawCapsule;
extern(C) void function(void* jarg1, float jarg2, float jarg3, int jarg4, void* jarg5, void* jarg6) btIDebugDraw_drawCylinder;
extern(C) void function(void* jarg1, float jarg2, float jarg3, int jarg4, void* jarg5, void* jarg6) btIDebugDraw_drawCone;
extern(C) void function(void* jarg1, void* jarg2, float jarg3, void* jarg4, void* jarg5) btIDebugDraw_drawPlane;
extern(C) void* function() sBulletDNAstr_get;
extern(C) void function(int jarg1) sBulletDNAlen_set;
extern(C) int function() sBulletDNAlen_get;
extern(C) void* function() sBulletDNAstr64_get;
extern(C) void function(int jarg1) sBulletDNAlen64_set;
extern(C) int function() sBulletDNAlen64_get;
extern(C) int function(const(char)* jarg1) btStrLen;
extern(C) void function(void* jarg1, int jarg2) btChunk_m_chunkCode_set;
extern(C) int function(void* jarg1) btChunk_m_chunkCode_get;
extern(C) void function(void* jarg1, int jarg2) btChunk_m_length_set;
extern(C) int function(void* jarg1) btChunk_m_length_get;
extern(C) void function(void* jarg1, void* jarg2) btChunk_m_oldPtr_set;
extern(C) void* function(void* jarg1) btChunk_m_oldPtr_get;
extern(C) void function(void* jarg1, int jarg2) btChunk_m_dna_nr_set;
extern(C) int function(void* jarg1) btChunk_m_dna_nr_get;
extern(C) void function(void* jarg1, int jarg2) btChunk_m_number_set;
extern(C) int function(void* jarg1) btChunk_m_number_get;
extern(C) void* function() new_btChunk;
extern(C) void function(void* jarg1) delete_btChunk;
extern(C) void function(void* jarg1) delete_btSerializer;
extern(C) void* function(void* jarg1) btSerializer_getBufferPointer;
extern(C) int function(void* jarg1) btSerializer_getCurrentBufferSize;
extern(C) void* function(void* jarg1, size_t jarg2, int jarg3) btSerializer_allocate;
extern(C) void function(void* jarg1, void* jarg2, const(char)* jarg3, int jarg4, void* jarg5) btSerializer_finalizeChunk;
extern(C) void* function(void* jarg1, void* jarg2) btSerializer_findPointer;
extern(C) void* function(void* jarg1, void* jarg2) btSerializer_getUniquePointer;
extern(C) void function(void* jarg1) btSerializer_startSerialization;
extern(C) void function(void* jarg1) btSerializer_finishSerialization;
extern(C) const(char)* function(void* jarg1, void* jarg2) btSerializer_findNameForPointer;
extern(C) void function(void* jarg1, void* jarg2, const(char)* jarg3) btSerializer_registerNameForPointer;
extern(C) void function(void* jarg1, const(char)* jarg2) btSerializer_serializeName;
extern(C) int function(void* jarg1) btSerializer_getSerializationFlags;
extern(C) void function(void* jarg1, int jarg2) btSerializer_setSerializationFlags;
extern(C) int function() BT_HEADER_LENGTH_get;
extern(C) void* function() new_btPointerUid;
extern(C) void function(void* jarg1) delete_btPointerUid;
extern(C) void* function(int jarg1) new_btDefaultSerializer__SWIG_0;
extern(C) void* function() new_btDefaultSerializer__SWIG_1;
extern(C) void function(void* jarg1) delete_btDefaultSerializer;
extern(C) void function(void* jarg1, void* jarg2) btDefaultSerializer_writeHeader;
extern(C) void function(void* jarg1) btDefaultSerializer_startSerialization;
extern(C) void function(void* jarg1) btDefaultSerializer_finishSerialization;
extern(C) void* function(void* jarg1, void* jarg2) btDefaultSerializer_getUniquePointer;
extern(C) void* function(void* jarg1) btDefaultSerializer_getBufferPointer;
extern(C) int function(void* jarg1) btDefaultSerializer_getCurrentBufferSize;
extern(C) void function(void* jarg1, void* jarg2, const(char)* jarg3, int jarg4, void* jarg5) btDefaultSerializer_finalizeChunk;
extern(C) void* function(void* jarg1, size_t jarg2) btDefaultSerializer_internalAlloc;
extern(C) void* function(void* jarg1, size_t jarg2, int jarg3) btDefaultSerializer_allocate;
extern(C) const(char)* function(void* jarg1, void* jarg2) btDefaultSerializer_findNameForPointer;
extern(C) void function(void* jarg1, void* jarg2, const(char)* jarg3) btDefaultSerializer_registerNameForPointer;
extern(C) void function(void* jarg1, const(char)* jarg2) btDefaultSerializer_serializeName;
extern(C) int function(void* jarg1) btDefaultSerializer_getSerializationFlags;
extern(C) void function(void* jarg1, int jarg2) btDefaultSerializer_setSerializationFlags;
extern(C) void* function(void* objectRef) btDefaultSerializer_Upcast;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3) new_btCollisionWorld;
extern(C) void function(void* jarg1) delete_btCollisionWorld;
extern(C) void function(void* jarg1, void* jarg2) btCollisionWorld_setBroadphase;
extern(C) void* function(void* jarg1) btCollisionWorld_getBroadphase__SWIG_0;
extern(C) void* function(void* jarg1) btCollisionWorld_getPairCache;
extern(C) void* function(void* jarg1) btCollisionWorld_getDispatcher__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) btCollisionWorld_updateSingleAabb;
extern(C) void function(void* jarg1) btCollisionWorld_updateAabbs;
extern(C) void function(void* jarg1, void* jarg2) btCollisionWorld_setDebugDrawer;
extern(C) void* function(void* jarg1) btCollisionWorld_getDebugDrawer;
extern(C) void function(void* jarg1) btCollisionWorld_debugDrawWorld;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btCollisionWorld_debugDrawObject;
extern(C) int function(void* jarg1) btCollisionWorld_getNumCollisionObjects;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btCollisionWorld_rayTest;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, float jarg6) btCollisionWorld_convexSweepTest__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btCollisionWorld_convexSweepTest__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btCollisionWorld_contactTest;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btCollisionWorld_contactPairTest;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6) btCollisionWorld_rayTestSingle;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6, void* jarg7, float jarg8) btCollisionWorld_objectQuerySingle;
extern(C) void function(void* jarg1, void* jarg2, short jarg3, short jarg4) btCollisionWorld_addCollisionObject__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, short jarg3) btCollisionWorld_addCollisionObject__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2) btCollisionWorld_addCollisionObject__SWIG_2;
extern(C) void* function(void* jarg1) btCollisionWorld_getCollisionObjectArray__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) btCollisionWorld_removeCollisionObject;
extern(C) void function(void* jarg1) btCollisionWorld_performDiscreteCollisionDetection;
extern(C) void* function(void* jarg1) btCollisionWorld_getDispatchInfo__SWIG_0;
extern(C) uint function(void* jarg1) btCollisionWorld_getForceUpdateAllAabbs;
extern(C) void function(void* jarg1, uint jarg2) btCollisionWorld_setForceUpdateAllAabbs;
extern(C) void function(void* jarg1, void* jarg2) btCollisionWorld_serialize;
extern(C) void* function(void* jarg1, int jarg2) btCollisionWorld_getCollisionObject;
extern(C) int function() ACTIVE_TAG_get;
extern(C) int function() ISLAND_SLEEPING_get;
extern(C) int function() WANTS_DEACTIVATION_get;
extern(C) int function() DISABLE_DEACTIVATION_get;
extern(C) int function() DISABLE_SIMULATION_get;
extern(C) const(char)* function() btCollisionObjectDataName_get;
extern(C) uint function(void* jarg1) btCollisionObject_mergesSimulationIslands;
extern(C) void* function(void* jarg1) btCollisionObject_getAnisotropicFriction;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObject_setAnisotropicFriction;
extern(C) uint function(void* jarg1) btCollisionObject_hasAnisotropicFriction;
extern(C) void function(void* jarg1, float jarg2) btCollisionObject_setContactProcessingThreshold;
extern(C) float function(void* jarg1) btCollisionObject_getContactProcessingThreshold;
extern(C) uint function(void* jarg1) btCollisionObject_isStaticObject;
extern(C) uint function(void* jarg1) btCollisionObject_isKinematicObject;
extern(C) uint function(void* jarg1) btCollisionObject_isStaticOrKinematicObject;
extern(C) uint function(void* jarg1) btCollisionObject_hasContactResponse;
extern(C) void* function() new_btCollisionObject;
extern(C) void function(void* jarg1) delete_btCollisionObject;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObject_setCollisionShape;
extern(C) void* function(void* jarg1) btCollisionObject_getCollisionShape__SWIG_0;
extern(C) void* function(void* jarg1) btCollisionObject_getRootCollisionShape__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObject_internalSetTemporaryCollisionShape;
extern(C) void* function(void* jarg1) btCollisionObject_internalGetExtensionPointer;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObject_internalSetExtensionPointer;
extern(C) int function(void* jarg1) btCollisionObject_getActivationState;
extern(C) void function(void* jarg1, int jarg2) btCollisionObject_setActivationState;
extern(C) void function(void* jarg1, float jarg2) btCollisionObject_setDeactivationTime;
extern(C) float function(void* jarg1) btCollisionObject_getDeactivationTime;
extern(C) void function(void* jarg1, int jarg2) btCollisionObject_forceActivationState;
extern(C) void function(void* jarg1, uint jarg2) btCollisionObject_activate__SWIG_0;
extern(C) void function(void* jarg1) btCollisionObject_activate__SWIG_1;
extern(C) uint function(void* jarg1) btCollisionObject_isActive;
extern(C) void function(void* jarg1, float jarg2) btCollisionObject_setRestitution;
extern(C) float function(void* jarg1) btCollisionObject_getRestitution;
extern(C) void function(void* jarg1, float jarg2) btCollisionObject_setFriction;
extern(C) float function(void* jarg1) btCollisionObject_getFriction;
extern(C) int function(void* jarg1) btCollisionObject_getInternalType;
extern(C) void* function(void* jarg1) btCollisionObject_getWorldTransform__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObject_setWorldTransform;
extern(C) void* function(void* jarg1) btCollisionObject_getBroadphaseHandle__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObject_setBroadphaseHandle;
extern(C) void* function(void* jarg1) btCollisionObject_getInterpolationWorldTransform__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObject_setInterpolationWorldTransform;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObject_setInterpolationLinearVelocity;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObject_setInterpolationAngularVelocity;
extern(C) void* function(void* jarg1) btCollisionObject_getInterpolationLinearVelocity;
extern(C) void* function(void* jarg1) btCollisionObject_getInterpolationAngularVelocity;
extern(C) int function(void* jarg1) btCollisionObject_getIslandTag;
extern(C) void function(void* jarg1, int jarg2) btCollisionObject_setIslandTag;
extern(C) int function(void* jarg1) btCollisionObject_getCompanionId;
extern(C) void function(void* jarg1, int jarg2) btCollisionObject_setCompanionId;
extern(C) float function(void* jarg1) btCollisionObject_getHitFraction;
extern(C) void function(void* jarg1, float jarg2) btCollisionObject_setHitFraction;
extern(C) int function(void* jarg1) btCollisionObject_getCollisionFlags;
extern(C) void function(void* jarg1, int jarg2) btCollisionObject_setCollisionFlags;
extern(C) float function(void* jarg1) btCollisionObject_getCcdSweptSphereRadius;
extern(C) void function(void* jarg1, float jarg2) btCollisionObject_setCcdSweptSphereRadius;
extern(C) float function(void* jarg1) btCollisionObject_getCcdMotionThreshold;
extern(C) float function(void* jarg1) btCollisionObject_getCcdSquareMotionThreshold;
extern(C) void function(void* jarg1, float jarg2) btCollisionObject_setCcdMotionThreshold;
extern(C) void* function(void* jarg1) btCollisionObject_getUserPointer;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObject_setUserPointer;
extern(C) uint function(void* jarg1, void* jarg2) btCollisionObject_checkCollideWith;
extern(C) int function(void* jarg1) btCollisionObject_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btCollisionObject_serialize;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObject_serializeSingleObject;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectDoubleData_m_broadphaseHandle_set;
extern(C) void* function(void* jarg1) btCollisionObjectDoubleData_m_broadphaseHandle_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectDoubleData_m_collisionShape_set;
extern(C) void* function(void* jarg1) btCollisionObjectDoubleData_m_collisionShape_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectDoubleData_m_rootCollisionShape_set;
extern(C) void* function(void* jarg1) btCollisionObjectDoubleData_m_rootCollisionShape_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btCollisionObjectDoubleData_m_name_set;
extern(C) const(char)* function(void* jarg1) btCollisionObjectDoubleData_m_name_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectDoubleData_m_worldTransform_set;
extern(C) void* function(void* jarg1) btCollisionObjectDoubleData_m_worldTransform_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectDoubleData_m_interpolationWorldTransform_set;
extern(C) void* function(void* jarg1) btCollisionObjectDoubleData_m_interpolationWorldTransform_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectDoubleData_m_interpolationLinearVelocity_set;
extern(C) void* function(void* jarg1) btCollisionObjectDoubleData_m_interpolationLinearVelocity_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectDoubleData_m_interpolationAngularVelocity_set;
extern(C) void* function(void* jarg1) btCollisionObjectDoubleData_m_interpolationAngularVelocity_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectDoubleData_m_anisotropicFriction_set;
extern(C) void* function(void* jarg1) btCollisionObjectDoubleData_m_anisotropicFriction_get;
extern(C) void function(void* jarg1, double jarg2) btCollisionObjectDoubleData_m_contactProcessingThreshold_set;
extern(C) double function(void* jarg1) btCollisionObjectDoubleData_m_contactProcessingThreshold_get;
extern(C) void function(void* jarg1, double jarg2) btCollisionObjectDoubleData_m_deactivationTime_set;
extern(C) double function(void* jarg1) btCollisionObjectDoubleData_m_deactivationTime_get;
extern(C) void function(void* jarg1, double jarg2) btCollisionObjectDoubleData_m_friction_set;
extern(C) double function(void* jarg1) btCollisionObjectDoubleData_m_friction_get;
extern(C) void function(void* jarg1, double jarg2) btCollisionObjectDoubleData_m_restitution_set;
extern(C) double function(void* jarg1) btCollisionObjectDoubleData_m_restitution_get;
extern(C) void function(void* jarg1, double jarg2) btCollisionObjectDoubleData_m_hitFraction_set;
extern(C) double function(void* jarg1) btCollisionObjectDoubleData_m_hitFraction_get;
extern(C) void function(void* jarg1, double jarg2) btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set;
extern(C) double function(void* jarg1) btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get;
extern(C) void function(void* jarg1, double jarg2) btCollisionObjectDoubleData_m_ccdMotionThreshold_set;
extern(C) double function(void* jarg1) btCollisionObjectDoubleData_m_ccdMotionThreshold_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectDoubleData_m_hasAnisotropicFriction_set;
extern(C) int function(void* jarg1) btCollisionObjectDoubleData_m_hasAnisotropicFriction_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectDoubleData_m_collisionFlags_set;
extern(C) int function(void* jarg1) btCollisionObjectDoubleData_m_collisionFlags_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectDoubleData_m_islandTag1_set;
extern(C) int function(void* jarg1) btCollisionObjectDoubleData_m_islandTag1_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectDoubleData_m_companionId_set;
extern(C) int function(void* jarg1) btCollisionObjectDoubleData_m_companionId_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectDoubleData_m_activationState1_set;
extern(C) int function(void* jarg1) btCollisionObjectDoubleData_m_activationState1_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectDoubleData_m_internalType_set;
extern(C) int function(void* jarg1) btCollisionObjectDoubleData_m_internalType_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectDoubleData_m_checkCollideWith_set;
extern(C) int function(void* jarg1) btCollisionObjectDoubleData_m_checkCollideWith_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btCollisionObjectDoubleData_m_padding_set;
extern(C) const(char)* function(void* jarg1) btCollisionObjectDoubleData_m_padding_get;
extern(C) void* function() new_btCollisionObjectDoubleData;
extern(C) void function(void* jarg1) delete_btCollisionObjectDoubleData;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectFloatData_m_broadphaseHandle_set;
extern(C) void* function(void* jarg1) btCollisionObjectFloatData_m_broadphaseHandle_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectFloatData_m_collisionShape_set;
extern(C) void* function(void* jarg1) btCollisionObjectFloatData_m_collisionShape_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectFloatData_m_rootCollisionShape_set;
extern(C) void* function(void* jarg1) btCollisionObjectFloatData_m_rootCollisionShape_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btCollisionObjectFloatData_m_name_set;
extern(C) const(char)* function(void* jarg1) btCollisionObjectFloatData_m_name_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectFloatData_m_worldTransform_set;
extern(C) void* function(void* jarg1) btCollisionObjectFloatData_m_worldTransform_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectFloatData_m_interpolationWorldTransform_set;
extern(C) void* function(void* jarg1) btCollisionObjectFloatData_m_interpolationWorldTransform_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectFloatData_m_interpolationLinearVelocity_set;
extern(C) void* function(void* jarg1) btCollisionObjectFloatData_m_interpolationLinearVelocity_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectFloatData_m_interpolationAngularVelocity_set;
extern(C) void* function(void* jarg1) btCollisionObjectFloatData_m_interpolationAngularVelocity_get;
extern(C) void function(void* jarg1, void* jarg2) btCollisionObjectFloatData_m_anisotropicFriction_set;
extern(C) void* function(void* jarg1) btCollisionObjectFloatData_m_anisotropicFriction_get;
extern(C) void function(void* jarg1, float jarg2) btCollisionObjectFloatData_m_contactProcessingThreshold_set;
extern(C) float function(void* jarg1) btCollisionObjectFloatData_m_contactProcessingThreshold_get;
extern(C) void function(void* jarg1, float jarg2) btCollisionObjectFloatData_m_deactivationTime_set;
extern(C) float function(void* jarg1) btCollisionObjectFloatData_m_deactivationTime_get;
extern(C) void function(void* jarg1, float jarg2) btCollisionObjectFloatData_m_friction_set;
extern(C) float function(void* jarg1) btCollisionObjectFloatData_m_friction_get;
extern(C) void function(void* jarg1, float jarg2) btCollisionObjectFloatData_m_restitution_set;
extern(C) float function(void* jarg1) btCollisionObjectFloatData_m_restitution_get;
extern(C) void function(void* jarg1, float jarg2) btCollisionObjectFloatData_m_hitFraction_set;
extern(C) float function(void* jarg1) btCollisionObjectFloatData_m_hitFraction_get;
extern(C) void function(void* jarg1, float jarg2) btCollisionObjectFloatData_m_ccdSweptSphereRadius_set;
extern(C) float function(void* jarg1) btCollisionObjectFloatData_m_ccdSweptSphereRadius_get;
extern(C) void function(void* jarg1, float jarg2) btCollisionObjectFloatData_m_ccdMotionThreshold_set;
extern(C) float function(void* jarg1) btCollisionObjectFloatData_m_ccdMotionThreshold_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectFloatData_m_hasAnisotropicFriction_set;
extern(C) int function(void* jarg1) btCollisionObjectFloatData_m_hasAnisotropicFriction_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectFloatData_m_collisionFlags_set;
extern(C) int function(void* jarg1) btCollisionObjectFloatData_m_collisionFlags_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectFloatData_m_islandTag1_set;
extern(C) int function(void* jarg1) btCollisionObjectFloatData_m_islandTag1_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectFloatData_m_companionId_set;
extern(C) int function(void* jarg1) btCollisionObjectFloatData_m_companionId_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectFloatData_m_activationState1_set;
extern(C) int function(void* jarg1) btCollisionObjectFloatData_m_activationState1_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectFloatData_m_internalType_set;
extern(C) int function(void* jarg1) btCollisionObjectFloatData_m_internalType_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionObjectFloatData_m_checkCollideWith_set;
extern(C) int function(void* jarg1) btCollisionObjectFloatData_m_checkCollideWith_get;
extern(C) void* function() new_btCollisionObjectFloatData;
extern(C) void function(void* jarg1) delete_btCollisionObjectFloatData;
extern(C) void function(void* jarg1) delete_btCollisionShape;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btCollisionShape_getAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btCollisionShape_getBoundingSphere;
extern(C) float function(void* jarg1) btCollisionShape_getAngularMotionDisc;
extern(C) float function(void* jarg1, float jarg2) btCollisionShape_getContactBreakingThreshold;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, float jarg5, void* jarg6, void* jarg7) btCollisionShape_calculateTemporalAabb;
extern(C) uint function(void* jarg1) btCollisionShape_isPolyhedral;
extern(C) uint function(void* jarg1) btCollisionShape_isConvex2d;
extern(C) uint function(void* jarg1) btCollisionShape_isConvex;
extern(C) uint function(void* jarg1) btCollisionShape_isNonMoving;
extern(C) uint function(void* jarg1) btCollisionShape_isConcave;
extern(C) uint function(void* jarg1) btCollisionShape_isCompound;
extern(C) uint function(void* jarg1) btCollisionShape_isSoftBody;
extern(C) uint function(void* jarg1) btCollisionShape_isInfinite;
extern(C) void function(void* jarg1, void* jarg2) btCollisionShape_setLocalScaling;
extern(C) void* function(void* jarg1) btCollisionShape_getLocalScaling;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btCollisionShape_calculateLocalInertia;
extern(C) const(char)* function(void* jarg1) btCollisionShape_getName;
extern(C) int function(void* jarg1) btCollisionShape_getShapeType;
extern(C) void function(void* jarg1, float jarg2) btCollisionShape_setMargin;
extern(C) float function(void* jarg1) btCollisionShape_getMargin;
extern(C) void function(void* jarg1, void* jarg2) btCollisionShape_setUserPointer;
extern(C) void* function(void* jarg1) btCollisionShape_getUserPointer;
extern(C) int function(void* jarg1) btCollisionShape_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btCollisionShape_serialize;
extern(C) void function(void* jarg1, void* jarg2) btCollisionShape_serializeSingleShape;
extern(C) void function(void* jarg1, const(char)* jarg2) btCollisionShapeData_m_name_set;
extern(C) const(char)* function(void* jarg1) btCollisionShapeData_m_name_get;
extern(C) void function(void* jarg1, int jarg2) btCollisionShapeData_m_shapeType_set;
extern(C) int function(void* jarg1) btCollisionShapeData_m_shapeType_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btCollisionShapeData_m_padding_set;
extern(C) const(char)* function(void* jarg1) btCollisionShapeData_m_padding_get;
extern(C) void* function() new_btCollisionShapeData;
extern(C) void function(void* jarg1) delete_btCollisionShapeData;
extern(C) int function() MAX_PREFERRED_PENETRATION_DIRECTIONS_get;
extern(C) void function(void* jarg1) delete_btConvexShape;
extern(C) void* function(void* jarg1, void* jarg2) btConvexShape_localGetSupportingVertex;
extern(C) void* function(void* jarg1, void* jarg2) btConvexShape_localGetSupportingVertexWithoutMargin;
extern(C) void* function(void* jarg1, void* jarg2) btConvexShape_localGetSupportVertexWithoutMarginNonVirtual;
extern(C) void* function(void* jarg1, void* jarg2) btConvexShape_localGetSupportVertexNonVirtual;
extern(C) float function(void* jarg1) btConvexShape_getMarginNonVirtual;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btConvexShape_getAabbNonVirtual;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btConvexShape_project;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btConvexShape_getAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btConvexShape_getAabbSlow;
extern(C) void function(void* jarg1, void* jarg2) btConvexShape_setLocalScaling;
extern(C) void* function(void* jarg1) btConvexShape_getLocalScaling;
extern(C) void function(void* jarg1, float jarg2) btConvexShape_setMargin;
extern(C) float function(void* jarg1) btConvexShape_getMargin;
extern(C) int function(void* jarg1) btConvexShape_getNumPreferredPenetrationDirections;
extern(C) void function(void* jarg1, int jarg2, void* jarg3) btConvexShape_getPreferredPenetrationDirection;
extern(C) void* function(void* objectRef) btConvexShape_Upcast;
extern(C) void function(void* jarg1) delete_btConvexInternalShape;
extern(C) void* function(void* jarg1, void* jarg2) btConvexInternalShape_localGetSupportingVertex;
extern(C) void* function(void* jarg1) btConvexInternalShape_getImplicitShapeDimensions;
extern(C) void function(void* jarg1, void* jarg2) btConvexInternalShape_setImplicitShapeDimensions;
extern(C) void function(void* jarg1, float jarg2, float jarg3) btConvexInternalShape_setSafeMargin__SWIG_0;
extern(C) void function(void* jarg1, float jarg2) btConvexInternalShape_setSafeMargin__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, float jarg3) btConvexInternalShape_setSafeMargin__SWIG_2;
extern(C) void function(void* jarg1, void* jarg2) btConvexInternalShape_setSafeMargin__SWIG_3;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btConvexInternalShape_getAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btConvexInternalShape_getAabbSlow;
extern(C) void function(void* jarg1, void* jarg2) btConvexInternalShape_setLocalScaling;
extern(C) void* function(void* jarg1) btConvexInternalShape_getLocalScaling;
extern(C) void* function(void* jarg1) btConvexInternalShape_getLocalScalingNV;
extern(C) void function(void* jarg1, float jarg2) btConvexInternalShape_setMargin;
extern(C) float function(void* jarg1) btConvexInternalShape_getMargin;
extern(C) float function(void* jarg1) btConvexInternalShape_getMarginNV;
extern(C) int function(void* jarg1) btConvexInternalShape_getNumPreferredPenetrationDirections;
extern(C) void function(void* jarg1, int jarg2, void* jarg3) btConvexInternalShape_getPreferredPenetrationDirection;
extern(C) int function(void* jarg1) btConvexInternalShape_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btConvexInternalShape_serialize;
extern(C) void* function(void* objectRef) btConvexInternalShape_Upcast;
extern(C) void function(void* jarg1, void* jarg2) btConvexInternalShapeData_m_collisionShapeData_set;
extern(C) void* function(void* jarg1) btConvexInternalShapeData_m_collisionShapeData_get;
extern(C) void function(void* jarg1, void* jarg2) btConvexInternalShapeData_m_localScaling_set;
extern(C) void* function(void* jarg1) btConvexInternalShapeData_m_localScaling_get;
extern(C) void function(void* jarg1, void* jarg2) btConvexInternalShapeData_m_implicitShapeDimensions_set;
extern(C) void* function(void* jarg1) btConvexInternalShapeData_m_implicitShapeDimensions_get;
extern(C) void function(void* jarg1, float jarg2) btConvexInternalShapeData_m_collisionMargin_set;
extern(C) float function(void* jarg1) btConvexInternalShapeData_m_collisionMargin_get;
extern(C) void function(void* jarg1, int jarg2) btConvexInternalShapeData_m_padding_set;
extern(C) int function(void* jarg1) btConvexInternalShapeData_m_padding_get;
extern(C) void* function() new_btConvexInternalShapeData;
extern(C) void function(void* jarg1) delete_btConvexInternalShapeData;
extern(C) void function(void* jarg1, void* jarg2) btConvexInternalAabbCachingShape_setLocalScaling;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btConvexInternalAabbCachingShape_getAabb;
extern(C) void function(void* jarg1) btConvexInternalAabbCachingShape_recalcLocalAabb;
extern(C) void function(void* jarg1) delete_btConvexInternalAabbCachingShape;
extern(C) void* function(void* objectRef) btConvexInternalAabbCachingShape_Upcast;
extern(C) void function(void* jarg1) delete_btPolyhedralConvexShape;
extern(C) uint function(void* jarg1) btPolyhedralConvexShape_initializePolyhedralFeatures;
extern(C) void* function(void* jarg1) btPolyhedralConvexShape_getConvexPolyhedron;
extern(C) void* function(void* jarg1, void* jarg2) btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btPolyhedralConvexShape_calculateLocalInertia;
extern(C) int function(void* jarg1) btPolyhedralConvexShape_getNumVertices;
extern(C) int function(void* jarg1) btPolyhedralConvexShape_getNumEdges;
extern(C) void function(void* jarg1, int jarg2, void* jarg3, void* jarg4) btPolyhedralConvexShape_getEdge;
extern(C) void function(void* jarg1, int jarg2, void* jarg3) btPolyhedralConvexShape_getVertex;
extern(C) int function(void* jarg1) btPolyhedralConvexShape_getNumPlanes;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btPolyhedralConvexShape_getPlane;
extern(C) uint function(void* jarg1, void* jarg2, float jarg3) btPolyhedralConvexShape_isInside;
extern(C) void* function(void* objectRef) btPolyhedralConvexShape_Upcast;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, float jarg5) btPolyhedralConvexAabbCachingShape_getNonvirtualAabb;
extern(C) void function(void* jarg1, void* jarg2) btPolyhedralConvexAabbCachingShape_setLocalScaling;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btPolyhedralConvexAabbCachingShape_getAabb;
extern(C) void function(void* jarg1) btPolyhedralConvexAabbCachingShape_recalcLocalAabb;
extern(C) void function(void* jarg1) delete_btPolyhedralConvexAabbCachingShape;
extern(C) void* function(void* objectRef) btPolyhedralConvexAabbCachingShape_Upcast;
extern(C) void* function(void* jarg1) btBoxShape_getHalfExtentsWithMargin;
extern(C) void* function(void* jarg1) btBoxShape_getHalfExtentsWithoutMargin;
extern(C) void* function(void* jarg1, void* jarg2) btBoxShape_localGetSupportingVertex;
extern(C) void* function(void* jarg1, void* jarg2) btBoxShape_localGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin;
extern(C) void* function(void* jarg1) new_btBoxShape;
extern(C) void function(void* jarg1, float jarg2) btBoxShape_setMargin;
extern(C) void function(void* jarg1, void* jarg2) btBoxShape_setLocalScaling;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btBoxShape_getAabb;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btBoxShape_calculateLocalInertia;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btBoxShape_getPlane;
extern(C) int function(void* jarg1) btBoxShape_getNumPlanes;
extern(C) int function(void* jarg1) btBoxShape_getNumVertices;
extern(C) int function(void* jarg1) btBoxShape_getNumEdges;
extern(C) void function(void* jarg1, int jarg2, void* jarg3) btBoxShape_getVertex;
extern(C) void function(void* jarg1, void* jarg2, int jarg3) btBoxShape_getPlaneEquation;
extern(C) void function(void* jarg1, int jarg2, void* jarg3, void* jarg4) btBoxShape_getEdge;
extern(C) uint function(void* jarg1, void* jarg2, float jarg3) btBoxShape_isInside;
extern(C) const(char)* function(void* jarg1) btBoxShape_getName;
extern(C) int function(void* jarg1) btBoxShape_getNumPreferredPenetrationDirections;
extern(C) void function(void* jarg1, int jarg2, void* jarg3) btBoxShape_getPreferredPenetrationDirection;
extern(C) void function(void* jarg1) delete_btBoxShape;
extern(C) void* function(void* objectRef) btBoxShape_Upcast;
extern(C) void* function(float jarg1) new_btSphereShape;
extern(C) void* function(void* jarg1, void* jarg2) btSphereShape_localGetSupportingVertex;
extern(C) void* function(void* jarg1, void* jarg2) btSphereShape_localGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btSphereShape_calculateLocalInertia;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btSphereShape_getAabb;
extern(C) float function(void* jarg1) btSphereShape_getRadius;
extern(C) void function(void* jarg1, float jarg2) btSphereShape_setUnscaledRadius;
extern(C) const(char)* function(void* jarg1) btSphereShape_getName;
extern(C) void function(void* jarg1, float jarg2) btSphereShape_setMargin;
extern(C) float function(void* jarg1) btSphereShape_getMargin;
extern(C) void function(void* jarg1) delete_btSphereShape;
extern(C) void* function(void* objectRef) btSphereShape_Upcast;
extern(C) void* function(float jarg1, float jarg2) new_btCapsuleShape__SWIG_1;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btCapsuleShape_calculateLocalInertia;
extern(C) void* function(void* jarg1, void* jarg2) btCapsuleShape_localGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, float jarg2) btCapsuleShape_setMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btCapsuleShape_getAabb;
extern(C) const(char)* function(void* jarg1) btCapsuleShape_getName;
extern(C) int function(void* jarg1) btCapsuleShape_getUpAxis;
extern(C) float function(void* jarg1) btCapsuleShape_getRadius;
extern(C) float function(void* jarg1) btCapsuleShape_getHalfHeight;
extern(C) void function(void* jarg1, void* jarg2) btCapsuleShape_setLocalScaling;
extern(C) int function(void* jarg1) btCapsuleShape_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btCapsuleShape_serialize;
extern(C) void function(void* jarg1) delete_btCapsuleShape;
extern(C) void* function(void* objectRef) btCapsuleShape_Upcast;
extern(C) void* function(float jarg1, float jarg2) new_btCapsuleShapeX;
extern(C) const(char)* function(void* jarg1) btCapsuleShapeX_getName;
extern(C) void function(void* jarg1) delete_btCapsuleShapeX;
extern(C) void* function(void* objectRef) btCapsuleShapeX_Upcast;
extern(C) void* function(float jarg1, float jarg2) new_btCapsuleShapeZ;
extern(C) const(char)* function(void* jarg1) btCapsuleShapeZ_getName;
extern(C) void function(void* jarg1) delete_btCapsuleShapeZ;
extern(C) void* function(void* objectRef) btCapsuleShapeZ_Upcast;
extern(C) void function(void* jarg1, void* jarg2) btCapsuleShapeData_m_convexInternalShapeData_set;
extern(C) void* function(void* jarg1) btCapsuleShapeData_m_convexInternalShapeData_get;
extern(C) void function(void* jarg1, int jarg2) btCapsuleShapeData_m_upAxis_set;
extern(C) int function(void* jarg1) btCapsuleShapeData_m_upAxis_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btCapsuleShapeData_m_padding_set;
extern(C) const(char)* function(void* jarg1) btCapsuleShapeData_m_padding_get;
extern(C) void* function() new_btCapsuleShapeData;
extern(C) void function(void* jarg1) delete_btCapsuleShapeData;
extern(C) void* function(void* jarg1) btCylinderShape_getHalfExtentsWithMargin;
extern(C) void* function(void* jarg1) btCylinderShape_getHalfExtentsWithoutMargin;
extern(C) void* function(void* jarg1) new_btCylinderShape;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btCylinderShape_getAabb;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btCylinderShape_calculateLocalInertia;
extern(C) void* function(void* jarg1, void* jarg2) btCylinderShape_localGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, float jarg2) btCylinderShape_setMargin;
extern(C) void* function(void* jarg1, void* jarg2) btCylinderShape_localGetSupportingVertex;
extern(C) int function(void* jarg1) btCylinderShape_getUpAxis;
extern(C) float function(void* jarg1) btCylinderShape_getRadius;
extern(C) void function(void* jarg1, void* jarg2) btCylinderShape_setLocalScaling;
extern(C) const(char)* function(void* jarg1) btCylinderShape_getName;
extern(C) int function(void* jarg1) btCylinderShape_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btCylinderShape_serialize;
extern(C) void function(void* jarg1) delete_btCylinderShape;
extern(C) void* function(void* objectRef) btCylinderShape_Upcast;
extern(C) void* function(void* jarg1) new_btCylinderShapeX;
extern(C) void* function(void* jarg1, void* jarg2) btCylinderShapeX_localGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin;
extern(C) const(char)* function(void* jarg1) btCylinderShapeX_getName;
extern(C) float function(void* jarg1) btCylinderShapeX_getRadius;
extern(C) void function(void* jarg1) delete_btCylinderShapeX;
extern(C) void* function(void* objectRef) btCylinderShapeX_Upcast;
extern(C) void* function(void* jarg1) new_btCylinderShapeZ;
extern(C) void* function(void* jarg1, void* jarg2) btCylinderShapeZ_localGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin;
extern(C) const(char)* function(void* jarg1) btCylinderShapeZ_getName;
extern(C) float function(void* jarg1) btCylinderShapeZ_getRadius;
extern(C) void function(void* jarg1) delete_btCylinderShapeZ;
extern(C) void* function(void* objectRef) btCylinderShapeZ_Upcast;
extern(C) void function(void* jarg1, void* jarg2) btCylinderShapeData_m_convexInternalShapeData_set;
extern(C) void* function(void* jarg1) btCylinderShapeData_m_convexInternalShapeData_get;
extern(C) void function(void* jarg1, int jarg2) btCylinderShapeData_m_upAxis_set;
extern(C) int function(void* jarg1) btCylinderShapeData_m_upAxis_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btCylinderShapeData_m_padding_set;
extern(C) const(char)* function(void* jarg1) btCylinderShapeData_m_padding_get;
extern(C) void* function() new_btCylinderShapeData;
extern(C) void function(void* jarg1) delete_btCylinderShapeData;
extern(C) void* function(float jarg1, float jarg2) new_btConeShape;
extern(C) void* function(void* jarg1, void* jarg2) btConeShape_localGetSupportingVertex;
extern(C) void* function(void* jarg1, void* jarg2) btConeShape_localGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin;
extern(C) float function(void* jarg1) btConeShape_getRadius;
extern(C) float function(void* jarg1) btConeShape_getHeight;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btConeShape_calculateLocalInertia;
extern(C) const(char)* function(void* jarg1) btConeShape_getName;
extern(C) void function(void* jarg1, int jarg2) btConeShape_setConeUpIndex;
extern(C) int function(void* jarg1) btConeShape_getConeUpIndex;
extern(C) void function(void* jarg1, void* jarg2) btConeShape_setLocalScaling;
extern(C) void function(void* jarg1) delete_btConeShape;
extern(C) void* function(void* objectRef) btConeShape_Upcast;
extern(C) void* function(float jarg1, float jarg2) new_btConeShapeX;
extern(C) void function(void* jarg1) delete_btConeShapeX;
extern(C) void* function(void* objectRef) btConeShapeX_Upcast;
extern(C) void* function(float jarg1, float jarg2) new_btConeShapeZ;
extern(C) void function(void* jarg1) delete_btConeShapeZ;
extern(C) void* function(void* objectRef) btConeShapeZ_Upcast;
extern(C) void* function(void* jarg1, float jarg2) new_btStaticPlaneShape;
extern(C) void function(void* jarg1) delete_btStaticPlaneShape;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btStaticPlaneShape_getAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btStaticPlaneShape_processAllTriangles;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btStaticPlaneShape_calculateLocalInertia;
extern(C) void function(void* jarg1, void* jarg2) btStaticPlaneShape_setLocalScaling;
extern(C) void* function(void* jarg1) btStaticPlaneShape_getLocalScaling;
extern(C) void* function(void* jarg1) btStaticPlaneShape_getPlaneNormal;
extern(C) float function(void* jarg1) btStaticPlaneShape_getPlaneConstant;
extern(C) const(char)* function(void* jarg1) btStaticPlaneShape_getName;
extern(C) int function(void* jarg1) btStaticPlaneShape_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btStaticPlaneShape_serialize;
extern(C) void function(void* jarg1, void* jarg2) btStaticPlaneShapeData_m_collisionShapeData_set;
extern(C) void* function(void* jarg1) btStaticPlaneShapeData_m_collisionShapeData_get;
extern(C) void function(void* jarg1, void* jarg2) btStaticPlaneShapeData_m_localScaling_set;
extern(C) void* function(void* jarg1) btStaticPlaneShapeData_m_localScaling_get;
extern(C) void function(void* jarg1, void* jarg2) btStaticPlaneShapeData_m_planeNormal_set;
extern(C) void* function(void* jarg1) btStaticPlaneShapeData_m_planeNormal_get;
extern(C) void function(void* jarg1, float jarg2) btStaticPlaneShapeData_m_planeConstant_set;
extern(C) float function(void* jarg1) btStaticPlaneShapeData_m_planeConstant_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btStaticPlaneShapeData_m_pad_set;
extern(C) const(char)* function(void* jarg1) btStaticPlaneShapeData_m_pad_get;
extern(C) void* function() new_btStaticPlaneShapeData;
extern(C) void function(void* jarg1) delete_btStaticPlaneShapeData;
extern(C) void* function(void* jarg1, int jarg2, int jarg3) new_btConvexHullShape__SWIG_0;
extern(C) void* function(void* jarg1, int jarg2) new_btConvexHullShape__SWIG_1;
extern(C) void* function(void* jarg1) new_btConvexHullShape__SWIG_2;
extern(C) void* function() new_btConvexHullShape__SWIG_3;
extern(C) void function(void* jarg1, void* jarg2) btConvexHullShape_addPoint;
extern(C) void* function(void* jarg1) btConvexHullShape_getUnscaledPoints__SWIG_0;
extern(C) void* function(void* jarg1) btConvexHullShape_getPoints;
extern(C) void* function(void* jarg1, int jarg2) btConvexHullShape_getScaledPoint;
extern(C) int function(void* jarg1) btConvexHullShape_getNumPoints;
extern(C) void* function(void* jarg1, void* jarg2) btConvexHullShape_localGetSupportingVertex;
extern(C) void* function(void* jarg1, void* jarg2) btConvexHullShape_localGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btConvexHullShape_project;
extern(C) const(char)* function(void* jarg1) btConvexHullShape_getName;
extern(C) int function(void* jarg1) btConvexHullShape_getNumVertices;
extern(C) int function(void* jarg1) btConvexHullShape_getNumEdges;
extern(C) void function(void* jarg1, int jarg2, void* jarg3, void* jarg4) btConvexHullShape_getEdge;
extern(C) void function(void* jarg1, int jarg2, void* jarg3) btConvexHullShape_getVertex;
extern(C) int function(void* jarg1) btConvexHullShape_getNumPlanes;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btConvexHullShape_getPlane;
extern(C) uint function(void* jarg1, void* jarg2, float jarg3) btConvexHullShape_isInside;
extern(C) void function(void* jarg1, void* jarg2) btConvexHullShape_setLocalScaling;
extern(C) int function(void* jarg1) btConvexHullShape_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btConvexHullShape_serialize;
extern(C) void function(void* jarg1) delete_btConvexHullShape;
extern(C) void* function(void* objectRef) btConvexHullShape_Upcast;
extern(C) void function(void* jarg1, void* jarg2) btConvexHullShapeData_m_convexInternalShapeData_set;
extern(C) void* function(void* jarg1) btConvexHullShapeData_m_convexInternalShapeData_get;
extern(C) void function(void* jarg1, void* jarg2) btConvexHullShapeData_m_unscaledPointsFloatPtr_set;
extern(C) void* function(void* jarg1) btConvexHullShapeData_m_unscaledPointsFloatPtr_get;
extern(C) void function(void* jarg1, void* jarg2) btConvexHullShapeData_m_unscaledPointsDoublePtr_set;
extern(C) void* function(void* jarg1) btConvexHullShapeData_m_unscaledPointsDoublePtr_get;
extern(C) void function(void* jarg1, int jarg2) btConvexHullShapeData_m_numUnscaledPoints_set;
extern(C) int function(void* jarg1) btConvexHullShapeData_m_numUnscaledPoints_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btConvexHullShapeData_m_padding3_set;
extern(C) const(char)* function(void* jarg1) btConvexHullShapeData_m_padding3_get;
extern(C) void* function() new_btConvexHullShapeData;
extern(C) void function(void* jarg1) delete_btConvexHullShapeData;
extern(C) void function(void* jarg1, float jarg2) btTriangleMesh_m_weldingThreshold_set;
extern(C) float function(void* jarg1) btTriangleMesh_m_weldingThreshold_get;
extern(C) void* function(uint jarg1, uint jarg2) new_btTriangleMesh__SWIG_0;
extern(C) void* function(uint jarg1) new_btTriangleMesh__SWIG_1;
extern(C) void* function() new_btTriangleMesh__SWIG_2;
extern(C) uint function(void* jarg1) btTriangleMesh_getUse32bitIndices;
extern(C) uint function(void* jarg1) btTriangleMesh_getUse4componentVertices;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, uint jarg5) btTriangleMesh_addTriangle__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btTriangleMesh_addTriangle__SWIG_1;
extern(C) int function(void* jarg1) btTriangleMesh_getNumTriangles;
extern(C) void function(void* jarg1, int jarg2) btTriangleMesh_preallocateVertices;
extern(C) void function(void* jarg1, int jarg2) btTriangleMesh_preallocateIndices;
extern(C) int function(void* jarg1, void* jarg2, uint jarg3) btTriangleMesh_findOrAddVertex;
extern(C) void function(void* jarg1, int jarg2) btTriangleMesh_addIndex;
extern(C) void function(void* jarg1) delete_btTriangleMesh;
extern(C) void* function(void* jarg1, uint jarg2) new_btConvexTriangleMeshShape__SWIG_0;
extern(C) void* function(void* jarg1) new_btConvexTriangleMeshShape__SWIG_1;
extern(C) void* function(void* jarg1) btConvexTriangleMeshShape_getMeshInterface__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) btConvexTriangleMeshShape_localGetSupportingVertex;
extern(C) void* function(void* jarg1, void* jarg2) btConvexTriangleMeshShape_localGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btConvexTriangleMeshShape_batchedUnitVectorGetSupportingVertexWithoutMargin;
extern(C) const(char)* function(void* jarg1) btConvexTriangleMeshShape_getName;
extern(C) int function(void* jarg1) btConvexTriangleMeshShape_getNumVertices;
extern(C) int function(void* jarg1) btConvexTriangleMeshShape_getNumEdges;
extern(C) void function(void* jarg1, int jarg2, void* jarg3, void* jarg4) btConvexTriangleMeshShape_getEdge;
extern(C) void function(void* jarg1, int jarg2, void* jarg3) btConvexTriangleMeshShape_getVertex;
extern(C) int function(void* jarg1) btConvexTriangleMeshShape_getNumPlanes;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btConvexTriangleMeshShape_getPlane;
extern(C) uint function(void* jarg1, void* jarg2, float jarg3) btConvexTriangleMeshShape_isInside;
extern(C) void function(void* jarg1, void* jarg2) btConvexTriangleMeshShape_setLocalScaling;
extern(C) void* function(void* jarg1) btConvexTriangleMeshShape_getLocalScaling;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btConvexTriangleMeshShape_calculatePrincipalAxisTransform;
extern(C) void function(void* jarg1) delete_btConvexTriangleMeshShape;
extern(C) void* function(void* objectRef) btConvexTriangleMeshShape_Upcast;
extern(C) void* function(void* jarg1, uint jarg2, uint jarg3) new_btBvhTriangleMeshShape__SWIG_0;
extern(C) void* function(void* jarg1, uint jarg2) new_btBvhTriangleMeshShape__SWIG_1;
extern(C) void* function(void* jarg1, uint jarg2, void* jarg3, void* jarg4, uint jarg5) new_btBvhTriangleMeshShape__SWIG_2;
extern(C) void* function(void* jarg1, uint jarg2, void* jarg3, void* jarg4) new_btBvhTriangleMeshShape__SWIG_3;
extern(C) void function(void* jarg1) delete_btBvhTriangleMeshShape;
extern(C) uint function(void* jarg1) btBvhTriangleMeshShape_getOwnsBvh;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btBvhTriangleMeshShape_performRaycast;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6) btBvhTriangleMeshShape_performConvexcast;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btBvhTriangleMeshShape_processAllTriangles;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btBvhTriangleMeshShape_refitTree;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btBvhTriangleMeshShape_partialRefitTree;
extern(C) const(char)* function(void* jarg1) btBvhTriangleMeshShape_getName;
extern(C) void function(void* jarg1, void* jarg2) btBvhTriangleMeshShape_setLocalScaling;
extern(C) void* function(void* jarg1) btBvhTriangleMeshShape_getOptimizedBvh;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btBvhTriangleMeshShape_setOptimizedBvh__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) btBvhTriangleMeshShape_setOptimizedBvh__SWIG_1;
extern(C) void function(void* jarg1) btBvhTriangleMeshShape_buildOptimizedBvh;
extern(C) uint function(void* jarg1) btBvhTriangleMeshShape_usesQuantizedAabbCompression;
extern(C) void function(void* jarg1, void* jarg2) btBvhTriangleMeshShape_setTriangleInfoMap;
extern(C) void* function(void* jarg1) btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_0;
extern(C) int function(void* jarg1) btBvhTriangleMeshShape_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btBvhTriangleMeshShape_serialize;
extern(C) void function(void* jarg1, void* jarg2) btBvhTriangleMeshShape_serializeSingleBvh;
extern(C) void function(void* jarg1, void* jarg2) btBvhTriangleMeshShape_serializeSingleTriangleInfoMap;
extern(C) void function(void* jarg1, void* jarg2) btTriangleMeshShapeData_m_collisionShapeData_set;
extern(C) void* function(void* jarg1) btTriangleMeshShapeData_m_collisionShapeData_get;
extern(C) void function(void* jarg1, void* jarg2) btTriangleMeshShapeData_m_meshInterface_set;
extern(C) void* function(void* jarg1) btTriangleMeshShapeData_m_meshInterface_get;
extern(C) void function(void* jarg1, void* jarg2) btTriangleMeshShapeData_m_quantizedFloatBvh_set;
extern(C) void* function(void* jarg1) btTriangleMeshShapeData_m_quantizedFloatBvh_get;
extern(C) void function(void* jarg1, void* jarg2) btTriangleMeshShapeData_m_quantizedDoubleBvh_set;
extern(C) void* function(void* jarg1) btTriangleMeshShapeData_m_quantizedDoubleBvh_get;
extern(C) void function(void* jarg1, void* jarg2) btTriangleMeshShapeData_m_triangleInfoMap_set;
extern(C) void* function(void* jarg1) btTriangleMeshShapeData_m_triangleInfoMap_get;
extern(C) void function(void* jarg1, float jarg2) btTriangleMeshShapeData_m_collisionMargin_set;
extern(C) float function(void* jarg1) btTriangleMeshShapeData_m_collisionMargin_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btTriangleMeshShapeData_m_pad3_set;
extern(C) const(char)* function(void* jarg1) btTriangleMeshShapeData_m_pad3_get;
extern(C) void* function() new_btTriangleMeshShapeData;
extern(C) void function(void* jarg1) delete_btTriangleMeshShapeData;
extern(C) void* function(void* jarg1, void* jarg2) new_btScaledBvhTriangleMeshShape;
extern(C) void function(void* jarg1) delete_btScaledBvhTriangleMeshShape;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btScaledBvhTriangleMeshShape_getAabb;
extern(C) void function(void* jarg1, void* jarg2) btScaledBvhTriangleMeshShape_setLocalScaling;
extern(C) void* function(void* jarg1) btScaledBvhTriangleMeshShape_getLocalScaling;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btScaledBvhTriangleMeshShape_calculateLocalInertia;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btScaledBvhTriangleMeshShape_processAllTriangles;
extern(C) void* function(void* jarg1) btScaledBvhTriangleMeshShape_getChildShape__SWIG_0;
extern(C) const(char)* function(void* jarg1) btScaledBvhTriangleMeshShape_getName;
extern(C) int function(void* jarg1) btScaledBvhTriangleMeshShape_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btScaledBvhTriangleMeshShape_serialize;
extern(C) void function(void* jarg1, void* jarg2) btScaledTriangleMeshShapeData_m_trimeshShapeData_set;
extern(C) void* function(void* jarg1) btScaledTriangleMeshShapeData_m_trimeshShapeData_get;
extern(C) void function(void* jarg1, void* jarg2) btScaledTriangleMeshShapeData_m_localScaling_set;
extern(C) void* function(void* jarg1) btScaledTriangleMeshShapeData_m_localScaling_get;
extern(C) void* function() new_btScaledTriangleMeshShapeData;
extern(C) void function(void* jarg1) delete_btScaledTriangleMeshShapeData;
extern(C) void function(void* jarg1) delete_btTriangleMeshShape;
extern(C) void* function(void* jarg1, void* jarg2) btTriangleMeshShape_localGetSupportingVertex;
extern(C) void* function(void* jarg1, void* jarg2) btTriangleMeshShape_localGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1) btTriangleMeshShape_recalcLocalAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btTriangleMeshShape_getAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btTriangleMeshShape_processAllTriangles;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btTriangleMeshShape_calculateLocalInertia;
extern(C) void function(void* jarg1, void* jarg2) btTriangleMeshShape_setLocalScaling;
extern(C) void* function(void* jarg1) btTriangleMeshShape_getLocalScaling;
extern(C) void* function(void* jarg1) btTriangleMeshShape_getMeshInterface__SWIG_0;
extern(C) void* function(void* jarg1) btTriangleMeshShape_getLocalAabbMin;
extern(C) void* function(void* jarg1) btTriangleMeshShape_getLocalAabbMax;
extern(C) const(char)* function(void* jarg1) btTriangleMeshShape_getName;
extern(C) void function(void* jarg1, int jarg2) btIndexedMesh_m_numTriangles_set;
extern(C) int function(void* jarg1) btIndexedMesh_m_numTriangles_get;
extern(C) void function(void* jarg1, void* jarg2) btIndexedMesh_m_triangleIndexBase_set;
extern(C) void* function(void* jarg1) btIndexedMesh_m_triangleIndexBase_get;
extern(C) void function(void* jarg1, int jarg2) btIndexedMesh_m_triangleIndexStride_set;
extern(C) int function(void* jarg1) btIndexedMesh_m_triangleIndexStride_get;
extern(C) void function(void* jarg1, int jarg2) btIndexedMesh_m_numVertices_set;
extern(C) int function(void* jarg1) btIndexedMesh_m_numVertices_get;
extern(C) void function(void* jarg1, void* jarg2) btIndexedMesh_m_vertexBase_set;
extern(C) void* function(void* jarg1) btIndexedMesh_m_vertexBase_get;
extern(C) void function(void* jarg1, int jarg2) btIndexedMesh_m_vertexStride_set;
extern(C) int function(void* jarg1) btIndexedMesh_m_vertexStride_get;
extern(C) void function(void* jarg1, void* jarg2) btIndexedMesh_m_indexType_set;
extern(C) void* function(void* jarg1) btIndexedMesh_m_indexType_get;
extern(C) void function(void* jarg1, void* jarg2) btIndexedMesh_m_vertexType_set;
extern(C) void* function(void* jarg1) btIndexedMesh_m_vertexType_get;
extern(C) void* function() new_btIndexedMesh;
extern(C) void function(void* jarg1) delete_btIndexedMesh;
extern(C) void* function() new_btTriangleIndexVertexArray__SWIG_0;
extern(C) void function(void* jarg1) delete_btTriangleIndexVertexArray;
extern(C) void* function(int jarg1, void* jarg2, int jarg3, int jarg4, void* jarg5, int jarg6) new_btTriangleIndexVertexArray__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btTriangleIndexVertexArray_addIndexedMesh__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) btTriangleIndexVertexArray_addIndexedMesh__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6, void* jarg7, void* jarg8, void* jarg9, int jarg10) btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6, void* jarg7, void* jarg8, void* jarg9) btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6, void* jarg7, void* jarg8, void* jarg9, int jarg10) btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6, void* jarg7, void* jarg8, void* jarg9) btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_1;
extern(C) void function(void* jarg1, int jarg2) btTriangleIndexVertexArray_unLockVertexBase;
extern(C) void function(void* jarg1, int jarg2) btTriangleIndexVertexArray_unLockReadOnlyVertexBase;
extern(C) int function(void* jarg1) btTriangleIndexVertexArray_getNumSubParts;
extern(C) void* function(void* jarg1) btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_0;
extern(C) void function(void* jarg1, int jarg2) btTriangleIndexVertexArray_preallocateVertices;
extern(C) void function(void* jarg1, int jarg2) btTriangleIndexVertexArray_preallocateIndices;
extern(C) uint function(void* jarg1) btTriangleIndexVertexArray_hasPremadeAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btTriangleIndexVertexArray_setPremadeAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btTriangleIndexVertexArray_getPremadeAabb;
extern(C) void function(void* jarg1, void* jarg2) btCompoundShapeChild_m_transform_set;
extern(C) void* function(void* jarg1) btCompoundShapeChild_m_transform_get;
extern(C) void function(void* jarg1, void* jarg2) btCompoundShapeChild_m_childShape_set;
extern(C) void* function(void* jarg1) btCompoundShapeChild_m_childShape_get;
extern(C) void function(void* jarg1, int jarg2) btCompoundShapeChild_m_childShapeType_set;
extern(C) int function(void* jarg1) btCompoundShapeChild_m_childShapeType_get;
extern(C) void function(void* jarg1, float jarg2) btCompoundShapeChild_m_childMargin_set;
extern(C) float function(void* jarg1) btCompoundShapeChild_m_childMargin_get;
extern(C) void function(void* jarg1, void* jarg2) btCompoundShapeChild_m_node_set;
extern(C) void* function(void* jarg1) btCompoundShapeChild_m_node_get;
extern(C) void* function() new_btCompoundShapeChild;
extern(C) void function(void* jarg1) delete_btCompoundShapeChild;
extern(C) void* function(uint jarg1) new_btCompoundShape__SWIG_0;
extern(C) void* function() new_btCompoundShape__SWIG_1;
extern(C) void function(void* jarg1) delete_btCompoundShape;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btCompoundShape_addChildShape;
extern(C) void function(void* jarg1, void* jarg2) btCompoundShape_removeChildShape;
extern(C) void function(void* jarg1, int jarg2) btCompoundShape_removeChildShapeByIndex;
extern(C) int function(void* jarg1) btCompoundShape_getNumChildShapes;
extern(C) void* function(void* jarg1, int jarg2) btCompoundShape_getChildShape__SWIG_0;
extern(C) void* function(void* jarg1, int jarg2) btCompoundShape_getChildTransform__SWIG_0;
extern(C) void function(void* jarg1, int jarg2, void* jarg3, uint jarg4) btCompoundShape_updateChildTransform__SWIG_0;
extern(C) void function(void* jarg1, int jarg2, void* jarg3) btCompoundShape_updateChildTransform__SWIG_1;
extern(C) void* function(void* jarg1) btCompoundShape_getChildList;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btCompoundShape_getAabb;
extern(C) void function(void* jarg1) btCompoundShape_recalculateLocalAabb;
extern(C) void function(void* jarg1, void* jarg2) btCompoundShape_setLocalScaling;
extern(C) void* function(void* jarg1) btCompoundShape_getLocalScaling;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btCompoundShape_calculateLocalInertia;
extern(C) void function(void* jarg1, float jarg2) btCompoundShape_setMargin;
extern(C) float function(void* jarg1) btCompoundShape_getMargin;
extern(C) const(char)* function(void* jarg1) btCompoundShape_getName;
extern(C) void* function(void* jarg1) btCompoundShape_getDynamicAabbTree__SWIG_0;
extern(C) void function(void* jarg1) btCompoundShape_createAabbTreeFromChildren;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btCompoundShape_calculatePrincipalAxisTransform;
extern(C) int function(void* jarg1) btCompoundShape_getUpdateRevision;
extern(C) int function(void* jarg1) btCompoundShape_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btCompoundShape_serialize;
extern(C) void* function(void* objectRef) btCompoundShape_Upcast;
extern(C) void function(void* jarg1, void* jarg2) btCompoundShapeChildData_m_transform_set;
extern(C) void* function(void* jarg1) btCompoundShapeChildData_m_transform_get;
extern(C) void function(void* jarg1, void* jarg2) btCompoundShapeChildData_m_childShape_set;
extern(C) void* function(void* jarg1) btCompoundShapeChildData_m_childShape_get;
extern(C) void function(void* jarg1, int jarg2) btCompoundShapeChildData_m_childShapeType_set;
extern(C) int function(void* jarg1) btCompoundShapeChildData_m_childShapeType_get;
extern(C) void function(void* jarg1, float jarg2) btCompoundShapeChildData_m_childMargin_set;
extern(C) float function(void* jarg1) btCompoundShapeChildData_m_childMargin_get;
extern(C) void* function() new_btCompoundShapeChildData;
extern(C) void function(void* jarg1) delete_btCompoundShapeChildData;
extern(C) void function(void* jarg1, void* jarg2) btCompoundShapeData_m_collisionShapeData_set;
extern(C) void* function(void* jarg1) btCompoundShapeData_m_collisionShapeData_get;
extern(C) void function(void* jarg1, void* jarg2) btCompoundShapeData_m_childShapePtr_set;
extern(C) void* function(void* jarg1) btCompoundShapeData_m_childShapePtr_get;
extern(C) void function(void* jarg1, int jarg2) btCompoundShapeData_m_numChildShapes_set;
extern(C) int function(void* jarg1) btCompoundShapeData_m_numChildShapes_get;
extern(C) void function(void* jarg1, float jarg2) btCompoundShapeData_m_collisionMargin_set;
extern(C) float function(void* jarg1) btCompoundShapeData_m_collisionMargin_get;
extern(C) void* function() new_btCompoundShapeData;
extern(C) void function(void* jarg1) delete_btCompoundShapeData;
extern(C) void* function() new_btBU_Simplex1to4__SWIG_0;
extern(C) void* function(void* jarg1) new_btBU_Simplex1to4__SWIG_1;
extern(C) void* function(void* jarg1, void* jarg2) new_btBU_Simplex1to4__SWIG_2;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3) new_btBU_Simplex1to4__SWIG_3;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) new_btBU_Simplex1to4__SWIG_4;
extern(C) void function(void* jarg1) btBU_Simplex1to4_reset;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btBU_Simplex1to4_getAabb;
extern(C) void function(void* jarg1, void* jarg2) btBU_Simplex1to4_addVertex;
extern(C) int function(void* jarg1) btBU_Simplex1to4_getNumVertices;
extern(C) int function(void* jarg1) btBU_Simplex1to4_getNumEdges;
extern(C) void function(void* jarg1, int jarg2, void* jarg3, void* jarg4) btBU_Simplex1to4_getEdge;
extern(C) void function(void* jarg1, int jarg2, void* jarg3) btBU_Simplex1to4_getVertex;
extern(C) int function(void* jarg1) btBU_Simplex1to4_getNumPlanes;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btBU_Simplex1to4_getPlane;
extern(C) int function(void* jarg1, int jarg2) btBU_Simplex1to4_getIndex;
extern(C) uint function(void* jarg1, void* jarg2, float jarg3) btBU_Simplex1to4_isInside;
extern(C) const(char)* function(void* jarg1) btBU_Simplex1to4_getName;
extern(C) void function(void* jarg1) delete_btBU_Simplex1to4;
extern(C) void* function(void* objectRef) btBU_Simplex1to4_Upcast;
extern(C) void* function() new_btEmptyShape;
extern(C) void function(void* jarg1) delete_btEmptyShape;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btEmptyShape_getAabb;
extern(C) void function(void* jarg1, void* jarg2) btEmptyShape_setLocalScaling;
extern(C) void* function(void* jarg1) btEmptyShape_getLocalScaling;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btEmptyShape_calculateLocalInertia;
extern(C) const(char)* function(void* jarg1) btEmptyShape_getName;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btEmptyShape_processAllTriangles;
extern(C) void* function(void* jarg1, void* jarg2, int jarg3) new_btMultiSphereShape;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btMultiSphereShape_calculateLocalInertia;
extern(C) void* function(void* jarg1, void* jarg2) btMultiSphereShape_localGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin;
extern(C) int function(void* jarg1) btMultiSphereShape_getSphereCount;
extern(C) void* function(void* jarg1, int jarg2) btMultiSphereShape_getSpherePosition;
extern(C) float function(void* jarg1, int jarg2) btMultiSphereShape_getSphereRadius;
extern(C) const(char)* function(void* jarg1) btMultiSphereShape_getName;
extern(C) int function(void* jarg1) btMultiSphereShape_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btMultiSphereShape_serialize;
extern(C) void function(void* jarg1) delete_btMultiSphereShape;
extern(C) void* function(void* objectRef) btMultiSphereShape_Upcast;
extern(C) void function(void* jarg1, void* jarg2) btPositionAndRadius_m_pos_set;
extern(C) void* function(void* jarg1) btPositionAndRadius_m_pos_get;
extern(C) void function(void* jarg1, float jarg2) btPositionAndRadius_m_radius_set;
extern(C) float function(void* jarg1) btPositionAndRadius_m_radius_get;
extern(C) void* function() new_btPositionAndRadius;
extern(C) void function(void* jarg1) delete_btPositionAndRadius;
extern(C) void function(void* jarg1, void* jarg2) btMultiSphereShapeData_m_convexInternalShapeData_set;
extern(C) void* function(void* jarg1) btMultiSphereShapeData_m_convexInternalShapeData_get;
extern(C) void function(void* jarg1, void* jarg2) btMultiSphereShapeData_m_localPositionArrayPtr_set;
extern(C) void* function(void* jarg1) btMultiSphereShapeData_m_localPositionArrayPtr_get;
extern(C) void function(void* jarg1, int jarg2) btMultiSphereShapeData_m_localPositionArraySize_set;
extern(C) int function(void* jarg1) btMultiSphereShapeData_m_localPositionArraySize_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btMultiSphereShapeData_m_padding_set;
extern(C) const(char)* function(void* jarg1) btMultiSphereShapeData_m_padding_get;
extern(C) void* function() new_btMultiSphereShapeData;
extern(C) void function(void* jarg1) delete_btMultiSphereShapeData;
extern(C) void* function(void* jarg1, float jarg2) new_btUniformScalingShape;
extern(C) void function(void* jarg1) delete_btUniformScalingShape;
extern(C) void* function(void* jarg1, void* jarg2) btUniformScalingShape_localGetSupportingVertexWithoutMargin;
extern(C) void* function(void* jarg1, void* jarg2) btUniformScalingShape_localGetSupportingVertex;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, int jarg4) btUniformScalingShape_batchedUnitVectorGetSupportingVertexWithoutMargin;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btUniformScalingShape_calculateLocalInertia;
extern(C) float function(void* jarg1) btUniformScalingShape_getUniformScalingFactor;
extern(C) void* function(void* jarg1) btUniformScalingShape_getChildShape__SWIG_0;
extern(C) const(char)* function(void* jarg1) btUniformScalingShape_getName;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btUniformScalingShape_getAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btUniformScalingShape_getAabbSlow;
extern(C) void function(void* jarg1, void* jarg2) btUniformScalingShape_setLocalScaling;
extern(C) void* function(void* jarg1) btUniformScalingShape_getLocalScaling;
extern(C) void function(void* jarg1, float jarg2) btUniformScalingShape_setMargin;
extern(C) float function(void* jarg1) btUniformScalingShape_getMargin;
extern(C) int function(void* jarg1) btUniformScalingShape_getNumPreferredPenetrationDirections;
extern(C) void function(void* jarg1, int jarg2, void* jarg3) btUniformScalingShape_getPreferredPenetrationDirection;
extern(C) void* function(void* objectRef) btUniformScalingShape_Upcast;
extern(C) void function(void* jarg1) delete_btCollisionConfiguration;
extern(C) void* function(void* jarg1) btCollisionConfiguration_getPersistentManifoldPool;
extern(C) void* function(void* jarg1) btCollisionConfiguration_getCollisionAlgorithmPool;
extern(C) void* function(void* jarg1) btCollisionConfiguration_getStackAllocator;
extern(C) void* function(void* jarg1, int jarg2, int jarg3) btCollisionConfiguration_getCollisionAlgorithmCreateFunc;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) new_btSphereSphereCollisionAlgorithm__SWIG_0;
extern(C) void* function(void* jarg1) new_btSphereSphereCollisionAlgorithm__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btSphereSphereCollisionAlgorithm_processCollision;
extern(C) float function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btSphereSphereCollisionAlgorithm_calculateTimeOfImpact;
extern(C) void function(void* jarg1, void* jarg2) btSphereSphereCollisionAlgorithm_getAllContactManifolds;
extern(C) void function(void* jarg1) delete_btSphereSphereCollisionAlgorithm;
extern(C) void function(void* jarg1, void* jarg2) btDefaultCollisionConstructionInfo_m_stackAlloc_set;
extern(C) void* function(void* jarg1) btDefaultCollisionConstructionInfo_m_stackAlloc_get;
extern(C) void function(void* jarg1, void* jarg2) btDefaultCollisionConstructionInfo_m_persistentManifoldPool_set;
extern(C) void* function(void* jarg1) btDefaultCollisionConstructionInfo_m_persistentManifoldPool_get;
extern(C) void function(void* jarg1, void* jarg2) btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_set;
extern(C) void* function(void* jarg1) btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_get;
extern(C) void function(void* jarg1, int jarg2) btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_set;
extern(C) int function(void* jarg1) btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_get;
extern(C) void function(void* jarg1, int jarg2) btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_set;
extern(C) int function(void* jarg1) btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_get;
extern(C) void function(void* jarg1, int jarg2) btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_set;
extern(C) int function(void* jarg1) btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_get;
extern(C) void function(void* jarg1, int jarg2) btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_set;
extern(C) int function(void* jarg1) btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_get;
extern(C) void function(void* jarg1, int jarg2) btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_set;
extern(C) int function(void* jarg1) btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_get;
extern(C) void* function() new_btDefaultCollisionConstructionInfo;
extern(C) void function(void* jarg1) delete_btDefaultCollisionConstructionInfo;
extern(C) void* function(void* jarg1) new_btDefaultCollisionConfiguration__SWIG_0;
extern(C) void* function() new_btDefaultCollisionConfiguration__SWIG_1;
extern(C) void function(void* jarg1) delete_btDefaultCollisionConfiguration;
extern(C) void* function(void* jarg1) btDefaultCollisionConfiguration_getPersistentManifoldPool;
extern(C) void* function(void* jarg1) btDefaultCollisionConfiguration_getCollisionAlgorithmPool;
extern(C) void* function(void* jarg1) btDefaultCollisionConfiguration_getStackAllocator;
extern(C) void* function(void* jarg1) btDefaultCollisionConfiguration_getSimplexSolver;
extern(C) void* function(void* jarg1, int jarg2, int jarg3) btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc;
extern(C) void function(void* jarg1, int jarg2, int jarg3) btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_0;
extern(C) void function(void* jarg1, int jarg2) btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_1;
extern(C) void function(void* jarg1) btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_2;
extern(C) void function(void* jarg1, int jarg2, int jarg3) btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_0;
extern(C) void function(void* jarg1, int jarg2) btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_1;
extern(C) void function(void* jarg1) btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_2;
extern(C) void* function(void* objectRef) btDefaultCollisionConfiguration_Upcast;
extern(C) void* function() new_btDispatcherInfo;
extern(C) void function(void* jarg1, float jarg2) btDispatcherInfo_m_timeStep_set;
extern(C) float function(void* jarg1) btDispatcherInfo_m_timeStep_get;
extern(C) void function(void* jarg1, int jarg2) btDispatcherInfo_m_stepCount_set;
extern(C) int function(void* jarg1) btDispatcherInfo_m_stepCount_get;
extern(C) void function(void* jarg1, int jarg2) btDispatcherInfo_m_dispatchFunc_set;
extern(C) int function(void* jarg1) btDispatcherInfo_m_dispatchFunc_get;
extern(C) void function(void* jarg1, float jarg2) btDispatcherInfo_m_timeOfImpact_set;
extern(C) float function(void* jarg1) btDispatcherInfo_m_timeOfImpact_get;
extern(C) void function(void* jarg1, uint jarg2) btDispatcherInfo_m_useContinuous_set;
extern(C) uint function(void* jarg1) btDispatcherInfo_m_useContinuous_get;
extern(C) void function(void* jarg1, void* jarg2) btDispatcherInfo_m_debugDraw_set;
extern(C) void* function(void* jarg1) btDispatcherInfo_m_debugDraw_get;
extern(C) void function(void* jarg1, uint jarg2) btDispatcherInfo_m_enableSatConvex_set;
extern(C) uint function(void* jarg1) btDispatcherInfo_m_enableSatConvex_get;
extern(C) void function(void* jarg1, uint jarg2) btDispatcherInfo_m_enableSPU_set;
extern(C) uint function(void* jarg1) btDispatcherInfo_m_enableSPU_get;
extern(C) void function(void* jarg1, uint jarg2) btDispatcherInfo_m_useEpa_set;
extern(C) uint function(void* jarg1) btDispatcherInfo_m_useEpa_get;
extern(C) void function(void* jarg1, float jarg2) btDispatcherInfo_m_allowedCcdPenetration_set;
extern(C) float function(void* jarg1) btDispatcherInfo_m_allowedCcdPenetration_get;
extern(C) void function(void* jarg1, uint jarg2) btDispatcherInfo_m_useConvexConservativeDistanceUtil_set;
extern(C) uint function(void* jarg1) btDispatcherInfo_m_useConvexConservativeDistanceUtil_get;
extern(C) void function(void* jarg1, float jarg2) btDispatcherInfo_m_convexConservativeDistanceThreshold_set;
extern(C) float function(void* jarg1) btDispatcherInfo_m_convexConservativeDistanceThreshold_get;
extern(C) void function(void* jarg1, void* jarg2) btDispatcherInfo_m_stackAllocator_set;
extern(C) void* function(void* jarg1) btDispatcherInfo_m_stackAllocator_get;
extern(C) void function(void* jarg1) delete_btDispatcherInfo;
extern(C) void function(void* jarg1) delete_btDispatcher;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btDispatcher_findAlgorithm__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3) btDispatcher_findAlgorithm__SWIG_1;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3) btDispatcher_getNewManifold;
extern(C) void function(void* jarg1, void* jarg2) btDispatcher_releaseManifold;
extern(C) void function(void* jarg1, void* jarg2) btDispatcher_clearManifold;
extern(C) uint function(void* jarg1, void* jarg2, void* jarg3) btDispatcher_needsCollision;
extern(C) uint function(void* jarg1, void* jarg2, void* jarg3) btDispatcher_needsResponse;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btDispatcher_dispatchAllCollisionPairs;
extern(C) int function(void* jarg1) btDispatcher_getNumManifolds;
extern(C) void* function(void* jarg1, int jarg2) btDispatcher_getManifoldByIndexInternal;
extern(C) void* function(void* jarg1) btDispatcher_getInternalManifoldPointer;
extern(C) void* function(void* jarg1) btDispatcher_getInternalManifoldPool__SWIG_0;
extern(C) void* function(void* jarg1, int jarg2) btDispatcher_allocateCollisionAlgorithm;
extern(C) void function(void* jarg1, void* jarg2) btDispatcher_freeCollisionAlgorithm;
extern(C) int function() USE_DISPATCH_REGISTRY_ARRAY_get;
extern(C) int function(void* jarg1) btCollisionDispatcher_getDispatcherFlags;
extern(C) void function(void* jarg1, int jarg2) btCollisionDispatcher_setDispatcherFlags;
extern(C) void function(void* jarg1, int jarg2, int jarg3, void* jarg4) btCollisionDispatcher_registerCollisionCreateFunc;
extern(C) int function(void* jarg1) btCollisionDispatcher_getNumManifolds;
extern(C) void* function(void* jarg1) btCollisionDispatcher_getInternalManifoldPointer;
extern(C) void* function(void* jarg1, int jarg2) btCollisionDispatcher_getManifoldByIndexInternal__SWIG_0;
extern(C) void* function(void* jarg1) new_btCollisionDispatcher;
extern(C) void function(void* jarg1) delete_btCollisionDispatcher;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3) btCollisionDispatcher_getNewManifold;
extern(C) void function(void* jarg1, void* jarg2) btCollisionDispatcher_releaseManifold;
extern(C) void function(void* jarg1, void* jarg2) btCollisionDispatcher_clearManifold;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btCollisionDispatcher_findAlgorithm__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3) btCollisionDispatcher_findAlgorithm__SWIG_1;
extern(C) uint function(void* jarg1, void* jarg2, void* jarg3) btCollisionDispatcher_needsCollision;
extern(C) uint function(void* jarg1, void* jarg2, void* jarg3) btCollisionDispatcher_needsResponse;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btCollisionDispatcher_dispatchAllCollisionPairs;
extern(C) void function(void* jarg1, void* jarg2) btCollisionDispatcher_setNearCallback;
extern(C) void* function(void* jarg1) btCollisionDispatcher_getNearCallback;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btCollisionDispatcher_defaultNearCallback;
extern(C) void* function(void* jarg1, int jarg2) btCollisionDispatcher_allocateCollisionAlgorithm;
extern(C) void function(void* jarg1, void* jarg2) btCollisionDispatcher_freeCollisionAlgorithm;
extern(C) void* function(void* jarg1) btCollisionDispatcher_getCollisionConfiguration__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) btCollisionDispatcher_setCollisionConfiguration;
extern(C) void* function(void* jarg1) btCollisionDispatcher_getInternalManifoldPool__SWIG_0;
extern(C) void* function(void* objectRef) btCollisionDispatcher_Upcast;
extern(C) void function(void* jarg1) delete_btBroadphaseAabbCallback;
extern(C) uint function(void* jarg1, void* jarg2) btBroadphaseAabbCallback_process;
extern(C) void function(void* jarg1, void* jarg2) btBroadphaseRayCallback_m_rayDirectionInverse_set;
extern(C) void* function(void* jarg1) btBroadphaseRayCallback_m_rayDirectionInverse_get;
extern(C) void function(void* jarg1, void* jarg2) btBroadphaseRayCallback_m_signs_set;
extern(C) void* function(void* jarg1) btBroadphaseRayCallback_m_signs_get;
extern(C) void function(void* jarg1, float jarg2) btBroadphaseRayCallback_m_lambda_max_set;
extern(C) float function(void* jarg1) btBroadphaseRayCallback_m_lambda_max_get;
extern(C) void function(void* jarg1) delete_btBroadphaseRayCallback;
extern(C) void* function(void* objectRef) btBroadphaseRayCallback_Upcast;
extern(C) void function(void* jarg1) delete_btBroadphaseInterface;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, int jarg4, void* jarg5, short jarg6, short jarg7, void* jarg8, void* jarg9) btBroadphaseInterface_createProxy;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btBroadphaseInterface_destroyProxy;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btBroadphaseInterface_setAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btBroadphaseInterface_getAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6) btBroadphaseInterface_rayTest__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btBroadphaseInterface_rayTest__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btBroadphaseInterface_rayTest__SWIG_2;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btBroadphaseInterface_aabbTest;
extern(C) void function(void* jarg1, void* jarg2) btBroadphaseInterface_calculateOverlappingPairs;
extern(C) void* function(void* jarg1) btBroadphaseInterface_getOverlappingPairCache__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btBroadphaseInterface_getBroadphaseAabb;
extern(C) void function(void* jarg1, void* jarg2) btBroadphaseInterface_resetPool;
extern(C) void function(void* jarg1) btBroadphaseInterface_printStats;
extern(C) void function(void* jarg1, int jarg2) btSimpleBroadphaseProxy_m_nextFree_set;
extern(C) int function(void* jarg1) btSimpleBroadphaseProxy_m_nextFree_get;
extern(C) void* function() new_btSimpleBroadphaseProxy__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2, int jarg3, void* jarg4, short jarg5, short jarg6, void* jarg7) new_btSimpleBroadphaseProxy__SWIG_1;
extern(C) void function(void* jarg1, int jarg2) btSimpleBroadphaseProxy_SetNextFree;
extern(C) int function(void* jarg1) btSimpleBroadphaseProxy_GetNextFree;
extern(C) void function(void* jarg1) delete_btSimpleBroadphaseProxy;
extern(C) void* function(int jarg1, void* jarg2) new_btSimpleBroadphase__SWIG_0;
extern(C) void* function(int jarg1) new_btSimpleBroadphase__SWIG_1;
extern(C) void* function() new_btSimpleBroadphase__SWIG_2;
extern(C) void function(void* jarg1) delete_btSimpleBroadphase;
extern(C) uint function(void* jarg1, void* jarg2) btSimpleBroadphase_aabbOverlap;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, int jarg4, void* jarg5, short jarg6, short jarg7, void* jarg8, void* jarg9) btSimpleBroadphase_createProxy;
extern(C) void function(void* jarg1, void* jarg2) btSimpleBroadphase_calculateOverlappingPairs;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btSimpleBroadphase_destroyProxy;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btSimpleBroadphase_setAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btSimpleBroadphase_getAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6) btSimpleBroadphase_rayTest__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btSimpleBroadphase_rayTest__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btSimpleBroadphase_rayTest__SWIG_2;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btSimpleBroadphase_aabbTest;
extern(C) void* function(void* jarg1) btSimpleBroadphase_getOverlappingPairCache__SWIG_0;
extern(C) uint function(void* jarg1, void* jarg2, void* jarg3) btSimpleBroadphase_testAabbOverlap;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btSimpleBroadphase_getBroadphaseAabb;
extern(C) void function(void* jarg1) btSimpleBroadphase_printStats;
extern(C) void* function(void* objectRef) btSimpleBroadphase_Upcast;
extern(C) int function() USE_OVERLAP_TEST_ON_REMOVES_get;
extern(C) void function(int jarg1) gOverlappingPairs_set;
extern(C) int function() gOverlappingPairs_get;
extern(C) void* function(void* jarg1, void* jarg2, ushort jarg3, void* jarg4, uint jarg5) new_btAxisSweep3__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2, ushort jarg3, void* jarg4) new_btAxisSweep3__SWIG_1;
extern(C) void* function(void* jarg1, void* jarg2, ushort jarg3) new_btAxisSweep3__SWIG_2;
extern(C) void* function(void* jarg1, void* jarg2) new_btAxisSweep3__SWIG_3;
extern(C) void function(void* jarg1) delete_btAxisSweep3;
extern(C) void* function(void* jarg1, void* jarg2, uint jarg3, void* jarg4, uint jarg5) new_bt32BitAxisSweep3__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2, uint jarg3, void* jarg4) new_bt32BitAxisSweep3__SWIG_1;
extern(C) void* function(void* jarg1, void* jarg2, uint jarg3) new_bt32BitAxisSweep3__SWIG_2;
extern(C) void* function(void* jarg1, void* jarg2) new_bt32BitAxisSweep3__SWIG_3;
extern(C) void function(void* jarg1) delete_bt32BitAxisSweep3;
extern(C) int function() DBVT_BP_PROFILE_get;
extern(C) int function() DBVT_BP_PREVENTFALSEUPDATE_get;
extern(C) int function() DBVT_BP_ACCURATESLEEPING_get;
extern(C) int function() DBVT_BP_ENABLE_BENCHMARK_get;
extern(C) void function(void* jarg1, void* jarg2) btDbvtProxy_leaf_set;
extern(C) void* function(void* jarg1) btDbvtProxy_leaf_get;
extern(C) void function(void* jarg1, void* jarg2) btDbvtProxy_links_set;
extern(C) void* function(void* jarg1) btDbvtProxy_links_get;
extern(C) void function(void* jarg1, int jarg2) btDbvtProxy_stage_set;
extern(C) int function(void* jarg1) btDbvtProxy_stage_get;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, short jarg4, short jarg5) new_btDbvtProxy;
extern(C) void function(void* jarg1) delete_btDbvtProxy;
extern(C) void function(void* jarg1, void* jarg2) btDbvtBroadphase_m_sets_set;
extern(C) void* function(void* jarg1) btDbvtBroadphase_m_sets_get;
extern(C) void function(void* jarg1, void* jarg2) btDbvtBroadphase_m_stageRoots_set;
extern(C) void* function(void* jarg1) btDbvtBroadphase_m_stageRoots_get;
extern(C) void function(void* jarg1, void* jarg2) btDbvtBroadphase_m_paircache_set;
extern(C) void* function(void* jarg1) btDbvtBroadphase_m_paircache_get;
extern(C) void function(void* jarg1, float jarg2) btDbvtBroadphase_m_prediction_set;
extern(C) float function(void* jarg1) btDbvtBroadphase_m_prediction_get;
extern(C) void function(void* jarg1, int jarg2) btDbvtBroadphase_m_stageCurrent_set;
extern(C) int function(void* jarg1) btDbvtBroadphase_m_stageCurrent_get;
extern(C) void function(void* jarg1, int jarg2) btDbvtBroadphase_m_fupdates_set;
extern(C) int function(void* jarg1) btDbvtBroadphase_m_fupdates_get;
extern(C) void function(void* jarg1, int jarg2) btDbvtBroadphase_m_dupdates_set;
extern(C) int function(void* jarg1) btDbvtBroadphase_m_dupdates_get;
extern(C) void function(void* jarg1, int jarg2) btDbvtBroadphase_m_cupdates_set;
extern(C) int function(void* jarg1) btDbvtBroadphase_m_cupdates_get;
extern(C) void function(void* jarg1, int jarg2) btDbvtBroadphase_m_newpairs_set;
extern(C) int function(void* jarg1) btDbvtBroadphase_m_newpairs_get;
extern(C) void function(void* jarg1, int jarg2) btDbvtBroadphase_m_fixedleft_set;
extern(C) int function(void* jarg1) btDbvtBroadphase_m_fixedleft_get;
extern(C) void function(void* jarg1, uint jarg2) btDbvtBroadphase_m_updates_call_set;
extern(C) uint function(void* jarg1) btDbvtBroadphase_m_updates_call_get;
extern(C) void function(void* jarg1, uint jarg2) btDbvtBroadphase_m_updates_done_set;
extern(C) uint function(void* jarg1) btDbvtBroadphase_m_updates_done_get;
extern(C) void function(void* jarg1, float jarg2) btDbvtBroadphase_m_updates_ratio_set;
extern(C) float function(void* jarg1) btDbvtBroadphase_m_updates_ratio_get;
extern(C) void function(void* jarg1, int jarg2) btDbvtBroadphase_m_pid_set;
extern(C) int function(void* jarg1) btDbvtBroadphase_m_pid_get;
extern(C) void function(void* jarg1, int jarg2) btDbvtBroadphase_m_cid_set;
extern(C) int function(void* jarg1) btDbvtBroadphase_m_cid_get;
extern(C) void function(void* jarg1, int jarg2) btDbvtBroadphase_m_gid_set;
extern(C) int function(void* jarg1) btDbvtBroadphase_m_gid_get;
extern(C) void function(void* jarg1, uint jarg2) btDbvtBroadphase_m_releasepaircache_set;
extern(C) uint function(void* jarg1) btDbvtBroadphase_m_releasepaircache_get;
extern(C) void function(void* jarg1, uint jarg2) btDbvtBroadphase_m_deferedcollide_set;
extern(C) uint function(void* jarg1) btDbvtBroadphase_m_deferedcollide_get;
extern(C) void function(void* jarg1, uint jarg2) btDbvtBroadphase_m_needcleanup_set;
extern(C) uint function(void* jarg1) btDbvtBroadphase_m_needcleanup_get;
extern(C) void* function(void* jarg1) new_btDbvtBroadphase__SWIG_0;
extern(C) void* function() new_btDbvtBroadphase__SWIG_1;
extern(C) void function(void* jarg1) delete_btDbvtBroadphase;
extern(C) void function(void* jarg1, void* jarg2) btDbvtBroadphase_collide;
extern(C) void function(void* jarg1) btDbvtBroadphase_optimize;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, int jarg4, void* jarg5, short jarg6, short jarg7, void* jarg8, void* jarg9) btDbvtBroadphase_createProxy;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btDbvtBroadphase_destroyProxy;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btDbvtBroadphase_setAabb;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6) btDbvtBroadphase_rayTest__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btDbvtBroadphase_rayTest__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btDbvtBroadphase_rayTest__SWIG_2;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btDbvtBroadphase_aabbTest;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btDbvtBroadphase_getAabb;
extern(C) void function(void* jarg1, void* jarg2) btDbvtBroadphase_calculateOverlappingPairs;
extern(C) void* function(void* jarg1) btDbvtBroadphase_getOverlappingPairCache__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btDbvtBroadphase_getBroadphaseAabb;
extern(C) void function(void* jarg1) btDbvtBroadphase_printStats;
extern(C) void function(void* jarg1, void* jarg2) btDbvtBroadphase_resetPool;
extern(C) void function(void* jarg1, void* jarg2) btDbvtBroadphase_performDeferredRemoval;
extern(C) void function(void* jarg1, float jarg2) btDbvtBroadphase_setVelocityPrediction;
extern(C) float function(void* jarg1) btDbvtBroadphase_getVelocityPrediction;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btDbvtBroadphase_setAabbForceUpdate;
extern(C) void function(void* jarg1) btDbvtBroadphase_benchmark;
extern(C) void* function(void* objectRef) btDbvtBroadphase_Upcast;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) new_btDiscreteDynamicsWorld;
extern(C) void function(void* jarg1) delete_btDiscreteDynamicsWorld;
extern(C) int function(void* jarg1, float jarg2, int jarg3, float jarg4) btDiscreteDynamicsWorld_stepSimulation__SWIG_0;
extern(C) int function(void* jarg1, float jarg2, int jarg3) btDiscreteDynamicsWorld_stepSimulation__SWIG_1;
extern(C) int function(void* jarg1, float jarg2) btDiscreteDynamicsWorld_stepSimulation__SWIG_2;
extern(C) void function(void* jarg1) btDiscreteDynamicsWorld_synchronizeMotionStates;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_synchronizeSingleMotionState;
extern(C) void function(void* jarg1, void* jarg2, uint jarg3) btDiscreteDynamicsWorld_addConstraint__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_addConstraint__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_removeConstraint;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_addAction;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_removeAction;
extern(C) void* function(void* jarg1) btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_0;
extern(C) void* function(void* jarg1) btDiscreteDynamicsWorld_getCollisionWorld;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_setGravity;
extern(C) void* function(void* jarg1) btDiscreteDynamicsWorld_getGravity;
extern(C) void function(void* jarg1, void* jarg2, short jarg3, short jarg4) btDiscreteDynamicsWorld_addCollisionObject__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, short jarg3) btDiscreteDynamicsWorld_addCollisionObject__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_addCollisionObject__SWIG_2;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_addRigidBody__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, short jarg3, short jarg4) btDiscreteDynamicsWorld_addRigidBody__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_removeRigidBody;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_removeCollisionObject;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_debugDrawConstraint;
extern(C) void function(void* jarg1) btDiscreteDynamicsWorld_debugDrawWorld;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_setConstraintSolver;
extern(C) void* function(void* jarg1) btDiscreteDynamicsWorld_getConstraintSolver;
extern(C) int function(void* jarg1) btDiscreteDynamicsWorld_getNumConstraints;
extern(C) void* function(void* jarg1, int jarg2) btDiscreteDynamicsWorld_getConstraint__SWIG_0;
extern(C) void* function(void* jarg1) btDiscreteDynamicsWorld_getWorldType;
extern(C) void function(void* jarg1) btDiscreteDynamicsWorld_clearForces;
extern(C) void function(void* jarg1) btDiscreteDynamicsWorld_applyGravity;
extern(C) void function(void* jarg1, int jarg2) btDiscreteDynamicsWorld_setNumTasks;
extern(C) void function(void* jarg1, float jarg2) btDiscreteDynamicsWorld_updateVehicles;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_addVehicle;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_removeVehicle;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_addCharacter;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_removeCharacter;
extern(C) void function(void* jarg1, uint jarg2) btDiscreteDynamicsWorld_setSynchronizeAllMotionStates;
extern(C) uint function(void* jarg1) btDiscreteDynamicsWorld_getSynchronizeAllMotionStates;
extern(C) void function(void* jarg1, void* jarg2) btDiscreteDynamicsWorld_serialize;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) new_btSimpleDynamicsWorld;
extern(C) void function(void* jarg1) delete_btSimpleDynamicsWorld;
extern(C) int function(void* jarg1, float jarg2, int jarg3, float jarg4) btSimpleDynamicsWorld_stepSimulation__SWIG_0;
extern(C) int function(void* jarg1, float jarg2, int jarg3) btSimpleDynamicsWorld_stepSimulation__SWIG_1;
extern(C) int function(void* jarg1, float jarg2) btSimpleDynamicsWorld_stepSimulation__SWIG_2;
extern(C) void function(void* jarg1, void* jarg2) btSimpleDynamicsWorld_setGravity;
extern(C) void* function(void* jarg1) btSimpleDynamicsWorld_getGravity;
extern(C) void function(void* jarg1, void* jarg2) btSimpleDynamicsWorld_addRigidBody__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2, short jarg3, short jarg4) btSimpleDynamicsWorld_addRigidBody__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2) btSimpleDynamicsWorld_removeRigidBody;
extern(C) void function(void* jarg1) btSimpleDynamicsWorld_debugDrawWorld;
extern(C) void function(void* jarg1, void* jarg2) btSimpleDynamicsWorld_addAction;
extern(C) void function(void* jarg1, void* jarg2) btSimpleDynamicsWorld_removeAction;
extern(C) void function(void* jarg1, void* jarg2) btSimpleDynamicsWorld_removeCollisionObject;
extern(C) void function(void* jarg1) btSimpleDynamicsWorld_updateAabbs;
extern(C) void function(void* jarg1) btSimpleDynamicsWorld_synchronizeMotionStates;
extern(C) void function(void* jarg1, void* jarg2) btSimpleDynamicsWorld_setConstraintSolver;
extern(C) void* function(void* jarg1) btSimpleDynamicsWorld_getConstraintSolver;
extern(C) void* function(void* jarg1) btSimpleDynamicsWorld_getWorldType;
extern(C) void function(void* jarg1) btSimpleDynamicsWorld_clearForces;
extern(C) void function(float jarg1) gDeactivationTime_set;
extern(C) float function() gDeactivationTime_get;
extern(C) void function(uint jarg1) gDisableDeactivation_set;
extern(C) uint function() gDisableDeactivation_get;
extern(C) const(char)* function() btRigidBodyDataName_get;
extern(C) void* function(void* jarg1) new_btRigidBody__SWIG_0;
extern(C) void* function(float jarg1, void* jarg2, void* jarg3, void* jarg4) new_btRigidBody__SWIG_1;
extern(C) void* function(float jarg1, void* jarg2, void* jarg3) new_btRigidBody__SWIG_2;
extern(C) void function(void* jarg1) delete_btRigidBody;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_proceedToTransform;
extern(C) void* function(void* jarg1) btRigidBody_upcast__SWIG_0;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btRigidBody_predictIntegratedTransform;
extern(C) void function(void* jarg1, float jarg2) btRigidBody_saveKinematicState;
extern(C) void function(void* jarg1) btRigidBody_applyGravity;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_setGravity;
extern(C) void* function(void* jarg1) btRigidBody_getGravity;
extern(C) void function(void* jarg1, float jarg2, float jarg3) btRigidBody_setDamping;
extern(C) float function(void* jarg1) btRigidBody_getLinearDamping;
extern(C) float function(void* jarg1) btRigidBody_getAngularDamping;
extern(C) float function(void* jarg1) btRigidBody_getLinearSleepingThreshold;
extern(C) float function(void* jarg1) btRigidBody_getAngularSleepingThreshold;
extern(C) void function(void* jarg1, float jarg2) btRigidBody_applyDamping;
extern(C) void* function(void* jarg1) btRigidBody_getCollisionShape__SWIG_0;
extern(C) void function(void* jarg1, float jarg2, void* jarg3) btRigidBody_setMassProps;
extern(C) void* function(void* jarg1) btRigidBody_getLinearFactor;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_setLinearFactor;
extern(C) float function(void* jarg1) btRigidBody_getInvMass;
extern(C) void* function(void* jarg1) btRigidBody_getInvInertiaTensorWorld;
extern(C) void function(void* jarg1, float jarg2) btRigidBody_integrateVelocities;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_setCenterOfMassTransform;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_applyCentralForce;
extern(C) void* function(void* jarg1) btRigidBody_getTotalForce;
extern(C) void* function(void* jarg1) btRigidBody_getTotalTorque;
extern(C) void* function(void* jarg1) btRigidBody_getInvInertiaDiagLocal;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_setInvInertiaDiagLocal;
extern(C) void function(void* jarg1, float jarg2, float jarg3) btRigidBody_setSleepingThresholds;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_applyTorque;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btRigidBody_applyForce;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_applyCentralImpulse;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_applyTorqueImpulse;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btRigidBody_applyImpulse;
extern(C) void function(void* jarg1) btRigidBody_clearForces;
extern(C) void function(void* jarg1) btRigidBody_updateInertiaTensor;
extern(C) void* function(void* jarg1) btRigidBody_getCenterOfMassPosition;
extern(C) void* function(void* jarg1) btRigidBody_getOrientation;
extern(C) void* function(void* jarg1) btRigidBody_getCenterOfMassTransform;
extern(C) void* function(void* jarg1) btRigidBody_getLinearVelocity;
extern(C) void* function(void* jarg1) btRigidBody_getAngularVelocity;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_setLinearVelocity;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_setAngularVelocity;
extern(C) void* function(void* jarg1, void* jarg2) btRigidBody_getVelocityInLocalPoint;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_translate;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btRigidBody_getAabb;
extern(C) float function(void* jarg1, void* jarg2, void* jarg3) btRigidBody_computeImpulseDenominator;
extern(C) float function(void* jarg1, void* jarg2) btRigidBody_computeAngularImpulseDenominator;
extern(C) void function(void* jarg1, float jarg2) btRigidBody_updateDeactivation;
extern(C) uint function(void* jarg1) btRigidBody_wantsSleeping;
extern(C) void* function(void* jarg1) btRigidBody_getBroadphaseProxy__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_setNewBroadphaseProxy;
extern(C) void* function(void* jarg1) btRigidBody_getMotionState__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_setMotionState;
extern(C) void function(void* jarg1, int jarg2) btRigidBody_m_contactSolverType_set;
extern(C) int function(void* jarg1) btRigidBody_m_contactSolverType_get;
extern(C) void function(void* jarg1, int jarg2) btRigidBody_m_frictionSolverType_set;
extern(C) int function(void* jarg1) btRigidBody_m_frictionSolverType_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_setAngularFactor__SWIG_0;
extern(C) void function(void* jarg1, float jarg2) btRigidBody_setAngularFactor__SWIG_1;
extern(C) void* function(void* jarg1) btRigidBody_getAngularFactor;
extern(C) uint function(void* jarg1) btRigidBody_isInWorld;
extern(C) uint function(void* jarg1, void* jarg2) btRigidBody_checkCollideWithOverride;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_addConstraintRef;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_removeConstraintRef;
extern(C) void* function(void* jarg1, int jarg2) btRigidBody_getConstraintRef;
extern(C) int function(void* jarg1) btRigidBody_getNumConstraintRefs;
extern(C) void function(void* jarg1, int jarg2) btRigidBody_setFlags;
extern(C) int function(void* jarg1) btRigidBody_getFlags;
extern(C) void* function(void* jarg1) btRigidBody_getDeltaLinearVelocity;
extern(C) void* function(void* jarg1) btRigidBody_getDeltaAngularVelocity;
extern(C) void* function(void* jarg1) btRigidBody_getPushVelocity;
extern(C) void* function(void* jarg1) btRigidBody_getTurnVelocity;
extern(C) void* function(void* jarg1) btRigidBody_internalGetDeltaLinearVelocity;
extern(C) void* function(void* jarg1) btRigidBody_internalGetDeltaAngularVelocity;
extern(C) void* function(void* jarg1) btRigidBody_internalGetAngularFactor;
extern(C) void* function(void* jarg1) btRigidBody_internalGetInvMass;
extern(C) void* function(void* jarg1) btRigidBody_internalGetPushVelocity;
extern(C) void* function(void* jarg1) btRigidBody_internalGetTurnVelocity;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btRigidBody_internalGetVelocityInLocalPointObsolete;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_internalGetAngularVelocity;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, float jarg4) btRigidBody_internalApplyImpulse;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, float jarg4) btRigidBody_internalApplyPushImpulse;
extern(C) void function(void* jarg1) btRigidBody_internalWritebackVelocity__SWIG_0;
extern(C) void function(void* jarg1, float jarg2) btRigidBody_internalWritebackVelocity__SWIG_1;
extern(C) int function(void* jarg1) btRigidBody_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btRigidBody_serialize;
extern(C) void function(void* jarg1, void* jarg2) btRigidBody_serializeSingleObject;
extern(C) void* function(void* objectRef) btRigidBody_Upcast;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyFloatData_m_collisionObjectData_set;
extern(C) void* function(void* jarg1) btRigidBodyFloatData_m_collisionObjectData_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyFloatData_m_invInertiaTensorWorld_set;
extern(C) void* function(void* jarg1) btRigidBodyFloatData_m_invInertiaTensorWorld_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyFloatData_m_linearVelocity_set;
extern(C) void* function(void* jarg1) btRigidBodyFloatData_m_linearVelocity_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyFloatData_m_angularVelocity_set;
extern(C) void* function(void* jarg1) btRigidBodyFloatData_m_angularVelocity_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyFloatData_m_angularFactor_set;
extern(C) void* function(void* jarg1) btRigidBodyFloatData_m_angularFactor_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyFloatData_m_linearFactor_set;
extern(C) void* function(void* jarg1) btRigidBodyFloatData_m_linearFactor_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyFloatData_m_gravity_set;
extern(C) void* function(void* jarg1) btRigidBodyFloatData_m_gravity_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyFloatData_m_gravity_acceleration_set;
extern(C) void* function(void* jarg1) btRigidBodyFloatData_m_gravity_acceleration_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyFloatData_m_invInertiaLocal_set;
extern(C) void* function(void* jarg1) btRigidBodyFloatData_m_invInertiaLocal_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyFloatData_m_totalForce_set;
extern(C) void* function(void* jarg1) btRigidBodyFloatData_m_totalForce_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyFloatData_m_totalTorque_set;
extern(C) void* function(void* jarg1) btRigidBodyFloatData_m_totalTorque_get;
extern(C) void function(void* jarg1, float jarg2) btRigidBodyFloatData_m_inverseMass_set;
extern(C) float function(void* jarg1) btRigidBodyFloatData_m_inverseMass_get;
extern(C) void function(void* jarg1, float jarg2) btRigidBodyFloatData_m_linearDamping_set;
extern(C) float function(void* jarg1) btRigidBodyFloatData_m_linearDamping_get;
extern(C) void function(void* jarg1, float jarg2) btRigidBodyFloatData_m_angularDamping_set;
extern(C) float function(void* jarg1) btRigidBodyFloatData_m_angularDamping_get;
extern(C) void function(void* jarg1, float jarg2) btRigidBodyFloatData_m_additionalDampingFactor_set;
extern(C) float function(void* jarg1) btRigidBodyFloatData_m_additionalDampingFactor_get;
extern(C) void function(void* jarg1, float jarg2) btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set;
extern(C) float function(void* jarg1) btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get;
extern(C) void function(void* jarg1, float jarg2) btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set;
extern(C) float function(void* jarg1) btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get;
extern(C) void function(void* jarg1, float jarg2) btRigidBodyFloatData_m_additionalAngularDampingFactor_set;
extern(C) float function(void* jarg1) btRigidBodyFloatData_m_additionalAngularDampingFactor_get;
extern(C) void function(void* jarg1, float jarg2) btRigidBodyFloatData_m_linearSleepingThreshold_set;
extern(C) float function(void* jarg1) btRigidBodyFloatData_m_linearSleepingThreshold_get;
extern(C) void function(void* jarg1, float jarg2) btRigidBodyFloatData_m_angularSleepingThreshold_set;
extern(C) float function(void* jarg1) btRigidBodyFloatData_m_angularSleepingThreshold_get;
extern(C) void function(void* jarg1, int jarg2) btRigidBodyFloatData_m_additionalDamping_set;
extern(C) int function(void* jarg1) btRigidBodyFloatData_m_additionalDamping_get;
extern(C) void* function() new_btRigidBodyFloatData;
extern(C) void function(void* jarg1) delete_btRigidBodyFloatData;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyDoubleData_m_collisionObjectData_set;
extern(C) void* function(void* jarg1) btRigidBodyDoubleData_m_collisionObjectData_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyDoubleData_m_invInertiaTensorWorld_set;
extern(C) void* function(void* jarg1) btRigidBodyDoubleData_m_invInertiaTensorWorld_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyDoubleData_m_linearVelocity_set;
extern(C) void* function(void* jarg1) btRigidBodyDoubleData_m_linearVelocity_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyDoubleData_m_angularVelocity_set;
extern(C) void* function(void* jarg1) btRigidBodyDoubleData_m_angularVelocity_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyDoubleData_m_angularFactor_set;
extern(C) void* function(void* jarg1) btRigidBodyDoubleData_m_angularFactor_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyDoubleData_m_linearFactor_set;
extern(C) void* function(void* jarg1) btRigidBodyDoubleData_m_linearFactor_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyDoubleData_m_gravity_set;
extern(C) void* function(void* jarg1) btRigidBodyDoubleData_m_gravity_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyDoubleData_m_gravity_acceleration_set;
extern(C) void* function(void* jarg1) btRigidBodyDoubleData_m_gravity_acceleration_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyDoubleData_m_invInertiaLocal_set;
extern(C) void* function(void* jarg1) btRigidBodyDoubleData_m_invInertiaLocal_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyDoubleData_m_totalForce_set;
extern(C) void* function(void* jarg1) btRigidBodyDoubleData_m_totalForce_get;
extern(C) void function(void* jarg1, void* jarg2) btRigidBodyDoubleData_m_totalTorque_set;
extern(C) void* function(void* jarg1) btRigidBodyDoubleData_m_totalTorque_get;
extern(C) void function(void* jarg1, double jarg2) btRigidBodyDoubleData_m_inverseMass_set;
extern(C) double function(void* jarg1) btRigidBodyDoubleData_m_inverseMass_get;
extern(C) void function(void* jarg1, double jarg2) btRigidBodyDoubleData_m_linearDamping_set;
extern(C) double function(void* jarg1) btRigidBodyDoubleData_m_linearDamping_get;
extern(C) void function(void* jarg1, double jarg2) btRigidBodyDoubleData_m_angularDamping_set;
extern(C) double function(void* jarg1) btRigidBodyDoubleData_m_angularDamping_get;
extern(C) void function(void* jarg1, double jarg2) btRigidBodyDoubleData_m_additionalDampingFactor_set;
extern(C) double function(void* jarg1) btRigidBodyDoubleData_m_additionalDampingFactor_get;
extern(C) void function(void* jarg1, double jarg2) btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set;
extern(C) double function(void* jarg1) btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get;
extern(C) void function(void* jarg1, double jarg2) btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set;
extern(C) double function(void* jarg1) btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get;
extern(C) void function(void* jarg1, double jarg2) btRigidBodyDoubleData_m_additionalAngularDampingFactor_set;
extern(C) double function(void* jarg1) btRigidBodyDoubleData_m_additionalAngularDampingFactor_get;
extern(C) void function(void* jarg1, double jarg2) btRigidBodyDoubleData_m_linearSleepingThreshold_set;
extern(C) double function(void* jarg1) btRigidBodyDoubleData_m_linearSleepingThreshold_get;
extern(C) void function(void* jarg1, double jarg2) btRigidBodyDoubleData_m_angularSleepingThreshold_set;
extern(C) double function(void* jarg1) btRigidBodyDoubleData_m_angularSleepingThreshold_get;
extern(C) void function(void* jarg1, int jarg2) btRigidBodyDoubleData_m_additionalDamping_set;
extern(C) int function(void* jarg1) btRigidBodyDoubleData_m_additionalDamping_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btRigidBodyDoubleData_m_padding_set;
extern(C) const(char)* function(void* jarg1) btRigidBodyDoubleData_m_padding_get;
extern(C) void* function() new_btRigidBodyDoubleData;
extern(C) void function(void* jarg1) delete_btRigidBodyDoubleData;
extern(C) void function(void* jarg1) delete_btConstraintSolver;
extern(C) void function(void* jarg1, int jarg2, int jarg3) btConstraintSolver_prepareSolve;
extern(C) float function(void* jarg1, void* jarg2, int jarg3, void* jarg4, int jarg5, void* jarg6, int jarg7, void* jarg8, void* jarg9, void* jarg10, void* jarg11) btConstraintSolver_solveGroup;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btConstraintSolver_allSolved;
extern(C) void function(void* jarg1) btConstraintSolver_reset;
extern(C) void function(void* jarg1) delete_btTypedConstraint;
extern(C) void function(void* jarg1) btTypedConstraint_buildJacobian;
extern(C) void function(void* jarg1, void* jarg2, int jarg3, int jarg4, float jarg5) btTypedConstraint_setupSolverConstraint;
extern(C) void function(void* jarg1, void* jarg2) btTypedConstraint_getInfo1;
extern(C) void function(void* jarg1, void* jarg2) btTypedConstraint_getInfo2;
extern(C) void function(void* jarg1, float jarg2) btTypedConstraint_internalSetAppliedImpulse;
extern(C) float function(void* jarg1) btTypedConstraint_internalGetAppliedImpulse;
extern(C) float function(void* jarg1) btTypedConstraint_getBreakingImpulseThreshold;
extern(C) void function(void* jarg1, float jarg2) btTypedConstraint_setBreakingImpulseThreshold;
extern(C) uint function(void* jarg1) btTypedConstraint_isEnabled;
extern(C) void function(void* jarg1, uint jarg2) btTypedConstraint_setEnabled;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, float jarg4) btTypedConstraint_solveConstraintObsolete;
extern(C) void* function(void* jarg1) btTypedConstraint_getRigidBodyA__SWIG_0;
extern(C) void* function(void* jarg1) btTypedConstraint_getRigidBodyB__SWIG_0;
extern(C) int function(void* jarg1) btTypedConstraint_getUserConstraintType;
extern(C) void function(void* jarg1, int jarg2) btTypedConstraint_setUserConstraintType;
extern(C) void function(void* jarg1, int jarg2) btTypedConstraint_setUserConstraintId;
extern(C) int function(void* jarg1) btTypedConstraint_getUserConstraintId;
extern(C) void function(void* jarg1, void* jarg2) btTypedConstraint_setUserConstraintPtr;
extern(C) void* function(void* jarg1) btTypedConstraint_getUserConstraintPtr;
extern(C) int function(void* jarg1) btTypedConstraint_getUid;
extern(C) uint function(void* jarg1) btTypedConstraint_needsFeedback;
extern(C) void function(void* jarg1, uint jarg2) btTypedConstraint_enableFeedback;
extern(C) float function(void* jarg1) btTypedConstraint_getAppliedImpulse;
extern(C) int function(void* jarg1) btTypedConstraint_getConstraintType;
extern(C) void function(void* jarg1, float jarg2) btTypedConstraint_setDbgDrawSize;
extern(C) float function(void* jarg1) btTypedConstraint_getDbgDrawSize;
extern(C) void function(void* jarg1, int jarg2, float jarg3, int jarg4) btTypedConstraint_setParam__SWIG_0;
extern(C) void function(void* jarg1, int jarg2, float jarg3) btTypedConstraint_setParam__SWIG_1;
extern(C) float function(void* jarg1, int jarg2, int jarg3) btTypedConstraint_getParam__SWIG_0;
extern(C) float function(void* jarg1, int jarg2) btTypedConstraint_getParam__SWIG_1;
extern(C) int function(void* jarg1) btTypedConstraint_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btTypedConstraint_serialize;
extern(C) void* function(void* objectRef) btTypedConstraint_Upcast;
extern(C) float function(float jarg1, float jarg2, float jarg3) btAdjustAngleToLimits;
extern(C) void function(void* jarg1, void* jarg2) btTypedConstraintData_m_rbA_set;
extern(C) void* function(void* jarg1) btTypedConstraintData_m_rbA_get;
extern(C) void function(void* jarg1, void* jarg2) btTypedConstraintData_m_rbB_set;
extern(C) void* function(void* jarg1) btTypedConstraintData_m_rbB_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btTypedConstraintData_m_name_set;
extern(C) const(char)* function(void* jarg1) btTypedConstraintData_m_name_get;
extern(C) void function(void* jarg1, int jarg2) btTypedConstraintData_m_objectType_set;
extern(C) int function(void* jarg1) btTypedConstraintData_m_objectType_get;
extern(C) void function(void* jarg1, int jarg2) btTypedConstraintData_m_userConstraintType_set;
extern(C) int function(void* jarg1) btTypedConstraintData_m_userConstraintType_get;
extern(C) void function(void* jarg1, int jarg2) btTypedConstraintData_m_userConstraintId_set;
extern(C) int function(void* jarg1) btTypedConstraintData_m_userConstraintId_get;
extern(C) void function(void* jarg1, int jarg2) btTypedConstraintData_m_needsFeedback_set;
extern(C) int function(void* jarg1) btTypedConstraintData_m_needsFeedback_get;
extern(C) void function(void* jarg1, float jarg2) btTypedConstraintData_m_appliedImpulse_set;
extern(C) float function(void* jarg1) btTypedConstraintData_m_appliedImpulse_get;
extern(C) void function(void* jarg1, float jarg2) btTypedConstraintData_m_dbgDrawSize_set;
extern(C) float function(void* jarg1) btTypedConstraintData_m_dbgDrawSize_get;
extern(C) void function(void* jarg1, int jarg2) btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_set;
extern(C) int function(void* jarg1) btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btTypedConstraintData_m_pad4_set;
extern(C) const(char)* function(void* jarg1) btTypedConstraintData_m_pad4_get;
extern(C) void* function() new_btTypedConstraintData;
extern(C) void function(void* jarg1) delete_btTypedConstraintData;
extern(C) void* function() new_btAngularLimit;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) btAngularLimit_set__SWIG_0;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4, float jarg5) btAngularLimit_set__SWIG_1;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4) btAngularLimit_set__SWIG_2;
extern(C) void function(void* jarg1, float jarg2, float jarg3) btAngularLimit_set__SWIG_3;
extern(C) void function(void* jarg1, float jarg2) btAngularLimit_test;
extern(C) float function(void* jarg1) btAngularLimit_getSoftness;
extern(C) float function(void* jarg1) btAngularLimit_getBiasFactor;
extern(C) float function(void* jarg1) btAngularLimit_getRelaxationFactor;
extern(C) float function(void* jarg1) btAngularLimit_getCorrection;
extern(C) float function(void* jarg1) btAngularLimit_getSign;
extern(C) float function(void* jarg1) btAngularLimit_getHalfRange;
extern(C) uint function(void* jarg1) btAngularLimit_isLimit;
extern(C) void function(void* jarg1, void* jarg2) btAngularLimit_fit;
extern(C) float function(void* jarg1) btAngularLimit_getError;
extern(C) float function(void* jarg1) btAngularLimit_getLow;
extern(C) float function(void* jarg1) btAngularLimit_getHigh;
extern(C) void function(void* jarg1) delete_btAngularLimit;
extern(C) const(char)* function() btPoint2PointConstraintDataName_get;
extern(C) void* function() new_btConstraintSetting;
extern(C) void function(void* jarg1, float jarg2) btConstraintSetting_m_tau_set;
extern(C) float function(void* jarg1) btConstraintSetting_m_tau_get;
extern(C) void function(void* jarg1, float jarg2) btConstraintSetting_m_damping_set;
extern(C) float function(void* jarg1) btConstraintSetting_m_damping_get;
extern(C) void function(void* jarg1, float jarg2) btConstraintSetting_m_impulseClamp_set;
extern(C) float function(void* jarg1) btConstraintSetting_m_impulseClamp_get;
extern(C) void function(void* jarg1) delete_btConstraintSetting;
extern(C) void function(void* jarg1, uint jarg2) btPoint2PointConstraint_m_useSolveConstraintObsolete_set;
extern(C) uint function(void* jarg1) btPoint2PointConstraint_m_useSolveConstraintObsolete_get;
extern(C) void function(void* jarg1, void* jarg2) btPoint2PointConstraint_m_setting_set;
extern(C) void* function(void* jarg1) btPoint2PointConstraint_m_setting_get;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) new_btPoint2PointConstraint__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) new_btPoint2PointConstraint__SWIG_1;
extern(C) void function(void* jarg1) btPoint2PointConstraint_buildJacobian;
extern(C) void function(void* jarg1, void* jarg2) btPoint2PointConstraint_getInfo1;
extern(C) void function(void* jarg1, void* jarg2) btPoint2PointConstraint_getInfo1NonVirtual;
extern(C) void function(void* jarg1, void* jarg2) btPoint2PointConstraint_getInfo2;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) btPoint2PointConstraint_getInfo2NonVirtual;
extern(C) void function(void* jarg1, float jarg2) btPoint2PointConstraint_updateRHS;
extern(C) void function(void* jarg1, void* jarg2) btPoint2PointConstraint_setPivotA;
extern(C) void function(void* jarg1, void* jarg2) btPoint2PointConstraint_setPivotB;
extern(C) void* function(void* jarg1) btPoint2PointConstraint_getPivotInA;
extern(C) void* function(void* jarg1) btPoint2PointConstraint_getPivotInB;
extern(C) void function(void* jarg1, int jarg2, float jarg3, int jarg4) btPoint2PointConstraint_setParam__SWIG_0;
extern(C) void function(void* jarg1, int jarg2, float jarg3) btPoint2PointConstraint_setParam__SWIG_1;
extern(C) float function(void* jarg1, int jarg2, int jarg3) btPoint2PointConstraint_getParam__SWIG_0;
extern(C) float function(void* jarg1, int jarg2) btPoint2PointConstraint_getParam__SWIG_1;
extern(C) int function(void* jarg1) btPoint2PointConstraint_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btPoint2PointConstraint_serialize;
extern(C) void function(void* jarg1) delete_btPoint2PointConstraint;
extern(C) void* function(void* objectRef) btPoint2PointConstraint_Upcast;
extern(C) void function(void* jarg1, void* jarg2) btPoint2PointConstraintFloatData_m_typeConstraintData_set;
extern(C) void* function(void* jarg1) btPoint2PointConstraintFloatData_m_typeConstraintData_get;
extern(C) void function(void* jarg1, void* jarg2) btPoint2PointConstraintFloatData_m_pivotInA_set;
extern(C) void* function(void* jarg1) btPoint2PointConstraintFloatData_m_pivotInA_get;
extern(C) void function(void* jarg1, void* jarg2) btPoint2PointConstraintFloatData_m_pivotInB_set;
extern(C) void* function(void* jarg1) btPoint2PointConstraintFloatData_m_pivotInB_get;
extern(C) void* function() new_btPoint2PointConstraintFloatData;
extern(C) void function(void* jarg1) delete_btPoint2PointConstraintFloatData;
extern(C) void function(void* jarg1, void* jarg2) btPoint2PointConstraintDoubleData_m_typeConstraintData_set;
extern(C) void* function(void* jarg1) btPoint2PointConstraintDoubleData_m_typeConstraintData_get;
extern(C) void function(void* jarg1, void* jarg2) btPoint2PointConstraintDoubleData_m_pivotInA_set;
extern(C) void* function(void* jarg1) btPoint2PointConstraintDoubleData_m_pivotInA_get;
extern(C) void function(void* jarg1, void* jarg2) btPoint2PointConstraintDoubleData_m_pivotInB_set;
extern(C) void* function(void* jarg1) btPoint2PointConstraintDoubleData_m_pivotInB_get;
extern(C) void* function() new_btPoint2PointConstraintDoubleData;
extern(C) void function(void* jarg1) delete_btPoint2PointConstraintDoubleData;
extern(C) int function() _BT_USE_CENTER_LIMIT__get;
extern(C) const(char)* function() btHingeConstraintDataName_get;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6, uint jarg7) new_btHingeConstraint__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6) new_btHingeConstraint__SWIG_1;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, uint jarg4) new_btHingeConstraint__SWIG_2;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3) new_btHingeConstraint__SWIG_3;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, uint jarg5) new_btHingeConstraint__SWIG_4;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) new_btHingeConstraint__SWIG_5;
extern(C) void* function(void* jarg1, void* jarg2, uint jarg3) new_btHingeConstraint__SWIG_6;
extern(C) void* function(void* jarg1, void* jarg2) new_btHingeConstraint__SWIG_7;
extern(C) void function(void* jarg1) btHingeConstraint_buildJacobian;
extern(C) void function(void* jarg1, void* jarg2) btHingeConstraint_getInfo1;
extern(C) void function(void* jarg1, void* jarg2) btHingeConstraint_getInfo1NonVirtual;
extern(C) void function(void* jarg1, void* jarg2) btHingeConstraint_getInfo2;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6) btHingeConstraint_getInfo2NonVirtual;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6) btHingeConstraint_getInfo2Internal;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6) btHingeConstraint_getInfo2InternalUsingFrameOffset;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraint_updateRHS;
extern(C) void* function(void* jarg1) btHingeConstraint_getRigidBodyA__SWIG_0;
extern(C) void* function(void* jarg1) btHingeConstraint_getRigidBodyB__SWIG_0;
extern(C) void* function(void* jarg1) btHingeConstraint_getFrameOffsetA;
extern(C) void* function(void* jarg1) btHingeConstraint_getFrameOffsetB;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btHingeConstraint_setFrames;
extern(C) void function(void* jarg1, uint jarg2) btHingeConstraint_setAngularOnly;
extern(C) void function(void* jarg1, uint jarg2, float jarg3, float jarg4) btHingeConstraint_enableAngularMotor;
extern(C) void function(void* jarg1, uint jarg2) btHingeConstraint_enableMotor;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraint_setMaxMotorImpulse;
extern(C) void function(void* jarg1, void* jarg2, float jarg3) btHingeConstraint_setMotorTarget__SWIG_0;
extern(C) void function(void* jarg1, float jarg2, float jarg3) btHingeConstraint_setMotorTarget__SWIG_1;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) btHingeConstraint_setLimit__SWIG_0;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4, float jarg5) btHingeConstraint_setLimit__SWIG_1;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4) btHingeConstraint_setLimit__SWIG_2;
extern(C) void function(void* jarg1, float jarg2, float jarg3) btHingeConstraint_setLimit__SWIG_3;
extern(C) void function(void* jarg1, void* jarg2) btHingeConstraint_setAxis;
extern(C) float function(void* jarg1) btHingeConstraint_getLowerLimit;
extern(C) float function(void* jarg1) btHingeConstraint_getUpperLimit;
extern(C) float function(void* jarg1) btHingeConstraint_getHingeAngle__SWIG_0;
extern(C) float function(void* jarg1, void* jarg2, void* jarg3) btHingeConstraint_getHingeAngle__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btHingeConstraint_testLimit;
extern(C) void* function(void* jarg1) btHingeConstraint_getAFrame__SWIG_0;
extern(C) void* function(void* jarg1) btHingeConstraint_getBFrame__SWIG_0;
extern(C) int function(void* jarg1) btHingeConstraint_getSolveLimit;
extern(C) float function(void* jarg1) btHingeConstraint_getLimitSign;
extern(C) uint function(void* jarg1) btHingeConstraint_getAngularOnly;
extern(C) uint function(void* jarg1) btHingeConstraint_getEnableAngularMotor;
extern(C) float function(void* jarg1) btHingeConstraint_getMotorTargetVelosity;
extern(C) float function(void* jarg1) btHingeConstraint_getMaxMotorImpulse;
extern(C) uint function(void* jarg1) btHingeConstraint_getUseFrameOffset;
extern(C) void function(void* jarg1, uint jarg2) btHingeConstraint_setUseFrameOffset;
extern(C) void function(void* jarg1, int jarg2, float jarg3, int jarg4) btHingeConstraint_setParam__SWIG_0;
extern(C) void function(void* jarg1, int jarg2, float jarg3) btHingeConstraint_setParam__SWIG_1;
extern(C) float function(void* jarg1, int jarg2, int jarg3) btHingeConstraint_getParam__SWIG_0;
extern(C) float function(void* jarg1, int jarg2) btHingeConstraint_getParam__SWIG_1;
extern(C) int function(void* jarg1) btHingeConstraint_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btHingeConstraint_serialize;
extern(C) void function(void* jarg1) delete_btHingeConstraint;
extern(C) void* function(void* objectRef) btHingeConstraint_Upcast;
extern(C) void function(void* jarg1, void* jarg2) btHingeConstraintDoubleData_m_typeConstraintData_set;
extern(C) void* function(void* jarg1) btHingeConstraintDoubleData_m_typeConstraintData_get;
extern(C) void function(void* jarg1, void* jarg2) btHingeConstraintDoubleData_m_rbAFrame_set;
extern(C) void* function(void* jarg1) btHingeConstraintDoubleData_m_rbAFrame_get;
extern(C) void function(void* jarg1, void* jarg2) btHingeConstraintDoubleData_m_rbBFrame_set;
extern(C) void* function(void* jarg1) btHingeConstraintDoubleData_m_rbBFrame_get;
extern(C) void function(void* jarg1, int jarg2) btHingeConstraintDoubleData_m_useReferenceFrameA_set;
extern(C) int function(void* jarg1) btHingeConstraintDoubleData_m_useReferenceFrameA_get;
extern(C) void function(void* jarg1, int jarg2) btHingeConstraintDoubleData_m_angularOnly_set;
extern(C) int function(void* jarg1) btHingeConstraintDoubleData_m_angularOnly_get;
extern(C) void function(void* jarg1, int jarg2) btHingeConstraintDoubleData_m_enableAngularMotor_set;
extern(C) int function(void* jarg1) btHingeConstraintDoubleData_m_enableAngularMotor_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintDoubleData_m_motorTargetVelocity_set;
extern(C) float function(void* jarg1) btHingeConstraintDoubleData_m_motorTargetVelocity_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintDoubleData_m_maxMotorImpulse_set;
extern(C) float function(void* jarg1) btHingeConstraintDoubleData_m_maxMotorImpulse_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintDoubleData_m_lowerLimit_set;
extern(C) float function(void* jarg1) btHingeConstraintDoubleData_m_lowerLimit_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintDoubleData_m_upperLimit_set;
extern(C) float function(void* jarg1) btHingeConstraintDoubleData_m_upperLimit_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintDoubleData_m_limitSoftness_set;
extern(C) float function(void* jarg1) btHingeConstraintDoubleData_m_limitSoftness_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintDoubleData_m_biasFactor_set;
extern(C) float function(void* jarg1) btHingeConstraintDoubleData_m_biasFactor_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintDoubleData_m_relaxationFactor_set;
extern(C) float function(void* jarg1) btHingeConstraintDoubleData_m_relaxationFactor_get;
extern(C) void* function() new_btHingeConstraintDoubleData;
extern(C) void function(void* jarg1) delete_btHingeConstraintDoubleData;
extern(C) void function(void* jarg1, void* jarg2) btHingeConstraintFloatData_m_typeConstraintData_set;
extern(C) void* function(void* jarg1) btHingeConstraintFloatData_m_typeConstraintData_get;
extern(C) void function(void* jarg1, void* jarg2) btHingeConstraintFloatData_m_rbAFrame_set;
extern(C) void* function(void* jarg1) btHingeConstraintFloatData_m_rbAFrame_get;
extern(C) void function(void* jarg1, void* jarg2) btHingeConstraintFloatData_m_rbBFrame_set;
extern(C) void* function(void* jarg1) btHingeConstraintFloatData_m_rbBFrame_get;
extern(C) void function(void* jarg1, int jarg2) btHingeConstraintFloatData_m_useReferenceFrameA_set;
extern(C) int function(void* jarg1) btHingeConstraintFloatData_m_useReferenceFrameA_get;
extern(C) void function(void* jarg1, int jarg2) btHingeConstraintFloatData_m_angularOnly_set;
extern(C) int function(void* jarg1) btHingeConstraintFloatData_m_angularOnly_get;
extern(C) void function(void* jarg1, int jarg2) btHingeConstraintFloatData_m_enableAngularMotor_set;
extern(C) int function(void* jarg1) btHingeConstraintFloatData_m_enableAngularMotor_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintFloatData_m_motorTargetVelocity_set;
extern(C) float function(void* jarg1) btHingeConstraintFloatData_m_motorTargetVelocity_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintFloatData_m_maxMotorImpulse_set;
extern(C) float function(void* jarg1) btHingeConstraintFloatData_m_maxMotorImpulse_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintFloatData_m_lowerLimit_set;
extern(C) float function(void* jarg1) btHingeConstraintFloatData_m_lowerLimit_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintFloatData_m_upperLimit_set;
extern(C) float function(void* jarg1) btHingeConstraintFloatData_m_upperLimit_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintFloatData_m_limitSoftness_set;
extern(C) float function(void* jarg1) btHingeConstraintFloatData_m_limitSoftness_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintFloatData_m_biasFactor_set;
extern(C) float function(void* jarg1) btHingeConstraintFloatData_m_biasFactor_get;
extern(C) void function(void* jarg1, float jarg2) btHingeConstraintFloatData_m_relaxationFactor_set;
extern(C) float function(void* jarg1) btHingeConstraintFloatData_m_relaxationFactor_get;
extern(C) void* function() new_btHingeConstraintFloatData;
extern(C) void function(void* jarg1) delete_btHingeConstraintFloatData;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4) new_btConeTwistConstraint__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) new_btConeTwistConstraint__SWIG_1;
extern(C) void function(void* jarg1) btConeTwistConstraint_buildJacobian;
extern(C) void function(void* jarg1, void* jarg2) btConeTwistConstraint_getInfo1;
extern(C) void function(void* jarg1, void* jarg2) btConeTwistConstraint_getInfo1NonVirtual;
extern(C) void function(void* jarg1, void* jarg2) btConeTwistConstraint_getInfo2;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6) btConeTwistConstraint_getInfo2NonVirtual;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, float jarg4) btConeTwistConstraint_solveConstraintObsolete;
extern(C) void function(void* jarg1, float jarg2) btConeTwistConstraint_updateRHS;
extern(C) void* function(void* jarg1) btConeTwistConstraint_getRigidBodyA;
extern(C) void* function(void* jarg1) btConeTwistConstraint_getRigidBodyB;
extern(C) void function(void* jarg1, uint jarg2) btConeTwistConstraint_setAngularOnly;
extern(C) void function(void* jarg1, int jarg2, float jarg3) btConeTwistConstraint_setLimit__SWIG_0;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) btConeTwistConstraint_setLimit__SWIG_1;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) btConeTwistConstraint_setLimit__SWIG_2;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4, float jarg5) btConeTwistConstraint_setLimit__SWIG_3;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4) btConeTwistConstraint_setLimit__SWIG_4;
extern(C) void* function(void* jarg1) btConeTwistConstraint_getAFrame;
extern(C) void* function(void* jarg1) btConeTwistConstraint_getBFrame;
extern(C) int function(void* jarg1) btConeTwistConstraint_getSolveTwistLimit;
extern(C) int function(void* jarg1) btConeTwistConstraint_getSolveSwingLimit;
extern(C) float function(void* jarg1) btConeTwistConstraint_getTwistLimitSign;
extern(C) void function(void* jarg1) btConeTwistConstraint_calcAngleInfo;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) btConeTwistConstraint_calcAngleInfo2;
extern(C) float function(void* jarg1) btConeTwistConstraint_getSwingSpan1;
extern(C) float function(void* jarg1) btConeTwistConstraint_getSwingSpan2;
extern(C) float function(void* jarg1) btConeTwistConstraint_getTwistSpan;
extern(C) float function(void* jarg1) btConeTwistConstraint_getTwistAngle;
extern(C) uint function(void* jarg1) btConeTwistConstraint_isPastSwingLimit;
extern(C) void function(void* jarg1, float jarg2) btConeTwistConstraint_setDamping;
extern(C) void function(void* jarg1, uint jarg2) btConeTwistConstraint_enableMotor;
extern(C) void function(void* jarg1, float jarg2) btConeTwistConstraint_setMaxMotorImpulse;
extern(C) void function(void* jarg1, float jarg2) btConeTwistConstraint_setMaxMotorImpulseNormalized;
extern(C) float function(void* jarg1) btConeTwistConstraint_getFixThresh;
extern(C) void function(void* jarg1, float jarg2) btConeTwistConstraint_setFixThresh;
extern(C) void function(void* jarg1, void* jarg2) btConeTwistConstraint_setMotorTarget;
extern(C) void function(void* jarg1, void* jarg2) btConeTwistConstraint_setMotorTargetInConstraintSpace;
extern(C) void* function(void* jarg1, float jarg2, float jarg3) btConeTwistConstraint_GetPointForAngle;
extern(C) void function(void* jarg1, int jarg2, float jarg3, int jarg4) btConeTwistConstraint_setParam__SWIG_0;
extern(C) void function(void* jarg1, int jarg2, float jarg3) btConeTwistConstraint_setParam__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btConeTwistConstraint_setFrames;
extern(C) void* function(void* jarg1) btConeTwistConstraint_getFrameOffsetA;
extern(C) void* function(void* jarg1) btConeTwistConstraint_getFrameOffsetB;
extern(C) float function(void* jarg1, int jarg2, int jarg3) btConeTwistConstraint_getParam__SWIG_0;
extern(C) float function(void* jarg1, int jarg2) btConeTwistConstraint_getParam__SWIG_1;
extern(C) int function(void* jarg1) btConeTwistConstraint_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btConeTwistConstraint_serialize;
extern(C) void function(void* jarg1) delete_btConeTwistConstraint;
extern(C) void* function(void* objectRef) btConeTwistConstraint_Upcast;
extern(C) void function(void* jarg1, void* jarg2) btConeTwistConstraintData_m_typeConstraintData_set;
extern(C) void* function(void* jarg1) btConeTwistConstraintData_m_typeConstraintData_get;
extern(C) void function(void* jarg1, void* jarg2) btConeTwistConstraintData_m_rbAFrame_set;
extern(C) void* function(void* jarg1) btConeTwistConstraintData_m_rbAFrame_get;
extern(C) void function(void* jarg1, void* jarg2) btConeTwistConstraintData_m_rbBFrame_set;
extern(C) void* function(void* jarg1) btConeTwistConstraintData_m_rbBFrame_get;
extern(C) void function(void* jarg1, float jarg2) btConeTwistConstraintData_m_swingSpan1_set;
extern(C) float function(void* jarg1) btConeTwistConstraintData_m_swingSpan1_get;
extern(C) void function(void* jarg1, float jarg2) btConeTwistConstraintData_m_swingSpan2_set;
extern(C) float function(void* jarg1) btConeTwistConstraintData_m_swingSpan2_get;
extern(C) void function(void* jarg1, float jarg2) btConeTwistConstraintData_m_twistSpan_set;
extern(C) float function(void* jarg1) btConeTwistConstraintData_m_twistSpan_get;
extern(C) void function(void* jarg1, float jarg2) btConeTwistConstraintData_m_limitSoftness_set;
extern(C) float function(void* jarg1) btConeTwistConstraintData_m_limitSoftness_get;
extern(C) void function(void* jarg1, float jarg2) btConeTwistConstraintData_m_biasFactor_set;
extern(C) float function(void* jarg1) btConeTwistConstraintData_m_biasFactor_get;
extern(C) void function(void* jarg1, float jarg2) btConeTwistConstraintData_m_relaxationFactor_set;
extern(C) float function(void* jarg1) btConeTwistConstraintData_m_relaxationFactor_get;
extern(C) void function(void* jarg1, float jarg2) btConeTwistConstraintData_m_damping_set;
extern(C) float function(void* jarg1) btConeTwistConstraintData_m_damping_get;
extern(C) void function(void* jarg1, const(char)* jarg2) btConeTwistConstraintData_m_pad_set;
extern(C) const(char)* function(void* jarg1) btConeTwistConstraintData_m_pad_get;
extern(C) void* function() new_btConeTwistConstraintData;
extern(C) void function(void* jarg1) delete_btConeTwistConstraintData;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_loLimit_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_loLimit_get;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_hiLimit_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_hiLimit_get;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_targetVelocity_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_targetVelocity_get;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_maxMotorForce_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_maxMotorForce_get;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_maxLimitForce_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_maxLimitForce_get;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_damping_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_damping_get;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_limitSoftness_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_limitSoftness_get;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_normalCFM_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_normalCFM_get;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_stopERP_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_stopERP_get;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_stopCFM_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_stopCFM_get;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_bounce_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_bounce_get;
extern(C) void function(void* jarg1, uint jarg2) btRotationalLimitMotor_m_enableMotor_set;
extern(C) uint function(void* jarg1) btRotationalLimitMotor_m_enableMotor_get;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_currentLimitError_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_currentLimitError_get;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_currentPosition_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_currentPosition_get;
extern(C) void function(void* jarg1, int jarg2) btRotationalLimitMotor_m_currentLimit_set;
extern(C) int function(void* jarg1) btRotationalLimitMotor_m_currentLimit_get;
extern(C) void function(void* jarg1, float jarg2) btRotationalLimitMotor_m_accumulatedImpulse_set;
extern(C) float function(void* jarg1) btRotationalLimitMotor_m_accumulatedImpulse_get;
extern(C) void* function() new_btRotationalLimitMotor__SWIG_0;
extern(C) void* function(void* jarg1) new_btRotationalLimitMotor__SWIG_1;
extern(C) uint function(void* jarg1) btRotationalLimitMotor_isLimited;
extern(C) uint function(void* jarg1) btRotationalLimitMotor_needApplyTorques;
extern(C) int function(void* jarg1, float jarg2) btRotationalLimitMotor_testLimitValue;
extern(C) float function(void* jarg1, float jarg2, void* jarg3, float jarg4, void* jarg5, void* jarg6) btRotationalLimitMotor_solveAngularLimits;
extern(C) void function(void* jarg1) delete_btRotationalLimitMotor;
extern(C) void function(void* jarg1, void* jarg2) btTranslationalLimitMotor_m_lowerLimit_set;
extern(C) void* function(void* jarg1) btTranslationalLimitMotor_m_lowerLimit_get;
extern(C) void function(void* jarg1, void* jarg2) btTranslationalLimitMotor_m_upperLimit_set;
extern(C) void* function(void* jarg1) btTranslationalLimitMotor_m_upperLimit_get;
extern(C) void function(void* jarg1, void* jarg2) btTranslationalLimitMotor_m_accumulatedImpulse_set;
extern(C) void* function(void* jarg1) btTranslationalLimitMotor_m_accumulatedImpulse_get;
extern(C) void function(void* jarg1, float jarg2) btTranslationalLimitMotor_m_limitSoftness_set;
extern(C) float function(void* jarg1) btTranslationalLimitMotor_m_limitSoftness_get;
extern(C) void function(void* jarg1, float jarg2) btTranslationalLimitMotor_m_damping_set;
extern(C) float function(void* jarg1) btTranslationalLimitMotor_m_damping_get;
extern(C) void function(void* jarg1, float jarg2) btTranslationalLimitMotor_m_restitution_set;
extern(C) float function(void* jarg1) btTranslationalLimitMotor_m_restitution_get;
extern(C) void function(void* jarg1, void* jarg2) btTranslationalLimitMotor_m_normalCFM_set;
extern(C) void* function(void* jarg1) btTranslationalLimitMotor_m_normalCFM_get;
extern(C) void function(void* jarg1, void* jarg2) btTranslationalLimitMotor_m_stopERP_set;
extern(C) void* function(void* jarg1) btTranslationalLimitMotor_m_stopERP_get;
extern(C) void function(void* jarg1, void* jarg2) btTranslationalLimitMotor_m_stopCFM_set;
extern(C) void* function(void* jarg1) btTranslationalLimitMotor_m_stopCFM_get;
extern(C) void function(void* jarg1, void* jarg2) btTranslationalLimitMotor_m_enableMotor_set;
extern(C) void* function(void* jarg1) btTranslationalLimitMotor_m_enableMotor_get;
extern(C) void function(void* jarg1, void* jarg2) btTranslationalLimitMotor_m_targetVelocity_set;
extern(C) void* function(void* jarg1) btTranslationalLimitMotor_m_targetVelocity_get;
extern(C) void function(void* jarg1, void* jarg2) btTranslationalLimitMotor_m_maxMotorForce_set;
extern(C) void* function(void* jarg1) btTranslationalLimitMotor_m_maxMotorForce_get;
extern(C) void function(void* jarg1, void* jarg2) btTranslationalLimitMotor_m_currentLimitError_set;
extern(C) void* function(void* jarg1) btTranslationalLimitMotor_m_currentLimitError_get;
extern(C) void function(void* jarg1, void* jarg2) btTranslationalLimitMotor_m_currentLinearDiff_set;
extern(C) void* function(void* jarg1) btTranslationalLimitMotor_m_currentLinearDiff_get;
extern(C) void function(void* jarg1, void* jarg2) btTranslationalLimitMotor_m_currentLimit_set;
extern(C) void* function(void* jarg1) btTranslationalLimitMotor_m_currentLimit_get;
extern(C) void* function() new_btTranslationalLimitMotor__SWIG_0;
extern(C) void* function(void* jarg1) new_btTranslationalLimitMotor__SWIG_1;
extern(C) uint function(void* jarg1, int jarg2) btTranslationalLimitMotor_isLimited;
extern(C) uint function(void* jarg1, int jarg2) btTranslationalLimitMotor_needApplyForce;
extern(C) int function(void* jarg1, int jarg2, float jarg3) btTranslationalLimitMotor_testLimitValue;
extern(C) float function(void* jarg1, float jarg2, float jarg3, void* jarg4, void* jarg5, void* jarg6, void* jarg7, int jarg8, void* jarg9, void* jarg10) btTranslationalLimitMotor_solveLinearAxis;
extern(C) void function(void* jarg1) delete_btTranslationalLimitMotor;
extern(C) int function() BT_6DOF_FLAGS_AXIS_SHIFT_get;
extern(C) void function(void* jarg1, uint jarg2) btGeneric6DofConstraint_m_useSolveConstraintObsolete_set;
extern(C) uint function(void* jarg1) btGeneric6DofConstraint_m_useSolveConstraintObsolete_get;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, uint jarg5) new_btGeneric6DofConstraint__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2, uint jarg3) new_btGeneric6DofConstraint__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btGeneric6DofConstraint_calculateTransforms__SWIG_0;
extern(C) void function(void* jarg1) btGeneric6DofConstraint_calculateTransforms__SWIG_1;
extern(C) void* function(void* jarg1) btGeneric6DofConstraint_getCalculatedTransformA;
extern(C) void* function(void* jarg1) btGeneric6DofConstraint_getCalculatedTransformB;
extern(C) void* function(void* jarg1) btGeneric6DofConstraint_getFrameOffsetA__SWIG_0;
extern(C) void* function(void* jarg1) btGeneric6DofConstraint_getFrameOffsetB__SWIG_0;
extern(C) void function(void* jarg1) btGeneric6DofConstraint_buildJacobian;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraint_getInfo1;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraint_getInfo1NonVirtual;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraint_getInfo2;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6, void* jarg7, void* jarg8) btGeneric6DofConstraint_getInfo2NonVirtual;
extern(C) void function(void* jarg1, float jarg2) btGeneric6DofConstraint_updateRHS;
extern(C) void* function(void* jarg1, int jarg2) btGeneric6DofConstraint_getAxis;
extern(C) float function(void* jarg1, int jarg2) btGeneric6DofConstraint_getAngle;
extern(C) float function(void* jarg1, int jarg2) btGeneric6DofConstraint_getRelativePivotPosition;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btGeneric6DofConstraint_setFrames;
extern(C) uint function(void* jarg1, int jarg2) btGeneric6DofConstraint_testAngularLimitMotor;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraint_setLinearLowerLimit;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraint_getLinearLowerLimit;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraint_setLinearUpperLimit;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraint_getLinearUpperLimit;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraint_setAngularLowerLimit;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraint_getAngularLowerLimit;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraint_setAngularUpperLimit;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraint_getAngularUpperLimit;
extern(C) void* function(void* jarg1, int jarg2) btGeneric6DofConstraint_getRotationalLimitMotor;
extern(C) void* function(void* jarg1) btGeneric6DofConstraint_getTranslationalLimitMotor;
extern(C) void function(void* jarg1, int jarg2, float jarg3, float jarg4) btGeneric6DofConstraint_setLimit;
extern(C) uint function(void* jarg1, int jarg2) btGeneric6DofConstraint_isLimited;
extern(C) void function(void* jarg1) btGeneric6DofConstraint_calcAnchorPos;
extern(C) int function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6, void* jarg7, void* jarg8, void* jarg9, int jarg10, void* jarg11, int jarg12, int jarg13) btGeneric6DofConstraint_get_limit_motor_info2__SWIG_0;
extern(C) int function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6, void* jarg7, void* jarg8, void* jarg9, int jarg10, void* jarg11, int jarg12) btGeneric6DofConstraint_get_limit_motor_info2__SWIG_1;
extern(C) uint function(void* jarg1) btGeneric6DofConstraint_getUseFrameOffset;
extern(C) void function(void* jarg1, uint jarg2) btGeneric6DofConstraint_setUseFrameOffset;
extern(C) void function(void* jarg1, int jarg2, float jarg3, int jarg4) btGeneric6DofConstraint_setParam__SWIG_0;
extern(C) void function(void* jarg1, int jarg2, float jarg3) btGeneric6DofConstraint_setParam__SWIG_1;
extern(C) float function(void* jarg1, int jarg2, int jarg3) btGeneric6DofConstraint_getParam__SWIG_0;
extern(C) float function(void* jarg1, int jarg2) btGeneric6DofConstraint_getParam__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btGeneric6DofConstraint_setAxis;
extern(C) int function(void* jarg1) btGeneric6DofConstraint_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btGeneric6DofConstraint_serialize;
extern(C) void function(void* jarg1) delete_btGeneric6DofConstraint;
extern(C) void* function(void* objectRef) btGeneric6DofConstraint_Upcast;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraintData_m_typeConstraintData_set;
extern(C) void* function(void* jarg1) btGeneric6DofConstraintData_m_typeConstraintData_get;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraintData_m_rbAFrame_set;
extern(C) void* function(void* jarg1) btGeneric6DofConstraintData_m_rbAFrame_get;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraintData_m_rbBFrame_set;
extern(C) void* function(void* jarg1) btGeneric6DofConstraintData_m_rbBFrame_get;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraintData_m_linearUpperLimit_set;
extern(C) void* function(void* jarg1) btGeneric6DofConstraintData_m_linearUpperLimit_get;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraintData_m_linearLowerLimit_set;
extern(C) void* function(void* jarg1) btGeneric6DofConstraintData_m_linearLowerLimit_get;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraintData_m_angularUpperLimit_set;
extern(C) void* function(void* jarg1) btGeneric6DofConstraintData_m_angularUpperLimit_get;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofConstraintData_m_angularLowerLimit_set;
extern(C) void* function(void* jarg1) btGeneric6DofConstraintData_m_angularLowerLimit_get;
extern(C) void function(void* jarg1, int jarg2) btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set;
extern(C) int function(void* jarg1) btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get;
extern(C) void function(void* jarg1, int jarg2) btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set;
extern(C) int function(void* jarg1) btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get;
extern(C) void* function() new_btGeneric6DofConstraintData;
extern(C) void function(void* jarg1) delete_btGeneric6DofConstraintData;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, uint jarg5) new_btSliderConstraint__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2, uint jarg3) new_btSliderConstraint__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2) btSliderConstraint_getInfo1;
extern(C) void function(void* jarg1, void* jarg2) btSliderConstraint_getInfo1NonVirtual;
extern(C) void function(void* jarg1, void* jarg2) btSliderConstraint_getInfo2;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6, float jarg7, float jarg8) btSliderConstraint_getInfo2NonVirtual;
extern(C) void* function(void* jarg1) btSliderConstraint_getRigidBodyA;
extern(C) void* function(void* jarg1) btSliderConstraint_getRigidBodyB;
extern(C) void* function(void* jarg1) btSliderConstraint_getCalculatedTransformA;
extern(C) void* function(void* jarg1) btSliderConstraint_getCalculatedTransformB;
extern(C) void* function(void* jarg1) btSliderConstraint_getFrameOffsetA__SWIG_0;
extern(C) void* function(void* jarg1) btSliderConstraint_getFrameOffsetB__SWIG_0;
extern(C) float function(void* jarg1) btSliderConstraint_getLowerLinLimit;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setLowerLinLimit;
extern(C) float function(void* jarg1) btSliderConstraint_getUpperLinLimit;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setUpperLinLimit;
extern(C) float function(void* jarg1) btSliderConstraint_getLowerAngLimit;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setLowerAngLimit;
extern(C) float function(void* jarg1) btSliderConstraint_getUpperAngLimit;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setUpperAngLimit;
extern(C) uint function(void* jarg1) btSliderConstraint_getUseLinearReferenceFrameA;
extern(C) float function(void* jarg1) btSliderConstraint_getSoftnessDirLin;
extern(C) float function(void* jarg1) btSliderConstraint_getRestitutionDirLin;
extern(C) float function(void* jarg1) btSliderConstraint_getDampingDirLin;
extern(C) float function(void* jarg1) btSliderConstraint_getSoftnessDirAng;
extern(C) float function(void* jarg1) btSliderConstraint_getRestitutionDirAng;
extern(C) float function(void* jarg1) btSliderConstraint_getDampingDirAng;
extern(C) float function(void* jarg1) btSliderConstraint_getSoftnessLimLin;
extern(C) float function(void* jarg1) btSliderConstraint_getRestitutionLimLin;
extern(C) float function(void* jarg1) btSliderConstraint_getDampingLimLin;
extern(C) float function(void* jarg1) btSliderConstraint_getSoftnessLimAng;
extern(C) float function(void* jarg1) btSliderConstraint_getRestitutionLimAng;
extern(C) float function(void* jarg1) btSliderConstraint_getDampingLimAng;
extern(C) float function(void* jarg1) btSliderConstraint_getSoftnessOrthoLin;
extern(C) float function(void* jarg1) btSliderConstraint_getRestitutionOrthoLin;
extern(C) float function(void* jarg1) btSliderConstraint_getDampingOrthoLin;
extern(C) float function(void* jarg1) btSliderConstraint_getSoftnessOrthoAng;
extern(C) float function(void* jarg1) btSliderConstraint_getRestitutionOrthoAng;
extern(C) float function(void* jarg1) btSliderConstraint_getDampingOrthoAng;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setSoftnessDirLin;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setRestitutionDirLin;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setDampingDirLin;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setSoftnessDirAng;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setRestitutionDirAng;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setDampingDirAng;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setSoftnessLimLin;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setRestitutionLimLin;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setDampingLimLin;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setSoftnessLimAng;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setRestitutionLimAng;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setDampingLimAng;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setSoftnessOrthoLin;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setRestitutionOrthoLin;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setDampingOrthoLin;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setSoftnessOrthoAng;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setRestitutionOrthoAng;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setDampingOrthoAng;
extern(C) void function(void* jarg1, uint jarg2) btSliderConstraint_setPoweredLinMotor;
extern(C) uint function(void* jarg1) btSliderConstraint_getPoweredLinMotor;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setTargetLinMotorVelocity;
extern(C) float function(void* jarg1) btSliderConstraint_getTargetLinMotorVelocity;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setMaxLinMotorForce;
extern(C) float function(void* jarg1) btSliderConstraint_getMaxLinMotorForce;
extern(C) void function(void* jarg1, uint jarg2) btSliderConstraint_setPoweredAngMotor;
extern(C) uint function(void* jarg1) btSliderConstraint_getPoweredAngMotor;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setTargetAngMotorVelocity;
extern(C) float function(void* jarg1) btSliderConstraint_getTargetAngMotorVelocity;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraint_setMaxAngMotorForce;
extern(C) float function(void* jarg1) btSliderConstraint_getMaxAngMotorForce;
extern(C) float function(void* jarg1) btSliderConstraint_getLinearPos;
extern(C) float function(void* jarg1) btSliderConstraint_getAngularPos;
extern(C) uint function(void* jarg1) btSliderConstraint_getSolveLinLimit;
extern(C) float function(void* jarg1) btSliderConstraint_getLinDepth;
extern(C) uint function(void* jarg1) btSliderConstraint_getSolveAngLimit;
extern(C) float function(void* jarg1) btSliderConstraint_getAngDepth;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btSliderConstraint_calculateTransforms;
extern(C) void function(void* jarg1) btSliderConstraint_testLinLimits;
extern(C) void function(void* jarg1) btSliderConstraint_testAngLimits;
extern(C) void* function(void* jarg1) btSliderConstraint_getAncorInA;
extern(C) void* function(void* jarg1) btSliderConstraint_getAncorInB;
extern(C) uint function(void* jarg1) btSliderConstraint_getUseFrameOffset;
extern(C) void function(void* jarg1, uint jarg2) btSliderConstraint_setUseFrameOffset;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btSliderConstraint_setFrames;
extern(C) void function(void* jarg1, int jarg2, float jarg3, int jarg4) btSliderConstraint_setParam__SWIG_0;
extern(C) void function(void* jarg1, int jarg2, float jarg3) btSliderConstraint_setParam__SWIG_1;
extern(C) float function(void* jarg1, int jarg2, int jarg3) btSliderConstraint_getParam__SWIG_0;
extern(C) float function(void* jarg1, int jarg2) btSliderConstraint_getParam__SWIG_1;
extern(C) int function(void* jarg1) btSliderConstraint_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btSliderConstraint_serialize;
extern(C) void function(void* jarg1) delete_btSliderConstraint;
extern(C) void* function(void* objectRef) btSliderConstraint_Upcast;
extern(C) void function(void* jarg1, void* jarg2) btSliderConstraintData_m_typeConstraintData_set;
extern(C) void* function(void* jarg1) btSliderConstraintData_m_typeConstraintData_get;
extern(C) void function(void* jarg1, void* jarg2) btSliderConstraintData_m_rbAFrame_set;
extern(C) void* function(void* jarg1) btSliderConstraintData_m_rbAFrame_get;
extern(C) void function(void* jarg1, void* jarg2) btSliderConstraintData_m_rbBFrame_set;
extern(C) void* function(void* jarg1) btSliderConstraintData_m_rbBFrame_get;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraintData_m_linearUpperLimit_set;
extern(C) float function(void* jarg1) btSliderConstraintData_m_linearUpperLimit_get;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraintData_m_linearLowerLimit_set;
extern(C) float function(void* jarg1) btSliderConstraintData_m_linearLowerLimit_get;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraintData_m_angularUpperLimit_set;
extern(C) float function(void* jarg1) btSliderConstraintData_m_angularUpperLimit_get;
extern(C) void function(void* jarg1, float jarg2) btSliderConstraintData_m_angularLowerLimit_set;
extern(C) float function(void* jarg1) btSliderConstraintData_m_angularLowerLimit_get;
extern(C) void function(void* jarg1, int jarg2) btSliderConstraintData_m_useLinearReferenceFrameA_set;
extern(C) int function(void* jarg1) btSliderConstraintData_m_useLinearReferenceFrameA_get;
extern(C) void function(void* jarg1, int jarg2) btSliderConstraintData_m_useOffsetForConstraintFrame_set;
extern(C) int function(void* jarg1) btSliderConstraintData_m_useOffsetForConstraintFrame_get;
extern(C) void* function() new_btSliderConstraintData;
extern(C) void function(void* jarg1) delete_btSliderConstraintData;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, uint jarg5) new_btGeneric6DofSpringConstraint;
extern(C) void function(void* jarg1, int jarg2, uint jarg3) btGeneric6DofSpringConstraint_enableSpring;
extern(C) void function(void* jarg1, int jarg2, float jarg3) btGeneric6DofSpringConstraint_setStiffness;
extern(C) void function(void* jarg1, int jarg2, float jarg3) btGeneric6DofSpringConstraint_setDamping;
extern(C) void function(void* jarg1) btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_0;
extern(C) void function(void* jarg1, int jarg2) btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_1;
extern(C) void function(void* jarg1, int jarg2, float jarg3) btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_2;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btGeneric6DofSpringConstraint_setAxis;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofSpringConstraint_getInfo2;
extern(C) int function(void* jarg1) btGeneric6DofSpringConstraint_calculateSerializeBufferSize;
extern(C) const(char)* function(void* jarg1, void* jarg2, void* jarg3) btGeneric6DofSpringConstraint_serialize;
extern(C) void function(void* jarg1) delete_btGeneric6DofSpringConstraint;
extern(C) void* function(void* objectRef) btGeneric6DofSpringConstraint_Upcast;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofSpringConstraintData_m_6dofData_set;
extern(C) void* function(void* jarg1) btGeneric6DofSpringConstraintData_m_6dofData_get;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofSpringConstraintData_m_springEnabled_set;
extern(C) void* function(void* jarg1) btGeneric6DofSpringConstraintData_m_springEnabled_get;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofSpringConstraintData_m_equilibriumPoint_set;
extern(C) void* function(void* jarg1) btGeneric6DofSpringConstraintData_m_equilibriumPoint_get;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofSpringConstraintData_m_springStiffness_set;
extern(C) void* function(void* jarg1) btGeneric6DofSpringConstraintData_m_springStiffness_get;
extern(C) void function(void* jarg1, void* jarg2) btGeneric6DofSpringConstraintData_m_springDamping_set;
extern(C) void* function(void* jarg1) btGeneric6DofSpringConstraintData_m_springDamping_get;
extern(C) void* function() new_btGeneric6DofSpringConstraintData;
extern(C) void function(void* jarg1) delete_btGeneric6DofSpringConstraintData;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) new_btUniversalConstraint;
extern(C) void* function(void* jarg1) btUniversalConstraint_getAnchor;
extern(C) void* function(void* jarg1) btUniversalConstraint_getAnchor2;
extern(C) void* function(void* jarg1) btUniversalConstraint_getAxis1;
extern(C) void* function(void* jarg1) btUniversalConstraint_getAxis2;
extern(C) float function(void* jarg1) btUniversalConstraint_getAngle1;
extern(C) float function(void* jarg1) btUniversalConstraint_getAngle2;
extern(C) void function(void* jarg1, float jarg2, float jarg3) btUniversalConstraint_setUpperLimit;
extern(C) void function(void* jarg1, float jarg2, float jarg3) btUniversalConstraint_setLowerLimit;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) btUniversalConstraint_setAxis;
extern(C) void function(void* jarg1) delete_btUniversalConstraint;
extern(C) void* function(void* objectRef) btUniversalConstraint_Upcast;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4, void* jarg5) new_btHinge2Constraint;
extern(C) void* function(void* jarg1) btHinge2Constraint_getAnchor;
extern(C) void* function(void* jarg1) btHinge2Constraint_getAnchor2;
extern(C) void* function(void* jarg1) btHinge2Constraint_getAxis1;
extern(C) void* function(void* jarg1) btHinge2Constraint_getAxis2;
extern(C) float function(void* jarg1) btHinge2Constraint_getAngle1;
extern(C) float function(void* jarg1) btHinge2Constraint_getAngle2;
extern(C) void function(void* jarg1, float jarg2) btHinge2Constraint_setUpperLimit;
extern(C) void function(void* jarg1, float jarg2) btHinge2Constraint_setLowerLimit;
extern(C) void function(void* jarg1) delete_btHinge2Constraint;
extern(C) void* function(void* objectRef) btHinge2Constraint_Upcast;
extern(C) void* function() new_btSequentialImpulseConstraintSolver;
extern(C) void function(void* jarg1) delete_btSequentialImpulseConstraintSolver;
extern(C) float function(void* jarg1, void* jarg2, int jarg3, void* jarg4, int jarg5, void* jarg6, int jarg7, void* jarg8, void* jarg9, void* jarg10, void* jarg11) btSequentialImpulseConstraintSolver_solveGroup;
extern(C) void function(void* jarg1) btSequentialImpulseConstraintSolver_reset;
extern(C) uint function(void* jarg1) btSequentialImpulseConstraintSolver_btRand2;
extern(C) int function(void* jarg1, int jarg2) btSequentialImpulseConstraintSolver_btRandInt2;
extern(C) void function(void* jarg1, uint jarg2) btSequentialImpulseConstraintSolver_setRandSeed;
extern(C) uint function(void* jarg1) btSequentialImpulseConstraintSolver_getRandSeed;
extern(C) void* function(void* objectRef) btSequentialImpulseConstraintSolver_Upcast;
