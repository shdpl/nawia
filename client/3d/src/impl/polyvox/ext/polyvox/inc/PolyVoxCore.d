/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module PolyVoxCore;

static import PolyVoxCore_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.algorithm;
static import std.exception;
static import std.range;
static import std.traits;

static import std.algorithm;
static import std.exception;
static import std.range;
static import std.traits;

static import std.algorithm;
static import std.exception;
static import std.range;
static import std.traits;

static import std.algorithm;
static import std.exception;
static import std.range;
static import std.traits;

static import std.algorithm;
static import std.exception;
static import std.range;
static import std.traits;


class Material8 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Material8 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Material8(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(PolyVoxCore_im.new_Material8__SWIG_0(), true);
  }

  public this(ubyte uMaterial) {
    this(PolyVoxCore_im.new_Material8__SWIG_1(uMaterial), true);
  }

  public bool swigOpEquals(Material8 rhs) const {
    bool ret = PolyVoxCore_im.Material8_swigOpEquals(cast(void*)swigCPtr, Material8.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool notEqualTo(Material8 rhs) const {
    bool ret = PolyVoxCore_im.Material8_notEqualTo(cast(void*)swigCPtr, Material8.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public ubyte getDensity() const {
    auto ret = PolyVoxCore_im.Material8_getDensity(cast(void*)swigCPtr);
    return ret;
  }

  public ubyte getMaterial() const {
    auto ret = PolyVoxCore_im.Material8_getMaterial(cast(void*)swigCPtr);
    return ret;
  }

  public void setDensity(ubyte arg0) {
    PolyVoxCore_im.Material8_setDensity(cast(void*)swigCPtr, arg0);
  }

  public void setMaterial(ubyte uMaterial) {
    PolyVoxCore_im.Material8_setMaterial(cast(void*)swigCPtr, uMaterial);
  }

  public static ubyte getMaxDensity() {
    auto ret = PolyVoxCore_im.Material8_getMaxDensity();
    return ret;
  }

  public static ubyte getMinDensity() {
    auto ret = PolyVoxCore_im.Material8_getMinDensity();
    return ret;
  }

  public static ubyte getThreshold() {
    auto ret = PolyVoxCore_im.Material8_getThreshold();
    return ret;
  }
}

class Material16 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Material16 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Material16(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(PolyVoxCore_im.new_Material16__SWIG_0(), true);
  }

  public this(ushort uMaterial) {
    this(PolyVoxCore_im.new_Material16__SWIG_1(uMaterial), true);
  }

  public bool swigOpEquals(Material16 rhs) const {
    bool ret = PolyVoxCore_im.Material16_swigOpEquals(cast(void*)swigCPtr, Material16.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool notEqualTo(Material16 rhs) const {
    bool ret = PolyVoxCore_im.Material16_notEqualTo(cast(void*)swigCPtr, Material16.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public ushort getDensity() const {
    auto ret = PolyVoxCore_im.Material16_getDensity(cast(void*)swigCPtr);
    return ret;
  }

  public ushort getMaterial() const {
    auto ret = PolyVoxCore_im.Material16_getMaterial(cast(void*)swigCPtr);
    return ret;
  }

  public void setDensity(ushort arg0) {
    PolyVoxCore_im.Material16_setDensity(cast(void*)swigCPtr, arg0);
  }

  public void setMaterial(ushort uMaterial) {
    PolyVoxCore_im.Material16_setMaterial(cast(void*)swigCPtr, uMaterial);
  }

  public static ushort getMaxDensity() {
    auto ret = PolyVoxCore_im.Material16_getMaxDensity();
    return ret;
  }

  public static ushort getMinDensity() {
    auto ret = PolyVoxCore_im.Material16_getMinDensity();
    return ret;
  }

  public static ushort getThreshold() {
    auto ret = PolyVoxCore_im.Material16_getThreshold();
    return ret;
  }
}

class Material32 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Material32 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Material32(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(PolyVoxCore_im.new_Material32__SWIG_0(), true);
  }

  public this(uint uMaterial) {
    this(PolyVoxCore_im.new_Material32__SWIG_1(uMaterial), true);
  }

  public bool swigOpEquals(Material32 rhs) const {
    bool ret = PolyVoxCore_im.Material32_swigOpEquals(cast(void*)swigCPtr, Material32.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool notEqualTo(Material32 rhs) const {
    bool ret = PolyVoxCore_im.Material32_notEqualTo(cast(void*)swigCPtr, Material32.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public uint getDensity() const {
    auto ret = PolyVoxCore_im.Material32_getDensity(cast(void*)swigCPtr);
    return ret;
  }

  public uint getMaterial() const {
    auto ret = PolyVoxCore_im.Material32_getMaterial(cast(void*)swigCPtr);
    return ret;
  }

  public void setDensity(uint arg0) {
    PolyVoxCore_im.Material32_setDensity(cast(void*)swigCPtr, arg0);
  }

  public void setMaterial(uint uMaterial) {
    PolyVoxCore_im.Material32_setMaterial(cast(void*)swigCPtr, uMaterial);
  }

  public static uint getMaxDensity() {
    auto ret = PolyVoxCore_im.Material32_getMaxDensity();
    return ret;
  }

  public static uint getMinDensity() {
    auto ret = PolyVoxCore_im.Material32_getMinDensity();
    return ret;
  }

  public static uint getThreshold() {
    auto ret = PolyVoxCore_im.Material32_getThreshold();
    return ret;
  }
}

class Density8 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Density8 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Density8(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(PolyVoxCore_im.new_Density8__SWIG_0(), true);
  }

  public this(ubyte uDensity) {
    this(PolyVoxCore_im.new_Density8__SWIG_1(uDensity), true);
  }

  public bool swigOpEquals(Density8 rhs) const {
    bool ret = PolyVoxCore_im.Density8_swigOpEquals(cast(void*)swigCPtr, Density8.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool notEqualTo(Density8 rhs) const {
    bool ret = PolyVoxCore_im.Density8_notEqualTo(cast(void*)swigCPtr, Density8.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public ubyte getDensity() const {
    auto ret = PolyVoxCore_im.Density8_getDensity(cast(void*)swigCPtr);
    return ret;
  }

  public ubyte getMaterial() const {
    auto ret = PolyVoxCore_im.Density8_getMaterial(cast(void*)swigCPtr);
    return ret;
  }

  public void setDensity(ubyte uDensity) {
    PolyVoxCore_im.Density8_setDensity(cast(void*)swigCPtr, uDensity);
  }

  public void setMaterial(ubyte uMaterial) {
    PolyVoxCore_im.Density8_setMaterial(cast(void*)swigCPtr, uMaterial);
  }

  public static ubyte getMaxDensity() {
    auto ret = PolyVoxCore_im.Density8_getMaxDensity();
    return ret;
  }

  public static ubyte getMinDensity() {
    auto ret = PolyVoxCore_im.Density8_getMinDensity();
    return ret;
  }

  public static ubyte getThreshold() {
    auto ret = PolyVoxCore_im.Density8_getThreshold();
    return ret;
  }
}

class Density16 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Density16 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Density16(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(PolyVoxCore_im.new_Density16__SWIG_0(), true);
  }

  public this(ushort uDensity) {
    this(PolyVoxCore_im.new_Density16__SWIG_1(uDensity), true);
  }

  public bool swigOpEquals(Density16 rhs) const {
    bool ret = PolyVoxCore_im.Density16_swigOpEquals(cast(void*)swigCPtr, Density16.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool notEqualTo(Density16 rhs) const {
    bool ret = PolyVoxCore_im.Density16_notEqualTo(cast(void*)swigCPtr, Density16.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public ushort getDensity() const {
    auto ret = PolyVoxCore_im.Density16_getDensity(cast(void*)swigCPtr);
    return ret;
  }

  public ushort getMaterial() const {
    auto ret = PolyVoxCore_im.Density16_getMaterial(cast(void*)swigCPtr);
    return ret;
  }

  public void setDensity(ushort uDensity) {
    PolyVoxCore_im.Density16_setDensity(cast(void*)swigCPtr, uDensity);
  }

  public void setMaterial(ushort uMaterial) {
    PolyVoxCore_im.Density16_setMaterial(cast(void*)swigCPtr, uMaterial);
  }

  public static ushort getMaxDensity() {
    auto ret = PolyVoxCore_im.Density16_getMaxDensity();
    return ret;
  }

  public static ushort getMinDensity() {
    auto ret = PolyVoxCore_im.Density16_getMinDensity();
    return ret;
  }

  public static ushort getThreshold() {
    auto ret = PolyVoxCore_im.Density16_getThreshold();
    return ret;
  }
}

class Density32 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Density32 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Density32(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(PolyVoxCore_im.new_Density32__SWIG_0(), true);
  }

  public this(uint uDensity) {
    this(PolyVoxCore_im.new_Density32__SWIG_1(uDensity), true);
  }

  public bool swigOpEquals(Density32 rhs) const {
    bool ret = PolyVoxCore_im.Density32_swigOpEquals(cast(void*)swigCPtr, Density32.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool notEqualTo(Density32 rhs) const {
    bool ret = PolyVoxCore_im.Density32_notEqualTo(cast(void*)swigCPtr, Density32.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public uint getDensity() const {
    auto ret = PolyVoxCore_im.Density32_getDensity(cast(void*)swigCPtr);
    return ret;
  }

  public uint getMaterial() const {
    auto ret = PolyVoxCore_im.Density32_getMaterial(cast(void*)swigCPtr);
    return ret;
  }

  public void setDensity(uint uDensity) {
    PolyVoxCore_im.Density32_setDensity(cast(void*)swigCPtr, uDensity);
  }

  public void setMaterial(uint uMaterial) {
    PolyVoxCore_im.Density32_setMaterial(cast(void*)swigCPtr, uMaterial);
  }

  public static uint getMaxDensity() {
    auto ret = PolyVoxCore_im.Density32_getMaxDensity();
    return ret;
  }

  public static uint getMinDensity() {
    auto ret = PolyVoxCore_im.Density32_getMinDensity();
    return ret;
  }

  public static uint getThreshold() {
    auto ret = PolyVoxCore_im.Density32_getThreshold();
    return ret;
  }
}

class MaterialDensityPair44 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(MaterialDensityPair44 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_MaterialDensityPair44(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(PolyVoxCore_im.new_MaterialDensityPair44__SWIG_0(), true);
  }

  public this(ubyte uMaterial, ubyte uDensity) {
    this(PolyVoxCore_im.new_MaterialDensityPair44__SWIG_1(uMaterial, uDensity), true);
  }

  public bool swigOpEquals(MaterialDensityPair44 rhs) const {
    bool ret = PolyVoxCore_im.MaterialDensityPair44_swigOpEquals(cast(void*)swigCPtr, MaterialDensityPair44.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool notEqualTo(MaterialDensityPair44 rhs) const {
    bool ret = PolyVoxCore_im.MaterialDensityPair44_notEqualTo(cast(void*)swigCPtr, MaterialDensityPair44.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public ubyte getDensity() const {
    auto ret = PolyVoxCore_im.MaterialDensityPair44_getDensity(cast(void*)swigCPtr);
    return ret;
  }

  public ubyte getMaterial() const {
    auto ret = PolyVoxCore_im.MaterialDensityPair44_getMaterial(cast(void*)swigCPtr);
    return ret;
  }

  public void setDensity(ubyte uDensity) {
    PolyVoxCore_im.MaterialDensityPair44_setDensity(cast(void*)swigCPtr, uDensity);
  }

  public void setMaterial(ubyte uMaterial) {
    PolyVoxCore_im.MaterialDensityPair44_setMaterial(cast(void*)swigCPtr, uMaterial);
  }

  public static ubyte getMaxDensity() {
    auto ret = PolyVoxCore_im.MaterialDensityPair44_getMaxDensity();
    return ret;
  }

  public static ubyte getMinDensity() {
    auto ret = PolyVoxCore_im.MaterialDensityPair44_getMinDensity();
    return ret;
  }

  public static ubyte getThreshold() {
    auto ret = PolyVoxCore_im.MaterialDensityPair44_getThreshold();
    return ret;
  }
}

class MaterialDensityPair1616 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(MaterialDensityPair1616 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_MaterialDensityPair1616(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(PolyVoxCore_im.new_MaterialDensityPair1616__SWIG_0(), true);
  }

  public this(uint uMaterial, uint uDensity) {
    this(PolyVoxCore_im.new_MaterialDensityPair1616__SWIG_1(uMaterial, uDensity), true);
  }

  public bool swigOpEquals(MaterialDensityPair1616 rhs) const {
    bool ret = PolyVoxCore_im.MaterialDensityPair1616_swigOpEquals(cast(void*)swigCPtr, MaterialDensityPair1616.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool notEqualTo(MaterialDensityPair1616 rhs) const {
    bool ret = PolyVoxCore_im.MaterialDensityPair1616_notEqualTo(cast(void*)swigCPtr, MaterialDensityPair1616.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public uint getDensity() const {
    auto ret = PolyVoxCore_im.MaterialDensityPair1616_getDensity(cast(void*)swigCPtr);
    return ret;
  }

  public uint getMaterial() const {
    auto ret = PolyVoxCore_im.MaterialDensityPair1616_getMaterial(cast(void*)swigCPtr);
    return ret;
  }

  public void setDensity(uint uDensity) {
    PolyVoxCore_im.MaterialDensityPair1616_setDensity(cast(void*)swigCPtr, uDensity);
  }

  public void setMaterial(uint uMaterial) {
    PolyVoxCore_im.MaterialDensityPair1616_setMaterial(cast(void*)swigCPtr, uMaterial);
  }

  public static uint getMaxDensity() {
    auto ret = PolyVoxCore_im.MaterialDensityPair1616_getMaxDensity();
    return ret;
  }

  public static uint getMinDensity() {
    auto ret = PolyVoxCore_im.MaterialDensityPair1616_getMinDensity();
    return ret;
  }

  public static uint getThreshold() {
    auto ret = PolyVoxCore_im.MaterialDensityPair1616_getThreshold();
    return ret;
  }
}

class Vector3DFloat {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Vector3DFloat obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Vector3DFloat(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(float x, float y) {
    this(PolyVoxCore_im.new_Vector3DFloat__SWIG_0(x, y), true);
  }

  public this(float x, float y, float z) {
    this(PolyVoxCore_im.new_Vector3DFloat__SWIG_1(x, y, z), true);
  }

  public this(float x, float y, float z, float w) {
    this(PolyVoxCore_im.new_Vector3DFloat__SWIG_2(x, y, z, w), true);
  }

  public this() {
    this(PolyVoxCore_im.new_Vector3DFloat__SWIG_3(), true);
  }

  public this(Vector3DFloat vector) {
    this(PolyVoxCore_im.new_Vector3DFloat__SWIG_4(Vector3DFloat.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public Vector3DFloat assignment(Vector3DFloat rhs) {
    Vector3DFloat ret = new Vector3DFloat(PolyVoxCore_im.Vector3DFloat_assignment(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpEquals(Vector3DFloat rhs) const {
    bool ret = PolyVoxCore_im.Vector3DFloat_swigOpEquals(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpLt(Vector3DFloat rhs) const {
    bool ret = PolyVoxCore_im.Vector3DFloat_swigOpLt(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DFloat swigOpAddAssign(Vector3DFloat rhs) {
    Vector3DFloat ret = new Vector3DFloat(PolyVoxCore_im.Vector3DFloat_swigOpAddAssign(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DFloat swigOpSubAssign(Vector3DFloat rhs) {
    Vector3DFloat ret = new Vector3DFloat(PolyVoxCore_im.Vector3DFloat_swigOpSubAssign(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DFloat swigOpMulAssign(Vector3DFloat rhs) {
    Vector3DFloat ret = new Vector3DFloat(PolyVoxCore_im.Vector3DFloat_swigOpMulAssign__SWIG_0(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DFloat swigOpDivAssign(Vector3DFloat rhs) {
    Vector3DFloat ret = new Vector3DFloat(PolyVoxCore_im.Vector3DFloat_swigOpDivAssign__SWIG_0(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DFloat swigOpMulAssign(float rhs) {
    Vector3DFloat ret = new Vector3DFloat(PolyVoxCore_im.Vector3DFloat_swigOpMulAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public Vector3DFloat swigOpDivAssign(float rhs) {
    Vector3DFloat ret = new Vector3DFloat(PolyVoxCore_im.Vector3DFloat_swigOpDivAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public float getElement(uint index) const {
    auto ret = PolyVoxCore_im.Vector3DFloat_getElement(cast(void*)swigCPtr, index);
    return ret;
  }

  public float getX() const {
    auto ret = PolyVoxCore_im.Vector3DFloat_getX(cast(void*)swigCPtr);
    return ret;
  }

  public float getY() const {
    auto ret = PolyVoxCore_im.Vector3DFloat_getY(cast(void*)swigCPtr);
    return ret;
  }

  public float getZ() const {
    auto ret = PolyVoxCore_im.Vector3DFloat_getZ(cast(void*)swigCPtr);
    return ret;
  }

  public float getW() const {
    auto ret = PolyVoxCore_im.Vector3DFloat_getW(cast(void*)swigCPtr);
    return ret;
  }

  public void setElement(uint index, float tValue) {
    PolyVoxCore_im.Vector3DFloat_setElement(cast(void*)swigCPtr, index, tValue);
  }

  public void setElements(float x, float y) {
    PolyVoxCore_im.Vector3DFloat_setElements__SWIG_0(cast(void*)swigCPtr, x, y);
  }

  public void setElements(float x, float y, float z) {
    PolyVoxCore_im.Vector3DFloat_setElements__SWIG_1(cast(void*)swigCPtr, x, y, z);
  }

  public void setElements(float x, float y, float z, float w) {
    PolyVoxCore_im.Vector3DFloat_setElements__SWIG_2(cast(void*)swigCPtr, x, y, z, w);
  }

  public void setX(float tX) {
    PolyVoxCore_im.Vector3DFloat_setX(cast(void*)swigCPtr, tX);
  }

  public void setY(float tY) {
    PolyVoxCore_im.Vector3DFloat_setY(cast(void*)swigCPtr, tY);
  }

  public void setZ(float tZ) {
    PolyVoxCore_im.Vector3DFloat_setZ(cast(void*)swigCPtr, tZ);
  }

  public void setW(float tW) {
    PolyVoxCore_im.Vector3DFloat_setW(cast(void*)swigCPtr, tW);
  }

  public double length() const {
    auto ret = PolyVoxCore_im.Vector3DFloat_length(cast(void*)swigCPtr);
    return ret;
  }

  public double lengthSquared() const {
    auto ret = PolyVoxCore_im.Vector3DFloat_lengthSquared(cast(void*)swigCPtr);
    return ret;
  }

  public double angleTo(Vector3DFloat vector) const {
    auto ret = PolyVoxCore_im.Vector3DFloat_angleTo(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(vector));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DFloat cross(Vector3DFloat vector) const {
    Vector3DFloat ret = new Vector3DFloat(PolyVoxCore_im.Vector3DFloat_cross(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public float dot(Vector3DFloat rhs) const {
    auto ret = PolyVoxCore_im.Vector3DFloat_dot(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(rhs));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void normalise() {
    PolyVoxCore_im.Vector3DFloat_normalise(cast(void*)swigCPtr);
  }
}

class Vector3DDouble {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Vector3DDouble obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Vector3DDouble(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(double x, double y) {
    this(PolyVoxCore_im.new_Vector3DDouble__SWIG_0(x, y), true);
  }

  public this(double x, double y, double z) {
    this(PolyVoxCore_im.new_Vector3DDouble__SWIG_1(x, y, z), true);
  }

  public this(double x, double y, double z, double w) {
    this(PolyVoxCore_im.new_Vector3DDouble__SWIG_2(x, y, z, w), true);
  }

  public this() {
    this(PolyVoxCore_im.new_Vector3DDouble__SWIG_3(), true);
  }

  public this(Vector3DDouble vector) {
    this(PolyVoxCore_im.new_Vector3DDouble__SWIG_4(Vector3DDouble.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public Vector3DDouble assignment(Vector3DDouble rhs) {
    Vector3DDouble ret = new Vector3DDouble(PolyVoxCore_im.Vector3DDouble_assignment(cast(void*)swigCPtr, Vector3DDouble.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpEquals(Vector3DDouble rhs) const {
    bool ret = PolyVoxCore_im.Vector3DDouble_swigOpEquals(cast(void*)swigCPtr, Vector3DDouble.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpLt(Vector3DDouble rhs) const {
    bool ret = PolyVoxCore_im.Vector3DDouble_swigOpLt(cast(void*)swigCPtr, Vector3DDouble.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DDouble swigOpAddAssign(Vector3DDouble rhs) {
    Vector3DDouble ret = new Vector3DDouble(PolyVoxCore_im.Vector3DDouble_swigOpAddAssign(cast(void*)swigCPtr, Vector3DDouble.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DDouble swigOpSubAssign(Vector3DDouble rhs) {
    Vector3DDouble ret = new Vector3DDouble(PolyVoxCore_im.Vector3DDouble_swigOpSubAssign(cast(void*)swigCPtr, Vector3DDouble.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DDouble swigOpMulAssign(Vector3DDouble rhs) {
    Vector3DDouble ret = new Vector3DDouble(PolyVoxCore_im.Vector3DDouble_swigOpMulAssign__SWIG_0(cast(void*)swigCPtr, Vector3DDouble.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DDouble swigOpDivAssign(Vector3DDouble rhs) {
    Vector3DDouble ret = new Vector3DDouble(PolyVoxCore_im.Vector3DDouble_swigOpDivAssign__SWIG_0(cast(void*)swigCPtr, Vector3DDouble.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DDouble swigOpMulAssign(double rhs) {
    Vector3DDouble ret = new Vector3DDouble(PolyVoxCore_im.Vector3DDouble_swigOpMulAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public Vector3DDouble swigOpDivAssign(double rhs) {
    Vector3DDouble ret = new Vector3DDouble(PolyVoxCore_im.Vector3DDouble_swigOpDivAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public double getElement(uint index) const {
    auto ret = PolyVoxCore_im.Vector3DDouble_getElement(cast(void*)swigCPtr, index);
    return ret;
  }

  public double getX() const {
    auto ret = PolyVoxCore_im.Vector3DDouble_getX(cast(void*)swigCPtr);
    return ret;
  }

  public double getY() const {
    auto ret = PolyVoxCore_im.Vector3DDouble_getY(cast(void*)swigCPtr);
    return ret;
  }

  public double getZ() const {
    auto ret = PolyVoxCore_im.Vector3DDouble_getZ(cast(void*)swigCPtr);
    return ret;
  }

  public double getW() const {
    auto ret = PolyVoxCore_im.Vector3DDouble_getW(cast(void*)swigCPtr);
    return ret;
  }

  public void setElement(uint index, double tValue) {
    PolyVoxCore_im.Vector3DDouble_setElement(cast(void*)swigCPtr, index, tValue);
  }

  public void setElements(double x, double y) {
    PolyVoxCore_im.Vector3DDouble_setElements__SWIG_0(cast(void*)swigCPtr, x, y);
  }

  public void setElements(double x, double y, double z) {
    PolyVoxCore_im.Vector3DDouble_setElements__SWIG_1(cast(void*)swigCPtr, x, y, z);
  }

  public void setElements(double x, double y, double z, double w) {
    PolyVoxCore_im.Vector3DDouble_setElements__SWIG_2(cast(void*)swigCPtr, x, y, z, w);
  }

  public void setX(double tX) {
    PolyVoxCore_im.Vector3DDouble_setX(cast(void*)swigCPtr, tX);
  }

  public void setY(double tY) {
    PolyVoxCore_im.Vector3DDouble_setY(cast(void*)swigCPtr, tY);
  }

  public void setZ(double tZ) {
    PolyVoxCore_im.Vector3DDouble_setZ(cast(void*)swigCPtr, tZ);
  }

  public void setW(double tW) {
    PolyVoxCore_im.Vector3DDouble_setW(cast(void*)swigCPtr, tW);
  }

  public double length() const {
    auto ret = PolyVoxCore_im.Vector3DDouble_length(cast(void*)swigCPtr);
    return ret;
  }

  public double lengthSquared() const {
    auto ret = PolyVoxCore_im.Vector3DDouble_lengthSquared(cast(void*)swigCPtr);
    return ret;
  }

  public double angleTo(Vector3DDouble vector) const {
    auto ret = PolyVoxCore_im.Vector3DDouble_angleTo(cast(void*)swigCPtr, Vector3DDouble.swigGetCPtr(vector));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DDouble cross(Vector3DDouble vector) const {
    Vector3DDouble ret = new Vector3DDouble(PolyVoxCore_im.Vector3DDouble_cross(cast(void*)swigCPtr, Vector3DDouble.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public double dot(Vector3DDouble rhs) const {
    auto ret = PolyVoxCore_im.Vector3DDouble_dot(cast(void*)swigCPtr, Vector3DDouble.swigGetCPtr(rhs));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void normalise() {
    PolyVoxCore_im.Vector3DDouble_normalise(cast(void*)swigCPtr);
  }
}

class Vector3DInt8 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Vector3DInt8 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Vector3DInt8(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(byte x, byte y) {
    this(PolyVoxCore_im.new_Vector3DInt8__SWIG_0(x, y), true);
  }

  public this(byte x, byte y, byte z) {
    this(PolyVoxCore_im.new_Vector3DInt8__SWIG_1(x, y, z), true);
  }

  public this(byte x, byte y, byte z, byte w) {
    this(PolyVoxCore_im.new_Vector3DInt8__SWIG_2(x, y, z, w), true);
  }

  public this() {
    this(PolyVoxCore_im.new_Vector3DInt8__SWIG_3(), true);
  }

  public this(Vector3DInt8 vector) {
    this(PolyVoxCore_im.new_Vector3DInt8__SWIG_4(Vector3DInt8.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public Vector3DInt8 assignment(Vector3DInt8 rhs) {
    Vector3DInt8 ret = new Vector3DInt8(PolyVoxCore_im.Vector3DInt8_assignment(cast(void*)swigCPtr, Vector3DInt8.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpEquals(Vector3DInt8 rhs) const {
    bool ret = PolyVoxCore_im.Vector3DInt8_swigOpEquals(cast(void*)swigCPtr, Vector3DInt8.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpLt(Vector3DInt8 rhs) const {
    bool ret = PolyVoxCore_im.Vector3DInt8_swigOpLt(cast(void*)swigCPtr, Vector3DInt8.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt8 swigOpAddAssign(Vector3DInt8 rhs) {
    Vector3DInt8 ret = new Vector3DInt8(PolyVoxCore_im.Vector3DInt8_swigOpAddAssign(cast(void*)swigCPtr, Vector3DInt8.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt8 swigOpSubAssign(Vector3DInt8 rhs) {
    Vector3DInt8 ret = new Vector3DInt8(PolyVoxCore_im.Vector3DInt8_swigOpSubAssign(cast(void*)swigCPtr, Vector3DInt8.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt8 swigOpMulAssign(Vector3DInt8 rhs) {
    Vector3DInt8 ret = new Vector3DInt8(PolyVoxCore_im.Vector3DInt8_swigOpMulAssign__SWIG_0(cast(void*)swigCPtr, Vector3DInt8.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt8 swigOpDivAssign(Vector3DInt8 rhs) {
    Vector3DInt8 ret = new Vector3DInt8(PolyVoxCore_im.Vector3DInt8_swigOpDivAssign__SWIG_0(cast(void*)swigCPtr, Vector3DInt8.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt8 swigOpMulAssign(byte rhs) {
    Vector3DInt8 ret = new Vector3DInt8(PolyVoxCore_im.Vector3DInt8_swigOpMulAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public Vector3DInt8 swigOpDivAssign(byte rhs) {
    Vector3DInt8 ret = new Vector3DInt8(PolyVoxCore_im.Vector3DInt8_swigOpDivAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public byte getElement(uint index) const {
    auto ret = PolyVoxCore_im.Vector3DInt8_getElement(cast(void*)swigCPtr, index);
    return ret;
  }

  public byte getX() const {
    auto ret = PolyVoxCore_im.Vector3DInt8_getX(cast(void*)swigCPtr);
    return ret;
  }

  public byte getY() const {
    auto ret = PolyVoxCore_im.Vector3DInt8_getY(cast(void*)swigCPtr);
    return ret;
  }

  public byte getZ() const {
    auto ret = PolyVoxCore_im.Vector3DInt8_getZ(cast(void*)swigCPtr);
    return ret;
  }

  public byte getW() const {
    auto ret = PolyVoxCore_im.Vector3DInt8_getW(cast(void*)swigCPtr);
    return ret;
  }

  public void setElement(uint index, byte tValue) {
    PolyVoxCore_im.Vector3DInt8_setElement(cast(void*)swigCPtr, index, tValue);
  }

  public void setElements(byte x, byte y) {
    PolyVoxCore_im.Vector3DInt8_setElements__SWIG_0(cast(void*)swigCPtr, x, y);
  }

  public void setElements(byte x, byte y, byte z) {
    PolyVoxCore_im.Vector3DInt8_setElements__SWIG_1(cast(void*)swigCPtr, x, y, z);
  }

  public void setElements(byte x, byte y, byte z, byte w) {
    PolyVoxCore_im.Vector3DInt8_setElements__SWIG_2(cast(void*)swigCPtr, x, y, z, w);
  }

  public void setX(byte tX) {
    PolyVoxCore_im.Vector3DInt8_setX(cast(void*)swigCPtr, tX);
  }

  public void setY(byte tY) {
    PolyVoxCore_im.Vector3DInt8_setY(cast(void*)swigCPtr, tY);
  }

  public void setZ(byte tZ) {
    PolyVoxCore_im.Vector3DInt8_setZ(cast(void*)swigCPtr, tZ);
  }

  public void setW(byte tW) {
    PolyVoxCore_im.Vector3DInt8_setW(cast(void*)swigCPtr, tW);
  }

  public double length() const {
    auto ret = PolyVoxCore_im.Vector3DInt8_length(cast(void*)swigCPtr);
    return ret;
  }

  public double lengthSquared() const {
    auto ret = PolyVoxCore_im.Vector3DInt8_lengthSquared(cast(void*)swigCPtr);
    return ret;
  }

  public double angleTo(Vector3DInt8 vector) const {
    auto ret = PolyVoxCore_im.Vector3DInt8_angleTo(cast(void*)swigCPtr, Vector3DInt8.swigGetCPtr(vector));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt8 cross(Vector3DInt8 vector) const {
    Vector3DInt8 ret = new Vector3DInt8(PolyVoxCore_im.Vector3DInt8_cross(cast(void*)swigCPtr, Vector3DInt8.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public byte dot(Vector3DInt8 rhs) const {
    auto ret = PolyVoxCore_im.Vector3DInt8_dot(cast(void*)swigCPtr, Vector3DInt8.swigGetCPtr(rhs));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void normalise() {
    PolyVoxCore_im.Vector3DInt8_normalise(cast(void*)swigCPtr);
  }
}

class Vector3DUint8 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Vector3DUint8 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Vector3DUint8(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(ubyte x, ubyte y) {
    this(PolyVoxCore_im.new_Vector3DUint8__SWIG_0(x, y), true);
  }

  public this(ubyte x, ubyte y, ubyte z) {
    this(PolyVoxCore_im.new_Vector3DUint8__SWIG_1(x, y, z), true);
  }

  public this(ubyte x, ubyte y, ubyte z, ubyte w) {
    this(PolyVoxCore_im.new_Vector3DUint8__SWIG_2(x, y, z, w), true);
  }

  public this() {
    this(PolyVoxCore_im.new_Vector3DUint8__SWIG_3(), true);
  }

  public this(Vector3DUint8 vector) {
    this(PolyVoxCore_im.new_Vector3DUint8__SWIG_4(Vector3DUint8.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public Vector3DUint8 assignment(Vector3DUint8 rhs) {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCore_im.Vector3DUint8_assignment(cast(void*)swigCPtr, Vector3DUint8.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpEquals(Vector3DUint8 rhs) const {
    bool ret = PolyVoxCore_im.Vector3DUint8_swigOpEquals(cast(void*)swigCPtr, Vector3DUint8.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpLt(Vector3DUint8 rhs) const {
    bool ret = PolyVoxCore_im.Vector3DUint8_swigOpLt(cast(void*)swigCPtr, Vector3DUint8.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint8 swigOpAddAssign(Vector3DUint8 rhs) {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCore_im.Vector3DUint8_swigOpAddAssign(cast(void*)swigCPtr, Vector3DUint8.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint8 swigOpSubAssign(Vector3DUint8 rhs) {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCore_im.Vector3DUint8_swigOpSubAssign(cast(void*)swigCPtr, Vector3DUint8.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint8 swigOpMulAssign(Vector3DUint8 rhs) {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCore_im.Vector3DUint8_swigOpMulAssign__SWIG_0(cast(void*)swigCPtr, Vector3DUint8.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint8 swigOpDivAssign(Vector3DUint8 rhs) {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCore_im.Vector3DUint8_swigOpDivAssign__SWIG_0(cast(void*)swigCPtr, Vector3DUint8.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint8 swigOpMulAssign(ubyte rhs) {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCore_im.Vector3DUint8_swigOpMulAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public Vector3DUint8 swigOpDivAssign(ubyte rhs) {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCore_im.Vector3DUint8_swigOpDivAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public ubyte getElement(uint index) const {
    auto ret = PolyVoxCore_im.Vector3DUint8_getElement(cast(void*)swigCPtr, index);
    return ret;
  }

  public ubyte getX() const {
    auto ret = PolyVoxCore_im.Vector3DUint8_getX(cast(void*)swigCPtr);
    return ret;
  }

  public ubyte getY() const {
    auto ret = PolyVoxCore_im.Vector3DUint8_getY(cast(void*)swigCPtr);
    return ret;
  }

  public ubyte getZ() const {
    auto ret = PolyVoxCore_im.Vector3DUint8_getZ(cast(void*)swigCPtr);
    return ret;
  }

  public ubyte getW() const {
    auto ret = PolyVoxCore_im.Vector3DUint8_getW(cast(void*)swigCPtr);
    return ret;
  }

  public void setElement(uint index, ubyte tValue) {
    PolyVoxCore_im.Vector3DUint8_setElement(cast(void*)swigCPtr, index, tValue);
  }

  public void setElements(ubyte x, ubyte y) {
    PolyVoxCore_im.Vector3DUint8_setElements__SWIG_0(cast(void*)swigCPtr, x, y);
  }

  public void setElements(ubyte x, ubyte y, ubyte z) {
    PolyVoxCore_im.Vector3DUint8_setElements__SWIG_1(cast(void*)swigCPtr, x, y, z);
  }

  public void setElements(ubyte x, ubyte y, ubyte z, ubyte w) {
    PolyVoxCore_im.Vector3DUint8_setElements__SWIG_2(cast(void*)swigCPtr, x, y, z, w);
  }

  public void setX(ubyte tX) {
    PolyVoxCore_im.Vector3DUint8_setX(cast(void*)swigCPtr, tX);
  }

  public void setY(ubyte tY) {
    PolyVoxCore_im.Vector3DUint8_setY(cast(void*)swigCPtr, tY);
  }

  public void setZ(ubyte tZ) {
    PolyVoxCore_im.Vector3DUint8_setZ(cast(void*)swigCPtr, tZ);
  }

  public void setW(ubyte tW) {
    PolyVoxCore_im.Vector3DUint8_setW(cast(void*)swigCPtr, tW);
  }

  public double length() const {
    auto ret = PolyVoxCore_im.Vector3DUint8_length(cast(void*)swigCPtr);
    return ret;
  }

  public double lengthSquared() const {
    auto ret = PolyVoxCore_im.Vector3DUint8_lengthSquared(cast(void*)swigCPtr);
    return ret;
  }

  public double angleTo(Vector3DUint8 vector) const {
    auto ret = PolyVoxCore_im.Vector3DUint8_angleTo(cast(void*)swigCPtr, Vector3DUint8.swigGetCPtr(vector));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint8 cross(Vector3DUint8 vector) const {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCore_im.Vector3DUint8_cross(cast(void*)swigCPtr, Vector3DUint8.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public ubyte dot(Vector3DUint8 rhs) const {
    auto ret = PolyVoxCore_im.Vector3DUint8_dot(cast(void*)swigCPtr, Vector3DUint8.swigGetCPtr(rhs));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void normalise() {
    PolyVoxCore_im.Vector3DUint8_normalise(cast(void*)swigCPtr);
  }
}

class Vector3DInt16 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Vector3DInt16 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Vector3DInt16(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(short x, short y) {
    this(PolyVoxCore_im.new_Vector3DInt16__SWIG_0(x, y), true);
  }

  public this(short x, short y, short z) {
    this(PolyVoxCore_im.new_Vector3DInt16__SWIG_1(x, y, z), true);
  }

  public this(short x, short y, short z, short w) {
    this(PolyVoxCore_im.new_Vector3DInt16__SWIG_2(x, y, z, w), true);
  }

  public this() {
    this(PolyVoxCore_im.new_Vector3DInt16__SWIG_3(), true);
  }

  public this(Vector3DInt16 vector) {
    this(PolyVoxCore_im.new_Vector3DInt16__SWIG_4(Vector3DInt16.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public Vector3DInt16 assignment(Vector3DInt16 rhs) {
    Vector3DInt16 ret = new Vector3DInt16(PolyVoxCore_im.Vector3DInt16_assignment(cast(void*)swigCPtr, Vector3DInt16.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpEquals(Vector3DInt16 rhs) const {
    bool ret = PolyVoxCore_im.Vector3DInt16_swigOpEquals(cast(void*)swigCPtr, Vector3DInt16.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpLt(Vector3DInt16 rhs) const {
    bool ret = PolyVoxCore_im.Vector3DInt16_swigOpLt(cast(void*)swigCPtr, Vector3DInt16.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt16 swigOpAddAssign(Vector3DInt16 rhs) {
    Vector3DInt16 ret = new Vector3DInt16(PolyVoxCore_im.Vector3DInt16_swigOpAddAssign(cast(void*)swigCPtr, Vector3DInt16.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt16 swigOpSubAssign(Vector3DInt16 rhs) {
    Vector3DInt16 ret = new Vector3DInt16(PolyVoxCore_im.Vector3DInt16_swigOpSubAssign(cast(void*)swigCPtr, Vector3DInt16.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt16 swigOpMulAssign(Vector3DInt16 rhs) {
    Vector3DInt16 ret = new Vector3DInt16(PolyVoxCore_im.Vector3DInt16_swigOpMulAssign__SWIG_0(cast(void*)swigCPtr, Vector3DInt16.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt16 swigOpDivAssign(Vector3DInt16 rhs) {
    Vector3DInt16 ret = new Vector3DInt16(PolyVoxCore_im.Vector3DInt16_swigOpDivAssign__SWIG_0(cast(void*)swigCPtr, Vector3DInt16.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt16 swigOpMulAssign(short rhs) {
    Vector3DInt16 ret = new Vector3DInt16(PolyVoxCore_im.Vector3DInt16_swigOpMulAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public Vector3DInt16 swigOpDivAssign(short rhs) {
    Vector3DInt16 ret = new Vector3DInt16(PolyVoxCore_im.Vector3DInt16_swigOpDivAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public short getElement(uint index) const {
    auto ret = PolyVoxCore_im.Vector3DInt16_getElement(cast(void*)swigCPtr, index);
    return ret;
  }

  public short getX() const {
    auto ret = PolyVoxCore_im.Vector3DInt16_getX(cast(void*)swigCPtr);
    return ret;
  }

  public short getY() const {
    auto ret = PolyVoxCore_im.Vector3DInt16_getY(cast(void*)swigCPtr);
    return ret;
  }

  public short getZ() const {
    auto ret = PolyVoxCore_im.Vector3DInt16_getZ(cast(void*)swigCPtr);
    return ret;
  }

  public short getW() const {
    auto ret = PolyVoxCore_im.Vector3DInt16_getW(cast(void*)swigCPtr);
    return ret;
  }

  public void setElement(uint index, short tValue) {
    PolyVoxCore_im.Vector3DInt16_setElement(cast(void*)swigCPtr, index, tValue);
  }

  public void setElements(short x, short y) {
    PolyVoxCore_im.Vector3DInt16_setElements__SWIG_0(cast(void*)swigCPtr, x, y);
  }

  public void setElements(short x, short y, short z) {
    PolyVoxCore_im.Vector3DInt16_setElements__SWIG_1(cast(void*)swigCPtr, x, y, z);
  }

  public void setElements(short x, short y, short z, short w) {
    PolyVoxCore_im.Vector3DInt16_setElements__SWIG_2(cast(void*)swigCPtr, x, y, z, w);
  }

  public void setX(short tX) {
    PolyVoxCore_im.Vector3DInt16_setX(cast(void*)swigCPtr, tX);
  }

  public void setY(short tY) {
    PolyVoxCore_im.Vector3DInt16_setY(cast(void*)swigCPtr, tY);
  }

  public void setZ(short tZ) {
    PolyVoxCore_im.Vector3DInt16_setZ(cast(void*)swigCPtr, tZ);
  }

  public void setW(short tW) {
    PolyVoxCore_im.Vector3DInt16_setW(cast(void*)swigCPtr, tW);
  }

  public double length() const {
    auto ret = PolyVoxCore_im.Vector3DInt16_length(cast(void*)swigCPtr);
    return ret;
  }

  public double lengthSquared() const {
    auto ret = PolyVoxCore_im.Vector3DInt16_lengthSquared(cast(void*)swigCPtr);
    return ret;
  }

  public double angleTo(Vector3DInt16 vector) const {
    auto ret = PolyVoxCore_im.Vector3DInt16_angleTo(cast(void*)swigCPtr, Vector3DInt16.swigGetCPtr(vector));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt16 cross(Vector3DInt16 vector) const {
    Vector3DInt16 ret = new Vector3DInt16(PolyVoxCore_im.Vector3DInt16_cross(cast(void*)swigCPtr, Vector3DInt16.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public short dot(Vector3DInt16 rhs) const {
    auto ret = PolyVoxCore_im.Vector3DInt16_dot(cast(void*)swigCPtr, Vector3DInt16.swigGetCPtr(rhs));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void normalise() {
    PolyVoxCore_im.Vector3DInt16_normalise(cast(void*)swigCPtr);
  }
}

class Vector3DUint16 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Vector3DUint16 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Vector3DUint16(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(ushort x, ushort y) {
    this(PolyVoxCore_im.new_Vector3DUint16__SWIG_0(x, y), true);
  }

  public this(ushort x, ushort y, ushort z) {
    this(PolyVoxCore_im.new_Vector3DUint16__SWIG_1(x, y, z), true);
  }

  public this(ushort x, ushort y, ushort z, ushort w) {
    this(PolyVoxCore_im.new_Vector3DUint16__SWIG_2(x, y, z, w), true);
  }

  public this() {
    this(PolyVoxCore_im.new_Vector3DUint16__SWIG_3(), true);
  }

  public this(Vector3DUint16 vector) {
    this(PolyVoxCore_im.new_Vector3DUint16__SWIG_4(Vector3DUint16.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public Vector3DUint16 assignment(Vector3DUint16 rhs) {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCore_im.Vector3DUint16_assignment(cast(void*)swigCPtr, Vector3DUint16.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpEquals(Vector3DUint16 rhs) const {
    bool ret = PolyVoxCore_im.Vector3DUint16_swigOpEquals(cast(void*)swigCPtr, Vector3DUint16.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpLt(Vector3DUint16 rhs) const {
    bool ret = PolyVoxCore_im.Vector3DUint16_swigOpLt(cast(void*)swigCPtr, Vector3DUint16.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint16 swigOpAddAssign(Vector3DUint16 rhs) {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCore_im.Vector3DUint16_swigOpAddAssign(cast(void*)swigCPtr, Vector3DUint16.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint16 swigOpSubAssign(Vector3DUint16 rhs) {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCore_im.Vector3DUint16_swigOpSubAssign(cast(void*)swigCPtr, Vector3DUint16.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint16 swigOpMulAssign(Vector3DUint16 rhs) {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCore_im.Vector3DUint16_swigOpMulAssign__SWIG_0(cast(void*)swigCPtr, Vector3DUint16.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint16 swigOpDivAssign(Vector3DUint16 rhs) {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCore_im.Vector3DUint16_swigOpDivAssign__SWIG_0(cast(void*)swigCPtr, Vector3DUint16.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint16 swigOpMulAssign(ushort rhs) {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCore_im.Vector3DUint16_swigOpMulAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public Vector3DUint16 swigOpDivAssign(ushort rhs) {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCore_im.Vector3DUint16_swigOpDivAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public ushort getElement(uint index) const {
    auto ret = PolyVoxCore_im.Vector3DUint16_getElement(cast(void*)swigCPtr, index);
    return ret;
  }

  public ushort getX() const {
    auto ret = PolyVoxCore_im.Vector3DUint16_getX(cast(void*)swigCPtr);
    return ret;
  }

  public ushort getY() const {
    auto ret = PolyVoxCore_im.Vector3DUint16_getY(cast(void*)swigCPtr);
    return ret;
  }

  public ushort getZ() const {
    auto ret = PolyVoxCore_im.Vector3DUint16_getZ(cast(void*)swigCPtr);
    return ret;
  }

  public ushort getW() const {
    auto ret = PolyVoxCore_im.Vector3DUint16_getW(cast(void*)swigCPtr);
    return ret;
  }

  public void setElement(uint index, ushort tValue) {
    PolyVoxCore_im.Vector3DUint16_setElement(cast(void*)swigCPtr, index, tValue);
  }

  public void setElements(ushort x, ushort y) {
    PolyVoxCore_im.Vector3DUint16_setElements__SWIG_0(cast(void*)swigCPtr, x, y);
  }

  public void setElements(ushort x, ushort y, ushort z) {
    PolyVoxCore_im.Vector3DUint16_setElements__SWIG_1(cast(void*)swigCPtr, x, y, z);
  }

  public void setElements(ushort x, ushort y, ushort z, ushort w) {
    PolyVoxCore_im.Vector3DUint16_setElements__SWIG_2(cast(void*)swigCPtr, x, y, z, w);
  }

  public void setX(ushort tX) {
    PolyVoxCore_im.Vector3DUint16_setX(cast(void*)swigCPtr, tX);
  }

  public void setY(ushort tY) {
    PolyVoxCore_im.Vector3DUint16_setY(cast(void*)swigCPtr, tY);
  }

  public void setZ(ushort tZ) {
    PolyVoxCore_im.Vector3DUint16_setZ(cast(void*)swigCPtr, tZ);
  }

  public void setW(ushort tW) {
    PolyVoxCore_im.Vector3DUint16_setW(cast(void*)swigCPtr, tW);
  }

  public double length() const {
    auto ret = PolyVoxCore_im.Vector3DUint16_length(cast(void*)swigCPtr);
    return ret;
  }

  public double lengthSquared() const {
    auto ret = PolyVoxCore_im.Vector3DUint16_lengthSquared(cast(void*)swigCPtr);
    return ret;
  }

  public double angleTo(Vector3DUint16 vector) const {
    auto ret = PolyVoxCore_im.Vector3DUint16_angleTo(cast(void*)swigCPtr, Vector3DUint16.swigGetCPtr(vector));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint16 cross(Vector3DUint16 vector) const {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCore_im.Vector3DUint16_cross(cast(void*)swigCPtr, Vector3DUint16.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public ushort dot(Vector3DUint16 rhs) const {
    auto ret = PolyVoxCore_im.Vector3DUint16_dot(cast(void*)swigCPtr, Vector3DUint16.swigGetCPtr(rhs));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void normalise() {
    PolyVoxCore_im.Vector3DUint16_normalise(cast(void*)swigCPtr);
  }
}

class Vector3DInt32 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Vector3DInt32 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Vector3DInt32(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(int x, int y) {
    this(PolyVoxCore_im.new_Vector3DInt32__SWIG_0(x, y), true);
  }

  public this(int x, int y, int z) {
    this(PolyVoxCore_im.new_Vector3DInt32__SWIG_1(x, y, z), true);
  }

  public this(int x, int y, int z, int w) {
    this(PolyVoxCore_im.new_Vector3DInt32__SWIG_2(x, y, z, w), true);
  }

  public this() {
    this(PolyVoxCore_im.new_Vector3DInt32__SWIG_3(), true);
  }

  public this(Vector3DInt32 vector) {
    this(PolyVoxCore_im.new_Vector3DInt32__SWIG_4(Vector3DInt32.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public Vector3DInt32 assignment(Vector3DInt32 rhs) {
    Vector3DInt32 ret = new Vector3DInt32(PolyVoxCore_im.Vector3DInt32_assignment(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpEquals(Vector3DInt32 rhs) const {
    bool ret = PolyVoxCore_im.Vector3DInt32_swigOpEquals(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpLt(Vector3DInt32 rhs) const {
    bool ret = PolyVoxCore_im.Vector3DInt32_swigOpLt(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt32 swigOpAddAssign(Vector3DInt32 rhs) {
    Vector3DInt32 ret = new Vector3DInt32(PolyVoxCore_im.Vector3DInt32_swigOpAddAssign(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt32 swigOpSubAssign(Vector3DInt32 rhs) {
    Vector3DInt32 ret = new Vector3DInt32(PolyVoxCore_im.Vector3DInt32_swigOpSubAssign(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt32 swigOpMulAssign(Vector3DInt32 rhs) {
    Vector3DInt32 ret = new Vector3DInt32(PolyVoxCore_im.Vector3DInt32_swigOpMulAssign__SWIG_0(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt32 swigOpDivAssign(Vector3DInt32 rhs) {
    Vector3DInt32 ret = new Vector3DInt32(PolyVoxCore_im.Vector3DInt32_swigOpDivAssign__SWIG_0(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt32 swigOpMulAssign(int rhs) {
    Vector3DInt32 ret = new Vector3DInt32(PolyVoxCore_im.Vector3DInt32_swigOpMulAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public Vector3DInt32 swigOpDivAssign(int rhs) {
    Vector3DInt32 ret = new Vector3DInt32(PolyVoxCore_im.Vector3DInt32_swigOpDivAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public int getElement(uint index) const {
    auto ret = PolyVoxCore_im.Vector3DInt32_getElement(cast(void*)swigCPtr, index);
    return ret;
  }

  public int getX() const {
    auto ret = PolyVoxCore_im.Vector3DInt32_getX(cast(void*)swigCPtr);
    return ret;
  }

  public int getY() const {
    auto ret = PolyVoxCore_im.Vector3DInt32_getY(cast(void*)swigCPtr);
    return ret;
  }

  public int getZ() const {
    auto ret = PolyVoxCore_im.Vector3DInt32_getZ(cast(void*)swigCPtr);
    return ret;
  }

  public int getW() const {
    auto ret = PolyVoxCore_im.Vector3DInt32_getW(cast(void*)swigCPtr);
    return ret;
  }

  public void setElement(uint index, int tValue) {
    PolyVoxCore_im.Vector3DInt32_setElement(cast(void*)swigCPtr, index, tValue);
  }

  public void setElements(int x, int y) {
    PolyVoxCore_im.Vector3DInt32_setElements__SWIG_0(cast(void*)swigCPtr, x, y);
  }

  public void setElements(int x, int y, int z) {
    PolyVoxCore_im.Vector3DInt32_setElements__SWIG_1(cast(void*)swigCPtr, x, y, z);
  }

  public void setElements(int x, int y, int z, int w) {
    PolyVoxCore_im.Vector3DInt32_setElements__SWIG_2(cast(void*)swigCPtr, x, y, z, w);
  }

  public void setX(int tX) {
    PolyVoxCore_im.Vector3DInt32_setX(cast(void*)swigCPtr, tX);
  }

  public void setY(int tY) {
    PolyVoxCore_im.Vector3DInt32_setY(cast(void*)swigCPtr, tY);
  }

  public void setZ(int tZ) {
    PolyVoxCore_im.Vector3DInt32_setZ(cast(void*)swigCPtr, tZ);
  }

  public void setW(int tW) {
    PolyVoxCore_im.Vector3DInt32_setW(cast(void*)swigCPtr, tW);
  }

  public double length() const {
    auto ret = PolyVoxCore_im.Vector3DInt32_length(cast(void*)swigCPtr);
    return ret;
  }

  public double lengthSquared() const {
    auto ret = PolyVoxCore_im.Vector3DInt32_lengthSquared(cast(void*)swigCPtr);
    return ret;
  }

  public double angleTo(Vector3DInt32 vector) const {
    auto ret = PolyVoxCore_im.Vector3DInt32_angleTo(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(vector));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DInt32 cross(Vector3DInt32 vector) const {
    Vector3DInt32 ret = new Vector3DInt32(PolyVoxCore_im.Vector3DInt32_cross(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public int dot(Vector3DInt32 rhs) const {
    auto ret = PolyVoxCore_im.Vector3DInt32_dot(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(rhs));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void normalise() {
    PolyVoxCore_im.Vector3DInt32_normalise(cast(void*)swigCPtr);
  }
}

class Vector3DUint32 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Vector3DUint32 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Vector3DUint32(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(uint x, uint y) {
    this(PolyVoxCore_im.new_Vector3DUint32__SWIG_0(x, y), true);
  }

  public this(uint x, uint y, uint z) {
    this(PolyVoxCore_im.new_Vector3DUint32__SWIG_1(x, y, z), true);
  }

  public this(uint x, uint y, uint z, uint w) {
    this(PolyVoxCore_im.new_Vector3DUint32__SWIG_2(x, y, z, w), true);
  }

  public this() {
    this(PolyVoxCore_im.new_Vector3DUint32__SWIG_3(), true);
  }

  public this(Vector3DUint32 vector) {
    this(PolyVoxCore_im.new_Vector3DUint32__SWIG_4(Vector3DUint32.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public Vector3DUint32 assignment(Vector3DUint32 rhs) {
    Vector3DUint32 ret = new Vector3DUint32(PolyVoxCore_im.Vector3DUint32_assignment(cast(void*)swigCPtr, Vector3DUint32.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpEquals(Vector3DUint32 rhs) const {
    bool ret = PolyVoxCore_im.Vector3DUint32_swigOpEquals(cast(void*)swigCPtr, Vector3DUint32.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpLt(Vector3DUint32 rhs) const {
    bool ret = PolyVoxCore_im.Vector3DUint32_swigOpLt(cast(void*)swigCPtr, Vector3DUint32.swigGetCPtr(rhs)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint32 swigOpAddAssign(Vector3DUint32 rhs) {
    Vector3DUint32 ret = new Vector3DUint32(PolyVoxCore_im.Vector3DUint32_swigOpAddAssign(cast(void*)swigCPtr, Vector3DUint32.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint32 swigOpSubAssign(Vector3DUint32 rhs) {
    Vector3DUint32 ret = new Vector3DUint32(PolyVoxCore_im.Vector3DUint32_swigOpSubAssign(cast(void*)swigCPtr, Vector3DUint32.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint32 swigOpMulAssign(Vector3DUint32 rhs) {
    Vector3DUint32 ret = new Vector3DUint32(PolyVoxCore_im.Vector3DUint32_swigOpMulAssign__SWIG_0(cast(void*)swigCPtr, Vector3DUint32.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint32 swigOpDivAssign(Vector3DUint32 rhs) {
    Vector3DUint32 ret = new Vector3DUint32(PolyVoxCore_im.Vector3DUint32_swigOpDivAssign__SWIG_0(cast(void*)swigCPtr, Vector3DUint32.swigGetCPtr(rhs)), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint32 swigOpMulAssign(uint rhs) {
    Vector3DUint32 ret = new Vector3DUint32(PolyVoxCore_im.Vector3DUint32_swigOpMulAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public Vector3DUint32 swigOpDivAssign(uint rhs) {
    Vector3DUint32 ret = new Vector3DUint32(PolyVoxCore_im.Vector3DUint32_swigOpDivAssign__SWIG_1(cast(void*)swigCPtr, rhs), false);
    return ret;
  }

  public uint getElement(uint index) const {
    auto ret = PolyVoxCore_im.Vector3DUint32_getElement(cast(void*)swigCPtr, index);
    return ret;
  }

  public uint getX() const {
    auto ret = PolyVoxCore_im.Vector3DUint32_getX(cast(void*)swigCPtr);
    return ret;
  }

  public uint getY() const {
    auto ret = PolyVoxCore_im.Vector3DUint32_getY(cast(void*)swigCPtr);
    return ret;
  }

  public uint getZ() const {
    auto ret = PolyVoxCore_im.Vector3DUint32_getZ(cast(void*)swigCPtr);
    return ret;
  }

  public uint getW() const {
    auto ret = PolyVoxCore_im.Vector3DUint32_getW(cast(void*)swigCPtr);
    return ret;
  }

  public void setElement(uint index, uint tValue) {
    PolyVoxCore_im.Vector3DUint32_setElement(cast(void*)swigCPtr, index, tValue);
  }

  public void setElements(uint x, uint y) {
    PolyVoxCore_im.Vector3DUint32_setElements__SWIG_0(cast(void*)swigCPtr, x, y);
  }

  public void setElements(uint x, uint y, uint z) {
    PolyVoxCore_im.Vector3DUint32_setElements__SWIG_1(cast(void*)swigCPtr, x, y, z);
  }

  public void setElements(uint x, uint y, uint z, uint w) {
    PolyVoxCore_im.Vector3DUint32_setElements__SWIG_2(cast(void*)swigCPtr, x, y, z, w);
  }

  public void setX(uint tX) {
    PolyVoxCore_im.Vector3DUint32_setX(cast(void*)swigCPtr, tX);
  }

  public void setY(uint tY) {
    PolyVoxCore_im.Vector3DUint32_setY(cast(void*)swigCPtr, tY);
  }

  public void setZ(uint tZ) {
    PolyVoxCore_im.Vector3DUint32_setZ(cast(void*)swigCPtr, tZ);
  }

  public void setW(uint tW) {
    PolyVoxCore_im.Vector3DUint32_setW(cast(void*)swigCPtr, tW);
  }

  public double length() const {
    auto ret = PolyVoxCore_im.Vector3DUint32_length(cast(void*)swigCPtr);
    return ret;
  }

  public double lengthSquared() const {
    auto ret = PolyVoxCore_im.Vector3DUint32_lengthSquared(cast(void*)swigCPtr);
    return ret;
  }

  public double angleTo(Vector3DUint32 vector) const {
    auto ret = PolyVoxCore_im.Vector3DUint32_angleTo(cast(void*)swigCPtr, Vector3DUint32.swigGetCPtr(vector));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public Vector3DUint32 cross(Vector3DUint32 vector) const {
    Vector3DUint32 ret = new Vector3DUint32(PolyVoxCore_im.Vector3DUint32_cross(cast(void*)swigCPtr, Vector3DUint32.swigGetCPtr(vector)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public uint dot(Vector3DUint32 rhs) const {
    auto ret = PolyVoxCore_im.Vector3DUint32_dot(cast(void*)swigCPtr, Vector3DUint32.swigGetCPtr(rhs));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void normalise() {
    PolyVoxCore_im.Vector3DUint32_normalise(cast(void*)swigCPtr);
  }
}

class Region {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Region obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_Region(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public static Region MaxRegion() @property {
    void* cPtr = PolyVoxCore_im.Region_MaxRegion_get();
    Region ret = (cPtr is null) ? null : new Region(cPtr, false);
    return ret;
  }

  public this() {
    this(PolyVoxCore_im.new_Region__SWIG_0(), true);
  }

  public this(Vector3DInt32 v3dLowerCorner, Vector3DInt32 v3dUpperCorner) {
    this(PolyVoxCore_im.new_Region__SWIG_1(Vector3DInt32.swigGetCPtr(v3dLowerCorner), Vector3DInt32.swigGetCPtr(v3dUpperCorner)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public Vector3DInt32 getLowerCorner() const {
    Vector3DInt32 ret = new Vector3DInt32(PolyVoxCore_im.Region_getLowerCorner(cast(void*)swigCPtr), false);
    return ret;
  }

  public Vector3DInt32 getUpperCorner() const {
    Vector3DInt32 ret = new Vector3DInt32(PolyVoxCore_im.Region_getUpperCorner(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setLowerCorner(Vector3DInt32 v3dLowerCorner) {
    PolyVoxCore_im.Region_setLowerCorner(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(v3dLowerCorner));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void setUpperCorner(Vector3DInt32 v3dUpperCorner) {
    PolyVoxCore_im.Region_setUpperCorner(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(v3dUpperCorner));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public bool containsPoint(Vector3DFloat pos, float boundary) const {
    bool ret = PolyVoxCore_im.Region_containsPoint__SWIG_0(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(pos), boundary) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool containsPoint(Vector3DFloat pos) const {
    bool ret = PolyVoxCore_im.Region_containsPoint__SWIG_1(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(pos)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool containsPoint(Vector3DInt32 pos, ubyte boundary) const {
    bool ret = PolyVoxCore_im.Region_containsPoint__SWIG_2(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(pos), boundary) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool containsPoint(Vector3DInt32 pos) const {
    bool ret = PolyVoxCore_im.Region_containsPoint__SWIG_3(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(pos)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void cropTo(Region other) {
    PolyVoxCore_im.Region_cropTo(cast(void*)swigCPtr, Region.swigGetCPtr(other));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public int depth() const {
    auto ret = PolyVoxCore_im.Region_depth(cast(void*)swigCPtr);
    return ret;
  }

  public int height() const {
    auto ret = PolyVoxCore_im.Region_height(cast(void*)swigCPtr);
    return ret;
  }

  public void shift(Vector3DInt32 amount) {
    PolyVoxCore_im.Region_shift(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(amount));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void shiftLowerCorner(Vector3DInt32 amount) {
    PolyVoxCore_im.Region_shiftLowerCorner(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(amount));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void shiftUpperCorner(Vector3DInt32 amount) {
    PolyVoxCore_im.Region_shiftUpperCorner(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(amount));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public Vector3DInt32 dimensions() {
    Vector3DInt32 ret = new Vector3DInt32(PolyVoxCore_im.Region_dimensions(cast(void*)swigCPtr), true);
    return ret;
  }

  public int width() const {
    auto ret = PolyVoxCore_im.Region_width(cast(void*)swigCPtr);
    return ret;
  }
}

class SimpleVolumeMaterial8 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(SimpleVolumeMaterial8 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_SimpleVolumeMaterial8(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(Region regValid, ushort uBlockSideLength) {
    this(PolyVoxCore_im.new_SimpleVolumeMaterial8__SWIG_0(Region.swigGetCPtr(regValid), uBlockSideLength), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(Region regValid) {
    this(PolyVoxCore_im.new_SimpleVolumeMaterial8__SWIG_1(Region.swigGetCPtr(regValid)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(int dont_use_this_constructor_1, int dont_use_this_constructor_2, int dont_use_this_constructor_3) {
    this(PolyVoxCore_im.new_SimpleVolumeMaterial8__SWIG_2(dont_use_this_constructor_1, dont_use_this_constructor_2, dont_use_this_constructor_3), true);
  }

  public Material8 getBorderValue() const {
    Material8 ret = new Material8(PolyVoxCore_im.SimpleVolumeMaterial8_getBorderValue(cast(void*)swigCPtr), true);
    return ret;
  }

  public Region getEnclosingRegion() const {
    Region ret = new Region(PolyVoxCore_im.SimpleVolumeMaterial8_getEnclosingRegion(cast(void*)swigCPtr), true);
    return ret;
  }

  public int getWidth() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterial8_getWidth(cast(void*)swigCPtr);
    return ret;
  }

  public int getHeight() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterial8_getHeight(cast(void*)swigCPtr);
    return ret;
  }

  public int getDepth() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterial8_getDepth(cast(void*)swigCPtr);
    return ret;
  }

  public int getLongestSideLength() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterial8_getLongestSideLength(cast(void*)swigCPtr);
    return ret;
  }

  public int getShortestSideLength() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterial8_getShortestSideLength(cast(void*)swigCPtr);
    return ret;
  }

  public float getDiagonalLength() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterial8_getDiagonalLength(cast(void*)swigCPtr);
    return ret;
  }

  public Material8 getVoxelAt(int uXPos, int uYPos, int uZPos) const {
    Material8 ret = new Material8(PolyVoxCore_im.SimpleVolumeMaterial8_getVoxelAt__SWIG_0(cast(void*)swigCPtr, uXPos, uYPos, uZPos), true);
    return ret;
  }

  public Material8 getVoxelAt(Vector3DInt32 v3dPos) const {
    Material8 ret = new Material8(PolyVoxCore_im.SimpleVolumeMaterial8_getVoxelAt__SWIG_1(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(v3dPos)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setBorderValue(Material8 tBorder) {
    PolyVoxCore_im.SimpleVolumeMaterial8_setBorderValue(cast(void*)swigCPtr, Material8.swigGetCPtr(tBorder));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public bool setVoxelAt(int uXPos, int uYPos, int uZPos, Material8 tValue) {
    bool ret = PolyVoxCore_im.SimpleVolumeMaterial8_setVoxelAt__SWIG_0(cast(void*)swigCPtr, uXPos, uYPos, uZPos, Material8.swigGetCPtr(tValue)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool setVoxelAt(Vector3DInt32 v3dPos, Material8 tValue) {
    bool ret = PolyVoxCore_im.SimpleVolumeMaterial8_setVoxelAt__SWIG_1(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(v3dPos), Material8.swigGetCPtr(tValue)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public uint calculateSizeInBytes() {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterial8_calculateSizeInBytes(cast(void*)swigCPtr);
    return ret;
  }

  public void resize(Region regValidRegion, ushort uBlockSideLength) {
    PolyVoxCore_im.SimpleVolumeMaterial8_resize(cast(void*)swigCPtr, Region.swigGetCPtr(regValidRegion), uBlockSideLength);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }
}

class SimpleVolumeDensity8 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(SimpleVolumeDensity8 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_SimpleVolumeDensity8(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(Region regValid, ushort uBlockSideLength) {
    this(PolyVoxCore_im.new_SimpleVolumeDensity8__SWIG_0(Region.swigGetCPtr(regValid), uBlockSideLength), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(Region regValid) {
    this(PolyVoxCore_im.new_SimpleVolumeDensity8__SWIG_1(Region.swigGetCPtr(regValid)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(int dont_use_this_constructor_1, int dont_use_this_constructor_2, int dont_use_this_constructor_3) {
    this(PolyVoxCore_im.new_SimpleVolumeDensity8__SWIG_2(dont_use_this_constructor_1, dont_use_this_constructor_2, dont_use_this_constructor_3), true);
  }

  public Density8 getBorderValue() const {
    Density8 ret = new Density8(PolyVoxCore_im.SimpleVolumeDensity8_getBorderValue(cast(void*)swigCPtr), true);
    return ret;
  }

  public Region getEnclosingRegion() const {
    Region ret = new Region(PolyVoxCore_im.SimpleVolumeDensity8_getEnclosingRegion(cast(void*)swigCPtr), true);
    return ret;
  }

  public int getWidth() const {
    auto ret = PolyVoxCore_im.SimpleVolumeDensity8_getWidth(cast(void*)swigCPtr);
    return ret;
  }

  public int getHeight() const {
    auto ret = PolyVoxCore_im.SimpleVolumeDensity8_getHeight(cast(void*)swigCPtr);
    return ret;
  }

  public int getDepth() const {
    auto ret = PolyVoxCore_im.SimpleVolumeDensity8_getDepth(cast(void*)swigCPtr);
    return ret;
  }

  public int getLongestSideLength() const {
    auto ret = PolyVoxCore_im.SimpleVolumeDensity8_getLongestSideLength(cast(void*)swigCPtr);
    return ret;
  }

  public int getShortestSideLength() const {
    auto ret = PolyVoxCore_im.SimpleVolumeDensity8_getShortestSideLength(cast(void*)swigCPtr);
    return ret;
  }

  public float getDiagonalLength() const {
    auto ret = PolyVoxCore_im.SimpleVolumeDensity8_getDiagonalLength(cast(void*)swigCPtr);
    return ret;
  }

  public Density8 getVoxelAt(int uXPos, int uYPos, int uZPos) const {
    Density8 ret = new Density8(PolyVoxCore_im.SimpleVolumeDensity8_getVoxelAt__SWIG_0(cast(void*)swigCPtr, uXPos, uYPos, uZPos), true);
    return ret;
  }

  public Density8 getVoxelAt(Vector3DInt32 v3dPos) const {
    Density8 ret = new Density8(PolyVoxCore_im.SimpleVolumeDensity8_getVoxelAt__SWIG_1(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(v3dPos)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setBorderValue(Density8 tBorder) {
    PolyVoxCore_im.SimpleVolumeDensity8_setBorderValue(cast(void*)swigCPtr, Density8.swigGetCPtr(tBorder));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public bool setVoxelAt(int uXPos, int uYPos, int uZPos, Density8 tValue) {
    bool ret = PolyVoxCore_im.SimpleVolumeDensity8_setVoxelAt__SWIG_0(cast(void*)swigCPtr, uXPos, uYPos, uZPos, Density8.swigGetCPtr(tValue)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool setVoxelAt(Vector3DInt32 v3dPos, Density8 tValue) {
    bool ret = PolyVoxCore_im.SimpleVolumeDensity8_setVoxelAt__SWIG_1(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(v3dPos), Density8.swigGetCPtr(tValue)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public uint calculateSizeInBytes() {
    auto ret = PolyVoxCore_im.SimpleVolumeDensity8_calculateSizeInBytes(cast(void*)swigCPtr);
    return ret;
  }

  public void resize(Region regValidRegion, ushort uBlockSideLength) {
    PolyVoxCore_im.SimpleVolumeDensity8_resize(cast(void*)swigCPtr, Region.swigGetCPtr(regValidRegion), uBlockSideLength);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }
}

class SimpleVolumeMaterialDensityPair44 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(SimpleVolumeMaterialDensityPair44 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_SimpleVolumeMaterialDensityPair44(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(Region regValid, ushort uBlockSideLength) {
    this(PolyVoxCore_im.new_SimpleVolumeMaterialDensityPair44__SWIG_0(Region.swigGetCPtr(regValid), uBlockSideLength), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(Region regValid) {
    this(PolyVoxCore_im.new_SimpleVolumeMaterialDensityPair44__SWIG_1(Region.swigGetCPtr(regValid)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(int dont_use_this_constructor_1, int dont_use_this_constructor_2, int dont_use_this_constructor_3) {
    this(PolyVoxCore_im.new_SimpleVolumeMaterialDensityPair44__SWIG_2(dont_use_this_constructor_1, dont_use_this_constructor_2, dont_use_this_constructor_3), true);
  }

  public MaterialDensityPair44 getBorderValue() const {
    MaterialDensityPair44 ret = new MaterialDensityPair44(PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_getBorderValue(cast(void*)swigCPtr), true);
    return ret;
  }

  public Region getEnclosingRegion() const {
    Region ret = new Region(PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_getEnclosingRegion(cast(void*)swigCPtr), true);
    return ret;
  }

  public int getWidth() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_getWidth(cast(void*)swigCPtr);
    return ret;
  }

  public int getHeight() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_getHeight(cast(void*)swigCPtr);
    return ret;
  }

  public int getDepth() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_getDepth(cast(void*)swigCPtr);
    return ret;
  }

  public int getLongestSideLength() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_getLongestSideLength(cast(void*)swigCPtr);
    return ret;
  }

  public int getShortestSideLength() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_getShortestSideLength(cast(void*)swigCPtr);
    return ret;
  }

  public float getDiagonalLength() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_getDiagonalLength(cast(void*)swigCPtr);
    return ret;
  }

  public MaterialDensityPair44 getVoxelAt(int uXPos, int uYPos, int uZPos) const {
    MaterialDensityPair44 ret = new MaterialDensityPair44(PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_getVoxelAt__SWIG_0(cast(void*)swigCPtr, uXPos, uYPos, uZPos), true);
    return ret;
  }

  public MaterialDensityPair44 getVoxelAt(Vector3DInt32 v3dPos) const {
    MaterialDensityPair44 ret = new MaterialDensityPair44(PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_getVoxelAt__SWIG_1(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(v3dPos)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setBorderValue(MaterialDensityPair44 tBorder) {
    PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_setBorderValue(cast(void*)swigCPtr, MaterialDensityPair44.swigGetCPtr(tBorder));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public bool setVoxelAt(int uXPos, int uYPos, int uZPos, MaterialDensityPair44 tValue) {
    bool ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_setVoxelAt__SWIG_0(cast(void*)swigCPtr, uXPos, uYPos, uZPos, MaterialDensityPair44.swigGetCPtr(tValue)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool setVoxelAt(Vector3DInt32 v3dPos, MaterialDensityPair44 tValue) {
    bool ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_setVoxelAt__SWIG_1(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(v3dPos), MaterialDensityPair44.swigGetCPtr(tValue)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public uint calculateSizeInBytes() {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_calculateSizeInBytes(cast(void*)swigCPtr);
    return ret;
  }

  public void resize(Region regValidRegion, ushort uBlockSideLength) {
    PolyVoxCore_im.SimpleVolumeMaterialDensityPair44_resize(cast(void*)swigCPtr, Region.swigGetCPtr(regValidRegion), uBlockSideLength);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }
}

class SimpleVolumeMaterialDensityPair1616 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(SimpleVolumeMaterialDensityPair1616 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_SimpleVolumeMaterialDensityPair1616(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(Region regValid, ushort uBlockSideLength) {
    this(PolyVoxCore_im.new_SimpleVolumeMaterialDensityPair1616__SWIG_0(Region.swigGetCPtr(regValid), uBlockSideLength), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(Region regValid) {
    this(PolyVoxCore_im.new_SimpleVolumeMaterialDensityPair1616__SWIG_1(Region.swigGetCPtr(regValid)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(int dont_use_this_constructor_1, int dont_use_this_constructor_2, int dont_use_this_constructor_3) {
    this(PolyVoxCore_im.new_SimpleVolumeMaterialDensityPair1616__SWIG_2(dont_use_this_constructor_1, dont_use_this_constructor_2, dont_use_this_constructor_3), true);
  }

  public MaterialDensityPair1616 getBorderValue() const {
    MaterialDensityPair1616 ret = new MaterialDensityPair1616(PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_getBorderValue(cast(void*)swigCPtr), true);
    return ret;
  }

  public Region getEnclosingRegion() const {
    Region ret = new Region(PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_getEnclosingRegion(cast(void*)swigCPtr), true);
    return ret;
  }

  public int getWidth() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_getWidth(cast(void*)swigCPtr);
    return ret;
  }

  public int getHeight() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_getHeight(cast(void*)swigCPtr);
    return ret;
  }

  public int getDepth() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_getDepth(cast(void*)swigCPtr);
    return ret;
  }

  public int getLongestSideLength() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_getLongestSideLength(cast(void*)swigCPtr);
    return ret;
  }

  public int getShortestSideLength() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_getShortestSideLength(cast(void*)swigCPtr);
    return ret;
  }

  public float getDiagonalLength() const {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_getDiagonalLength(cast(void*)swigCPtr);
    return ret;
  }

  public MaterialDensityPair1616 getVoxelAt(int uXPos, int uYPos, int uZPos) const {
    MaterialDensityPair1616 ret = new MaterialDensityPair1616(PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_getVoxelAt__SWIG_0(cast(void*)swigCPtr, uXPos, uYPos, uZPos), true);
    return ret;
  }

  public MaterialDensityPair1616 getVoxelAt(Vector3DInt32 v3dPos) const {
    MaterialDensityPair1616 ret = new MaterialDensityPair1616(PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_getVoxelAt__SWIG_1(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(v3dPos)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setBorderValue(MaterialDensityPair1616 tBorder) {
    PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_setBorderValue(cast(void*)swigCPtr, MaterialDensityPair1616.swigGetCPtr(tBorder));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public bool setVoxelAt(int uXPos, int uYPos, int uZPos, MaterialDensityPair1616 tValue) {
    bool ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_setVoxelAt__SWIG_0(cast(void*)swigCPtr, uXPos, uYPos, uZPos, MaterialDensityPair1616.swigGetCPtr(tValue)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool setVoxelAt(Vector3DInt32 v3dPos, MaterialDensityPair1616 tValue) {
    bool ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_setVoxelAt__SWIG_1(cast(void*)swigCPtr, Vector3DInt32.swigGetCPtr(v3dPos), MaterialDensityPair1616.swigGetCPtr(tValue)) ? true : false;
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public uint calculateSizeInBytes() {
    auto ret = PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_calculateSizeInBytes(cast(void*)swigCPtr);
    return ret;
  }

  public void resize(Region regValidRegion, ushort uBlockSideLength) {
    PolyVoxCore_im.SimpleVolumeMaterialDensityPair1616_resize(cast(void*)swigCPtr, Region.swigGetCPtr(regValidRegion), uBlockSideLength);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }
}

class PositionMaterial {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(PositionMaterial obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_PositionMaterial(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(PolyVoxCore_im.new_PositionMaterial__SWIG_0(), true);
  }

  public this(Vector3DFloat positionToSet, float materialToSet) {
    this(PolyVoxCore_im.new_PositionMaterial__SWIG_1(Vector3DFloat.swigGetCPtr(positionToSet), materialToSet), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public float getMaterial() const {
    auto ret = PolyVoxCore_im.PositionMaterial_getMaterial(cast(void*)swigCPtr);
    return ret;
  }

  public Vector3DFloat getPosition() const {
    Vector3DFloat ret = new Vector3DFloat(PolyVoxCore_im.PositionMaterial_getPosition(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setMaterial(float materialToSet) {
    PolyVoxCore_im.PositionMaterial_setMaterial(cast(void*)swigCPtr, materialToSet);
  }

  public void setPosition(Vector3DFloat positionToSet) {
    PolyVoxCore_im.PositionMaterial_setPosition(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(positionToSet));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void position(Vector3DFloat value) @property {
    PolyVoxCore_im.PositionMaterial_position_set(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(value));
  }

  public Vector3DFloat position() @property const {
    void* cPtr = PolyVoxCore_im.PositionMaterial_position_get(cast(void*)swigCPtr);
    Vector3DFloat ret = (cPtr is null) ? null : new Vector3DFloat(cPtr, false);
    return ret;
  }

  public void material(float value) @property {
    PolyVoxCore_im.PositionMaterial_material_set(cast(void*)swigCPtr, value);
  }

  public float material() @property const {
    auto ret = PolyVoxCore_im.PositionMaterial_material_get(cast(void*)swigCPtr);
    return ret;
  }
}

class PositionMaterialNormal {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(PositionMaterialNormal obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_PositionMaterialNormal(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(PolyVoxCore_im.new_PositionMaterialNormal__SWIG_0(), true);
  }

  public this(Vector3DFloat positionToSet, float materialToSet) {
    this(PolyVoxCore_im.new_PositionMaterialNormal__SWIG_1(Vector3DFloat.swigGetCPtr(positionToSet), materialToSet), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(Vector3DFloat positionToSet, Vector3DFloat normalToSet, float materialToSet) {
    this(PolyVoxCore_im.new_PositionMaterialNormal__SWIG_2(Vector3DFloat.swigGetCPtr(positionToSet), Vector3DFloat.swigGetCPtr(normalToSet), materialToSet), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public float getMaterial() const {
    auto ret = PolyVoxCore_im.PositionMaterialNormal_getMaterial(cast(void*)swigCPtr);
    return ret;
  }

  public Vector3DFloat getNormal() const {
    Vector3DFloat ret = new Vector3DFloat(PolyVoxCore_im.PositionMaterialNormal_getNormal(cast(void*)swigCPtr), false);
    return ret;
  }

  public Vector3DFloat getPosition() const {
    Vector3DFloat ret = new Vector3DFloat(PolyVoxCore_im.PositionMaterialNormal_getPosition(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setMaterial(float materialToSet) {
    PolyVoxCore_im.PositionMaterialNormal_setMaterial(cast(void*)swigCPtr, materialToSet);
  }

  public void setNormal(Vector3DFloat normalToSet) {
    PolyVoxCore_im.PositionMaterialNormal_setNormal(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(normalToSet));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void setPosition(Vector3DFloat positionToSet) {
    PolyVoxCore_im.PositionMaterialNormal_setPosition(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(positionToSet));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void position(Vector3DFloat value) @property {
    PolyVoxCore_im.PositionMaterialNormal_position_set(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(value));
  }

  public Vector3DFloat position() @property const {
    void* cPtr = PolyVoxCore_im.PositionMaterialNormal_position_get(cast(void*)swigCPtr);
    Vector3DFloat ret = (cPtr is null) ? null : new Vector3DFloat(cPtr, false);
    return ret;
  }

  public void normal(Vector3DFloat value) @property {
    PolyVoxCore_im.PositionMaterialNormal_normal_set(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(value));
  }

  public Vector3DFloat normal() @property const {
    void* cPtr = PolyVoxCore_im.PositionMaterialNormal_normal_get(cast(void*)swigCPtr);
    Vector3DFloat ret = (cPtr is null) ? null : new Vector3DFloat(cPtr, false);
    return ret;
  }

  public void material(float value) @property {
    PolyVoxCore_im.PositionMaterialNormal_material_set(cast(void*)swigCPtr, value);
  }

  public float material() @property const {
    auto ret = PolyVoxCore_im.PositionMaterialNormal_material_get(cast(void*)swigCPtr);
    return ret;
  }
}

class LodRecord {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(LodRecord obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_LodRecord(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void beginIndex(int value) @property {
    PolyVoxCore_im.LodRecord_beginIndex_set(cast(void*)swigCPtr, value);
  }

  public int beginIndex() @property const {
    auto ret = PolyVoxCore_im.LodRecord_beginIndex_get(cast(void*)swigCPtr);
    return ret;
  }

  public void endIndex(int value) @property {
    PolyVoxCore_im.LodRecord_endIndex_set(cast(void*)swigCPtr, value);
  }

  public int endIndex() @property const {
    auto ret = PolyVoxCore_im.LodRecord_endIndex_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(PolyVoxCore_im.new_LodRecord(), true);
  }
}

class PositionMaterialVector {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(PositionMaterialVector obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_PositionMaterialVector(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public bool empty() const {
    bool ret = PolyVoxCore_im.PositionMaterialVector_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void clear() {
    PolyVoxCore_im.PositionMaterialVector_clear(cast(void*)swigCPtr);
  }

  public void push_back(PositionMaterial x) {
    PolyVoxCore_im.PositionMaterialVector_push_back(cast(void*)swigCPtr, PositionMaterial.swigGetCPtr(x));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void pop_back() {
    PolyVoxCore_im.PositionMaterialVector_pop_back(cast(void*)swigCPtr);
  }

  public size_t size() const {
    auto ret = PolyVoxCore_im.PositionMaterialVector_size(cast(void*)swigCPtr);
    return ret;
  }

  public size_t capacity() const {
    auto ret = PolyVoxCore_im.PositionMaterialVector_capacity(cast(void*)swigCPtr);
    return ret;
  }

  public void reserve(size_t n) {
    PolyVoxCore_im.PositionMaterialVector_reserve(cast(void*)swigCPtr, n);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this() {
    this(PolyVoxCore_im.new_PositionMaterialVector__SWIG_0(), true);
  }

  public this(PositionMaterialVector other) {
    this(PolyVoxCore_im.new_PositionMaterialVector__SWIG_1(PositionMaterialVector.swigGetCPtr(other)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(size_t capacity) {
    this(PolyVoxCore_im.new_PositionMaterialVector__SWIG_2(capacity), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public PositionMaterial remove() {
    PositionMaterial ret = new PositionMaterial(PolyVoxCore_im.PositionMaterialVector_remove__SWIG_0(cast(void*)swigCPtr), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public PositionMaterial remove(size_t index) {
    PositionMaterial ret = new PositionMaterial(PolyVoxCore_im.PositionMaterialVector_remove__SWIG_1(cast(void*)swigCPtr, index), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void removeBack(size_t how_many) {
    PolyVoxCore_im.PositionMaterialVector_removeBack(cast(void*)swigCPtr, how_many);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void linearRemove(size_t start_index, size_t end_index) {
    PolyVoxCore_im.PositionMaterialVector_linearRemove(cast(void*)swigCPtr, start_index, end_index);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void insertAt(size_t index, PositionMaterial x) {
    PolyVoxCore_im.PositionMaterialVector_insertAt(cast(void*)swigCPtr, index, PositionMaterial.swigGetCPtr(x));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public PositionMaterial getElement(size_t index) {
    PositionMaterial ret = new PositionMaterial(PolyVoxCore_im.PositionMaterialVector_getElement(cast(void*)swigCPtr, index), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setElement(size_t index, PositionMaterial val) {
    PolyVoxCore_im.PositionMaterialVector_setElement(cast(void*)swigCPtr, index, PositionMaterial.swigGetCPtr(val));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  alias size_t KeyType;
  alias PositionMaterial ValueType;

  this(ValueType[] values...) {
    this();
    reserve(values.length);
    foreach (e; values) {
      this ~= e;
    }
  }

  struct Range {
    private PositionMaterialVector _outer;
    private size_t _a, _b;

    this(PositionMaterialVector data, size_t a, size_t b) {
      _outer = data;
      _a = a;
      _b = b;
    }

    @property bool empty() const {
      assert((cast(PositionMaterialVector)_outer).length >= _b);
      return _a >= _b;
    }

    @property Range save() {
      return this;
    }

    @property ValueType front() {
      std.exception.enforce(!empty);
      return _outer[_a];
    }

    @property void front(ValueType value) {
      std.exception.enforce(!empty);
      _outer[_a] = std.algorithm.move(value);
    }

    void popFront() {
      std.exception.enforce(!empty);
      ++_a;
    }

    void opIndexAssign(ValueType value, size_t i) {
      i += _a;
      std.exception.enforce(i < _b && _b <= _outer.length);
      _outer[i] = value;
    }

    void opIndexOpAssign(string op)(ValueType value, size_t i) {
      std.exception.enforce(_outer && _a + i < _b && _b <= _outer.length);
      auto element = _outer[i];
      mixin("element "~op~"= value;");
      _outer[i] = element;
    }
  }

  // TODO: dup?

  Range opSlice() {
    return Range(this, 0, length);
  }

  Range opSlice(size_t a, size_t b) {
    std.exception.enforce(a <= b && b <= length);
    return Range(this, a, b);
  }

  size_t opDollar() const {
    return length;
  }

  @property ValueType front() {
    std.exception.enforce(!empty);
    return getElement(0);
  }

  @property void front(ValueType value) {
    std.exception.enforce(!empty);
    setElement(0, value);
  }

  @property ValueType back() {
    std.exception.enforce(!empty);
    return getElement(length - 1);
  }

  @property void back(ValueType value) {
    std.exception.enforce(!empty);
    setElement(length - 1, value);
  }

  ValueType opIndex(size_t i) {
    return getElement(i);
  }

  void opIndexAssign(ValueType value, size_t i) {
    setElement(i, value);
  }

  void opIndexOpAssign(string op)(ValueType value, size_t i) {
    auto element = this[i];
    mixin("element "~op~"= value;");
    this[i] = element;
  }

  ValueType[] opBinary(string op, Stuff)(Stuff stuff) if (op == "~") {
    ValueType[] result;
    result ~= this[];
    assert(result.length == length);
    result ~= stuff[];
    return result;
  }

  void opOpAssign(string op, Stuff)(Stuff stuff) if (op == "~") {
    static if (is(typeof(insertBack(stuff)))) {
      insertBack(stuff);
    } else if (is(typeof(insertBack(stuff[])))) {
      insertBack(stuff[]);
    } else {
      static assert(false, "Cannot append " ~ Stuff.stringof ~ " to " ~ typeof(this).stringof);
    }
  }

  alias size length;

  alias remove removeAny;
  alias removeAny stableRemoveAny;

  size_t insertBack(Stuff)(Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)){
    push_back(stuff);
    return 1;
  }
  size_t insertBack(Stuff)(Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(std.range.ElementType!Stuff, ValueType)) {
    size_t itemCount;
    foreach(item; stuff) {
      insertBack(item);
      ++itemCount;
    }
    return itemCount;
  }
  alias insertBack insert;

  alias pop_back removeBack;
  alias pop_back stableRemoveBack;

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a < length);
    insertAt(r._a, stuff);
    return 1;
  }

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff && std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a <= length);

    size_t insertCount;
    foreach(i, item; stuff) {
      insertAt(r._a + i, item);
      ++insertCount;
    }

    return insertCount;
  }

  size_t insertAfter(Stuff)(Range r, Stuff stuff) {
    // TODO: optimize
    immutable offset = r._a + r.length;
    std.exception.enforce(offset <= length);
    auto result = insertBack(stuff);
    std.algorithm.bringToFront(this[offset .. length - result],
      this[length - result .. length]);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    immutable offset = r._a;
    std.exception.enforce(offset <= length);
    size_t result;
    for (; !stuff.empty; stuff.popFront()) {
      if (r.empty) {
        // append the rest
        return result + insertBack(stuff);
      }
      r.front = stuff.front;
      r.popFront();
      ++result;
    }
    // Remove remaining stuff in r
    remove(r);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType))
  {
      if (r.empty)
      {
          insertBefore(r, stuff);
      }
      else
      {
          r.front = stuff;
          r.popFront();
          remove(r);
      }
      return 1;
  }

  Range linearRemove(Range r) {
    std.exception.enforce(r._a <= r._b && r._b <= length);
    immutable tailLength = length - r._b;
    linearRemove(r._a, r._b);
    return this[length - tailLength .. length];
  }
  alias remove stableLinearRemove;

  int opApply(int delegate(ref PositionMaterial value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);
      result = dg(value);
      setElement(i, value);
    }
    return result;
  }

  int opApply(int delegate(ref size_t index, ref PositionMaterial value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);

      // Workaround for http://d.puremagic.com/issues/show_bug.cgi?id=2443.
      auto index = i;

      result = dg(index, value);
      setElement(i, value);
    }
    return result;
  }
}

class PositionMaterialNormalVector {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(PositionMaterialNormalVector obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_PositionMaterialNormalVector(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public bool empty() const {
    bool ret = PolyVoxCore_im.PositionMaterialNormalVector_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void clear() {
    PolyVoxCore_im.PositionMaterialNormalVector_clear(cast(void*)swigCPtr);
  }

  public void push_back(PositionMaterialNormal x) {
    PolyVoxCore_im.PositionMaterialNormalVector_push_back(cast(void*)swigCPtr, PositionMaterialNormal.swigGetCPtr(x));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void pop_back() {
    PolyVoxCore_im.PositionMaterialNormalVector_pop_back(cast(void*)swigCPtr);
  }

  public size_t size() const {
    auto ret = PolyVoxCore_im.PositionMaterialNormalVector_size(cast(void*)swigCPtr);
    return ret;
  }

  public size_t capacity() const {
    auto ret = PolyVoxCore_im.PositionMaterialNormalVector_capacity(cast(void*)swigCPtr);
    return ret;
  }

  public void reserve(size_t n) {
    PolyVoxCore_im.PositionMaterialNormalVector_reserve(cast(void*)swigCPtr, n);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this() {
    this(PolyVoxCore_im.new_PositionMaterialNormalVector__SWIG_0(), true);
  }

  public this(PositionMaterialNormalVector other) {
    this(PolyVoxCore_im.new_PositionMaterialNormalVector__SWIG_1(PositionMaterialNormalVector.swigGetCPtr(other)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(size_t capacity) {
    this(PolyVoxCore_im.new_PositionMaterialNormalVector__SWIG_2(capacity), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public PositionMaterialNormal remove() {
    PositionMaterialNormal ret = new PositionMaterialNormal(PolyVoxCore_im.PositionMaterialNormalVector_remove__SWIG_0(cast(void*)swigCPtr), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public PositionMaterialNormal remove(size_t index) {
    PositionMaterialNormal ret = new PositionMaterialNormal(PolyVoxCore_im.PositionMaterialNormalVector_remove__SWIG_1(cast(void*)swigCPtr, index), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void removeBack(size_t how_many) {
    PolyVoxCore_im.PositionMaterialNormalVector_removeBack(cast(void*)swigCPtr, how_many);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void linearRemove(size_t start_index, size_t end_index) {
    PolyVoxCore_im.PositionMaterialNormalVector_linearRemove(cast(void*)swigCPtr, start_index, end_index);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void insertAt(size_t index, PositionMaterialNormal x) {
    PolyVoxCore_im.PositionMaterialNormalVector_insertAt(cast(void*)swigCPtr, index, PositionMaterialNormal.swigGetCPtr(x));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public PositionMaterialNormal getElement(size_t index) {
    PositionMaterialNormal ret = new PositionMaterialNormal(PolyVoxCore_im.PositionMaterialNormalVector_getElement(cast(void*)swigCPtr, index), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setElement(size_t index, PositionMaterialNormal val) {
    PolyVoxCore_im.PositionMaterialNormalVector_setElement(cast(void*)swigCPtr, index, PositionMaterialNormal.swigGetCPtr(val));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  alias size_t KeyType;
  alias PositionMaterialNormal ValueType;

  this(ValueType[] values...) {
    this();
    reserve(values.length);
    foreach (e; values) {
      this ~= e;
    }
  }

  struct Range {
    private PositionMaterialNormalVector _outer;
    private size_t _a, _b;

    this(PositionMaterialNormalVector data, size_t a, size_t b) {
      _outer = data;
      _a = a;
      _b = b;
    }

    @property bool empty() const {
      assert((cast(PositionMaterialNormalVector)_outer).length >= _b);
      return _a >= _b;
    }

    @property Range save() {
      return this;
    }

    @property ValueType front() {
      std.exception.enforce(!empty);
      return _outer[_a];
    }

    @property void front(ValueType value) {
      std.exception.enforce(!empty);
      _outer[_a] = std.algorithm.move(value);
    }

    void popFront() {
      std.exception.enforce(!empty);
      ++_a;
    }

    void opIndexAssign(ValueType value, size_t i) {
      i += _a;
      std.exception.enforce(i < _b && _b <= _outer.length);
      _outer[i] = value;
    }

    void opIndexOpAssign(string op)(ValueType value, size_t i) {
      std.exception.enforce(_outer && _a + i < _b && _b <= _outer.length);
      auto element = _outer[i];
      mixin("element "~op~"= value;");
      _outer[i] = element;
    }
  }

  // TODO: dup?

  Range opSlice() {
    return Range(this, 0, length);
  }

  Range opSlice(size_t a, size_t b) {
    std.exception.enforce(a <= b && b <= length);
    return Range(this, a, b);
  }

  size_t opDollar() const {
    return length;
  }

  @property ValueType front() {
    std.exception.enforce(!empty);
    return getElement(0);
  }

  @property void front(ValueType value) {
    std.exception.enforce(!empty);
    setElement(0, value);
  }

  @property ValueType back() {
    std.exception.enforce(!empty);
    return getElement(length - 1);
  }

  @property void back(ValueType value) {
    std.exception.enforce(!empty);
    setElement(length - 1, value);
  }

  ValueType opIndex(size_t i) {
    return getElement(i);
  }

  void opIndexAssign(ValueType value, size_t i) {
    setElement(i, value);
  }

  void opIndexOpAssign(string op)(ValueType value, size_t i) {
    auto element = this[i];
    mixin("element "~op~"= value;");
    this[i] = element;
  }

  ValueType[] opBinary(string op, Stuff)(Stuff stuff) if (op == "~") {
    ValueType[] result;
    result ~= this[];
    assert(result.length == length);
    result ~= stuff[];
    return result;
  }

  void opOpAssign(string op, Stuff)(Stuff stuff) if (op == "~") {
    static if (is(typeof(insertBack(stuff)))) {
      insertBack(stuff);
    } else if (is(typeof(insertBack(stuff[])))) {
      insertBack(stuff[]);
    } else {
      static assert(false, "Cannot append " ~ Stuff.stringof ~ " to " ~ typeof(this).stringof);
    }
  }

  alias size length;

  alias remove removeAny;
  alias removeAny stableRemoveAny;

  size_t insertBack(Stuff)(Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)){
    push_back(stuff);
    return 1;
  }
  size_t insertBack(Stuff)(Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(std.range.ElementType!Stuff, ValueType)) {
    size_t itemCount;
    foreach(item; stuff) {
      insertBack(item);
      ++itemCount;
    }
    return itemCount;
  }
  alias insertBack insert;

  alias pop_back removeBack;
  alias pop_back stableRemoveBack;

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a < length);
    insertAt(r._a, stuff);
    return 1;
  }

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff && std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a <= length);

    size_t insertCount;
    foreach(i, item; stuff) {
      insertAt(r._a + i, item);
      ++insertCount;
    }

    return insertCount;
  }

  size_t insertAfter(Stuff)(Range r, Stuff stuff) {
    // TODO: optimize
    immutable offset = r._a + r.length;
    std.exception.enforce(offset <= length);
    auto result = insertBack(stuff);
    std.algorithm.bringToFront(this[offset .. length - result],
      this[length - result .. length]);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    immutable offset = r._a;
    std.exception.enforce(offset <= length);
    size_t result;
    for (; !stuff.empty; stuff.popFront()) {
      if (r.empty) {
        // append the rest
        return result + insertBack(stuff);
      }
      r.front = stuff.front;
      r.popFront();
      ++result;
    }
    // Remove remaining stuff in r
    remove(r);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType))
  {
      if (r.empty)
      {
          insertBefore(r, stuff);
      }
      else
      {
          r.front = stuff;
          r.popFront();
          remove(r);
      }
      return 1;
  }

  Range linearRemove(Range r) {
    std.exception.enforce(r._a <= r._b && r._b <= length);
    immutable tailLength = length - r._b;
    linearRemove(r._a, r._b);
    return this[length - tailLength .. length];
  }
  alias remove stableLinearRemove;

  int opApply(int delegate(ref PositionMaterialNormal value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);
      result = dg(value);
      setElement(i, value);
    }
    return result;
  }

  int opApply(int delegate(ref size_t index, ref PositionMaterialNormal value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);

      // Workaround for http://d.puremagic.com/issues/show_bug.cgi?id=2443.
      auto index = i;

      result = dg(index, value);
      setElement(i, value);
    }
    return result;
  }
}

class LodRecordVector {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(LodRecordVector obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_LodRecordVector(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public bool empty() const {
    bool ret = PolyVoxCore_im.LodRecordVector_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void clear() {
    PolyVoxCore_im.LodRecordVector_clear(cast(void*)swigCPtr);
  }

  public void push_back(LodRecord x) {
    PolyVoxCore_im.LodRecordVector_push_back(cast(void*)swigCPtr, LodRecord.swigGetCPtr(x));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void pop_back() {
    PolyVoxCore_im.LodRecordVector_pop_back(cast(void*)swigCPtr);
  }

  public size_t size() const {
    auto ret = PolyVoxCore_im.LodRecordVector_size(cast(void*)swigCPtr);
    return ret;
  }

  public size_t capacity() const {
    auto ret = PolyVoxCore_im.LodRecordVector_capacity(cast(void*)swigCPtr);
    return ret;
  }

  public void reserve(size_t n) {
    PolyVoxCore_im.LodRecordVector_reserve(cast(void*)swigCPtr, n);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this() {
    this(PolyVoxCore_im.new_LodRecordVector__SWIG_0(), true);
  }

  public this(LodRecordVector other) {
    this(PolyVoxCore_im.new_LodRecordVector__SWIG_1(LodRecordVector.swigGetCPtr(other)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(size_t capacity) {
    this(PolyVoxCore_im.new_LodRecordVector__SWIG_2(capacity), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public LodRecord remove() {
    LodRecord ret = new LodRecord(PolyVoxCore_im.LodRecordVector_remove__SWIG_0(cast(void*)swigCPtr), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public LodRecord remove(size_t index) {
    LodRecord ret = new LodRecord(PolyVoxCore_im.LodRecordVector_remove__SWIG_1(cast(void*)swigCPtr, index), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void removeBack(size_t how_many) {
    PolyVoxCore_im.LodRecordVector_removeBack(cast(void*)swigCPtr, how_many);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void linearRemove(size_t start_index, size_t end_index) {
    PolyVoxCore_im.LodRecordVector_linearRemove(cast(void*)swigCPtr, start_index, end_index);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void insertAt(size_t index, LodRecord x) {
    PolyVoxCore_im.LodRecordVector_insertAt(cast(void*)swigCPtr, index, LodRecord.swigGetCPtr(x));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public LodRecord getElement(size_t index) {
    LodRecord ret = new LodRecord(PolyVoxCore_im.LodRecordVector_getElement(cast(void*)swigCPtr, index), false);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setElement(size_t index, LodRecord val) {
    PolyVoxCore_im.LodRecordVector_setElement(cast(void*)swigCPtr, index, LodRecord.swigGetCPtr(val));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  alias size_t KeyType;
  alias LodRecord ValueType;

  this(ValueType[] values...) {
    this();
    reserve(values.length);
    foreach (e; values) {
      this ~= e;
    }
  }

  struct Range {
    private LodRecordVector _outer;
    private size_t _a, _b;

    this(LodRecordVector data, size_t a, size_t b) {
      _outer = data;
      _a = a;
      _b = b;
    }

    @property bool empty() const {
      assert((cast(LodRecordVector)_outer).length >= _b);
      return _a >= _b;
    }

    @property Range save() {
      return this;
    }

    @property ValueType front() {
      std.exception.enforce(!empty);
      return _outer[_a];
    }

    @property void front(ValueType value) {
      std.exception.enforce(!empty);
      _outer[_a] = std.algorithm.move(value);
    }

    void popFront() {
      std.exception.enforce(!empty);
      ++_a;
    }

    void opIndexAssign(ValueType value, size_t i) {
      i += _a;
      std.exception.enforce(i < _b && _b <= _outer.length);
      _outer[i] = value;
    }

    void opIndexOpAssign(string op)(ValueType value, size_t i) {
      std.exception.enforce(_outer && _a + i < _b && _b <= _outer.length);
      auto element = _outer[i];
      mixin("element "~op~"= value;");
      _outer[i] = element;
    }
  }

  // TODO: dup?

  Range opSlice() {
    return Range(this, 0, length);
  }

  Range opSlice(size_t a, size_t b) {
    std.exception.enforce(a <= b && b <= length);
    return Range(this, a, b);
  }

  size_t opDollar() const {
    return length;
  }

  @property ValueType front() {
    std.exception.enforce(!empty);
    return getElement(0);
  }

  @property void front(ValueType value) {
    std.exception.enforce(!empty);
    setElement(0, value);
  }

  @property ValueType back() {
    std.exception.enforce(!empty);
    return getElement(length - 1);
  }

  @property void back(ValueType value) {
    std.exception.enforce(!empty);
    setElement(length - 1, value);
  }

  ValueType opIndex(size_t i) {
    return getElement(i);
  }

  void opIndexAssign(ValueType value, size_t i) {
    setElement(i, value);
  }

  void opIndexOpAssign(string op)(ValueType value, size_t i) {
    auto element = this[i];
    mixin("element "~op~"= value;");
    this[i] = element;
  }

  ValueType[] opBinary(string op, Stuff)(Stuff stuff) if (op == "~") {
    ValueType[] result;
    result ~= this[];
    assert(result.length == length);
    result ~= stuff[];
    return result;
  }

  void opOpAssign(string op, Stuff)(Stuff stuff) if (op == "~") {
    static if (is(typeof(insertBack(stuff)))) {
      insertBack(stuff);
    } else if (is(typeof(insertBack(stuff[])))) {
      insertBack(stuff[]);
    } else {
      static assert(false, "Cannot append " ~ Stuff.stringof ~ " to " ~ typeof(this).stringof);
    }
  }

  alias size length;

  alias remove removeAny;
  alias removeAny stableRemoveAny;

  size_t insertBack(Stuff)(Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)){
    push_back(stuff);
    return 1;
  }
  size_t insertBack(Stuff)(Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(std.range.ElementType!Stuff, ValueType)) {
    size_t itemCount;
    foreach(item; stuff) {
      insertBack(item);
      ++itemCount;
    }
    return itemCount;
  }
  alias insertBack insert;

  alias pop_back removeBack;
  alias pop_back stableRemoveBack;

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a < length);
    insertAt(r._a, stuff);
    return 1;
  }

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff && std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a <= length);

    size_t insertCount;
    foreach(i, item; stuff) {
      insertAt(r._a + i, item);
      ++insertCount;
    }

    return insertCount;
  }

  size_t insertAfter(Stuff)(Range r, Stuff stuff) {
    // TODO: optimize
    immutable offset = r._a + r.length;
    std.exception.enforce(offset <= length);
    auto result = insertBack(stuff);
    std.algorithm.bringToFront(this[offset .. length - result],
      this[length - result .. length]);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    immutable offset = r._a;
    std.exception.enforce(offset <= length);
    size_t result;
    for (; !stuff.empty; stuff.popFront()) {
      if (r.empty) {
        // append the rest
        return result + insertBack(stuff);
      }
      r.front = stuff.front;
      r.popFront();
      ++result;
    }
    // Remove remaining stuff in r
    remove(r);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType))
  {
      if (r.empty)
      {
          insertBefore(r, stuff);
      }
      else
      {
          r.front = stuff;
          r.popFront();
          remove(r);
      }
      return 1;
  }

  Range linearRemove(Range r) {
    std.exception.enforce(r._a <= r._b && r._b <= length);
    immutable tailLength = length - r._b;
    linearRemove(r._a, r._b);
    return this[length - tailLength .. length];
  }
  alias remove stableLinearRemove;

  int opApply(int delegate(ref LodRecord value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);
      result = dg(value);
      setElement(i, value);
    }
    return result;
  }

  int opApply(int delegate(ref size_t index, ref LodRecord value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);

      // Workaround for http://d.puremagic.com/issues/show_bug.cgi?id=2443.
      auto index = i;

      result = dg(index, value);
      setElement(i, value);
    }
    return result;
  }
}

class uint8Vector {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(uint8Vector obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_uint8Vector(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public bool empty() const {
    bool ret = PolyVoxCore_im.uint8Vector_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void clear() {
    PolyVoxCore_im.uint8Vector_clear(cast(void*)swigCPtr);
  }

  public void push_back(ubyte x) {
    PolyVoxCore_im.uint8Vector_push_back(cast(void*)swigCPtr, x);
  }

  public void pop_back() {
    PolyVoxCore_im.uint8Vector_pop_back(cast(void*)swigCPtr);
  }

  public size_t size() const {
    auto ret = PolyVoxCore_im.uint8Vector_size(cast(void*)swigCPtr);
    return ret;
  }

  public size_t capacity() const {
    auto ret = PolyVoxCore_im.uint8Vector_capacity(cast(void*)swigCPtr);
    return ret;
  }

  public void reserve(size_t n) {
    PolyVoxCore_im.uint8Vector_reserve(cast(void*)swigCPtr, n);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this() {
    this(PolyVoxCore_im.new_uint8Vector__SWIG_0(), true);
  }

  public this(uint8Vector other) {
    this(PolyVoxCore_im.new_uint8Vector__SWIG_1(uint8Vector.swigGetCPtr(other)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(size_t capacity) {
    this(PolyVoxCore_im.new_uint8Vector__SWIG_2(capacity), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public ubyte remove() {
    auto ret = PolyVoxCore_im.uint8Vector_remove__SWIG_0(cast(void*)swigCPtr);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public ubyte remove(size_t index) {
    auto ret = PolyVoxCore_im.uint8Vector_remove__SWIG_1(cast(void*)swigCPtr, index);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void removeBack(size_t how_many) {
    PolyVoxCore_im.uint8Vector_removeBack(cast(void*)swigCPtr, how_many);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void linearRemove(size_t start_index, size_t end_index) {
    PolyVoxCore_im.uint8Vector_linearRemove(cast(void*)swigCPtr, start_index, end_index);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void insertAt(size_t index, ubyte x) {
    PolyVoxCore_im.uint8Vector_insertAt(cast(void*)swigCPtr, index, x);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public ubyte getElement(size_t index) {
    auto ret = PolyVoxCore_im.uint8Vector_getElement(cast(void*)swigCPtr, index);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setElement(size_t index, ubyte val) {
    PolyVoxCore_im.uint8Vector_setElement(cast(void*)swigCPtr, index, val);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  alias size_t KeyType;
  alias ubyte ValueType;

  this(ValueType[] values...) {
    this();
    reserve(values.length);
    foreach (e; values) {
      this ~= e;
    }
  }

  struct Range {
    private uint8Vector _outer;
    private size_t _a, _b;

    this(uint8Vector data, size_t a, size_t b) {
      _outer = data;
      _a = a;
      _b = b;
    }

    @property bool empty() const {
      assert((cast(uint8Vector)_outer).length >= _b);
      return _a >= _b;
    }

    @property Range save() {
      return this;
    }

    @property ValueType front() {
      std.exception.enforce(!empty);
      return _outer[_a];
    }

    @property void front(ValueType value) {
      std.exception.enforce(!empty);
      _outer[_a] = std.algorithm.move(value);
    }

    void popFront() {
      std.exception.enforce(!empty);
      ++_a;
    }

    void opIndexAssign(ValueType value, size_t i) {
      i += _a;
      std.exception.enforce(i < _b && _b <= _outer.length);
      _outer[i] = value;
    }

    void opIndexOpAssign(string op)(ValueType value, size_t i) {
      std.exception.enforce(_outer && _a + i < _b && _b <= _outer.length);
      auto element = _outer[i];
      mixin("element "~op~"= value;");
      _outer[i] = element;
    }
  }

  // TODO: dup?

  Range opSlice() {
    return Range(this, 0, length);
  }

  Range opSlice(size_t a, size_t b) {
    std.exception.enforce(a <= b && b <= length);
    return Range(this, a, b);
  }

  size_t opDollar() const {
    return length;
  }

  @property ValueType front() {
    std.exception.enforce(!empty);
    return getElement(0);
  }

  @property void front(ValueType value) {
    std.exception.enforce(!empty);
    setElement(0, value);
  }

  @property ValueType back() {
    std.exception.enforce(!empty);
    return getElement(length - 1);
  }

  @property void back(ValueType value) {
    std.exception.enforce(!empty);
    setElement(length - 1, value);
  }

  ValueType opIndex(size_t i) {
    return getElement(i);
  }

  void opIndexAssign(ValueType value, size_t i) {
    setElement(i, value);
  }

  void opIndexOpAssign(string op)(ValueType value, size_t i) {
    auto element = this[i];
    mixin("element "~op~"= value;");
    this[i] = element;
  }

  ValueType[] opBinary(string op, Stuff)(Stuff stuff) if (op == "~") {
    ValueType[] result;
    result ~= this[];
    assert(result.length == length);
    result ~= stuff[];
    return result;
  }

  void opOpAssign(string op, Stuff)(Stuff stuff) if (op == "~") {
    static if (is(typeof(insertBack(stuff)))) {
      insertBack(stuff);
    } else if (is(typeof(insertBack(stuff[])))) {
      insertBack(stuff[]);
    } else {
      static assert(false, "Cannot append " ~ Stuff.stringof ~ " to " ~ typeof(this).stringof);
    }
  }

  alias size length;

  alias remove removeAny;
  alias removeAny stableRemoveAny;

  size_t insertBack(Stuff)(Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)){
    push_back(stuff);
    return 1;
  }
  size_t insertBack(Stuff)(Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(std.range.ElementType!Stuff, ValueType)) {
    size_t itemCount;
    foreach(item; stuff) {
      insertBack(item);
      ++itemCount;
    }
    return itemCount;
  }
  alias insertBack insert;

  alias pop_back removeBack;
  alias pop_back stableRemoveBack;

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a < length);
    insertAt(r._a, stuff);
    return 1;
  }

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff && std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a <= length);

    size_t insertCount;
    foreach(i, item; stuff) {
      insertAt(r._a + i, item);
      ++insertCount;
    }

    return insertCount;
  }

  size_t insertAfter(Stuff)(Range r, Stuff stuff) {
    // TODO: optimize
    immutable offset = r._a + r.length;
    std.exception.enforce(offset <= length);
    auto result = insertBack(stuff);
    std.algorithm.bringToFront(this[offset .. length - result],
      this[length - result .. length]);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    immutable offset = r._a;
    std.exception.enforce(offset <= length);
    size_t result;
    for (; !stuff.empty; stuff.popFront()) {
      if (r.empty) {
        // append the rest
        return result + insertBack(stuff);
      }
      r.front = stuff.front;
      r.popFront();
      ++result;
    }
    // Remove remaining stuff in r
    remove(r);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType))
  {
      if (r.empty)
      {
          insertBefore(r, stuff);
      }
      else
      {
          r.front = stuff;
          r.popFront();
          remove(r);
      }
      return 1;
  }

  Range linearRemove(Range r) {
    std.exception.enforce(r._a <= r._b && r._b <= length);
    immutable tailLength = length - r._b;
    linearRemove(r._a, r._b);
    return this[length - tailLength .. length];
  }
  alias remove stableLinearRemove;

  int opApply(int delegate(ref ubyte value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);
      result = dg(value);
      setElement(i, value);
    }
    return result;
  }

  int opApply(int delegate(ref size_t index, ref ubyte value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);

      // Workaround for http://d.puremagic.com/issues/show_bug.cgi?id=2443.
      auto index = i;

      result = dg(index, value);
      setElement(i, value);
    }
    return result;
  }
}

class uint32Vector {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(uint32Vector obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_uint32Vector(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public bool empty() const {
    bool ret = PolyVoxCore_im.uint32Vector_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void clear() {
    PolyVoxCore_im.uint32Vector_clear(cast(void*)swigCPtr);
  }

  public void push_back(uint x) {
    PolyVoxCore_im.uint32Vector_push_back(cast(void*)swigCPtr, x);
  }

  public void pop_back() {
    PolyVoxCore_im.uint32Vector_pop_back(cast(void*)swigCPtr);
  }

  public size_t size() const {
    auto ret = PolyVoxCore_im.uint32Vector_size(cast(void*)swigCPtr);
    return ret;
  }

  public size_t capacity() const {
    auto ret = PolyVoxCore_im.uint32Vector_capacity(cast(void*)swigCPtr);
    return ret;
  }

  public void reserve(size_t n) {
    PolyVoxCore_im.uint32Vector_reserve(cast(void*)swigCPtr, n);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this() {
    this(PolyVoxCore_im.new_uint32Vector__SWIG_0(), true);
  }

  public this(uint32Vector other) {
    this(PolyVoxCore_im.new_uint32Vector__SWIG_1(uint32Vector.swigGetCPtr(other)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public this(size_t capacity) {
    this(PolyVoxCore_im.new_uint32Vector__SWIG_2(capacity), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public uint remove() {
    auto ret = PolyVoxCore_im.uint32Vector_remove__SWIG_0(cast(void*)swigCPtr);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public uint remove(size_t index) {
    auto ret = PolyVoxCore_im.uint32Vector_remove__SWIG_1(cast(void*)swigCPtr, index);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void removeBack(size_t how_many) {
    PolyVoxCore_im.uint32Vector_removeBack(cast(void*)swigCPtr, how_many);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void linearRemove(size_t start_index, size_t end_index) {
    PolyVoxCore_im.uint32Vector_linearRemove(cast(void*)swigCPtr, start_index, end_index);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void insertAt(size_t index, uint x) {
    PolyVoxCore_im.uint32Vector_insertAt(cast(void*)swigCPtr, index, x);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public uint getElement(size_t index) {
    auto ret = PolyVoxCore_im.uint32Vector_getElement(cast(void*)swigCPtr, index);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setElement(size_t index, uint val) {
    PolyVoxCore_im.uint32Vector_setElement(cast(void*)swigCPtr, index, val);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  alias size_t KeyType;
  alias uint ValueType;

  this(ValueType[] values...) {
    this();
    reserve(values.length);
    foreach (e; values) {
      this ~= e;
    }
  }

  struct Range {
    private uint32Vector _outer;
    private size_t _a, _b;

    this(uint32Vector data, size_t a, size_t b) {
      _outer = data;
      _a = a;
      _b = b;
    }

    @property bool empty() const {
      assert((cast(uint32Vector)_outer).length >= _b);
      return _a >= _b;
    }

    @property Range save() {
      return this;
    }

    @property ValueType front() {
      std.exception.enforce(!empty);
      return _outer[_a];
    }

    @property void front(ValueType value) {
      std.exception.enforce(!empty);
      _outer[_a] = std.algorithm.move(value);
    }

    void popFront() {
      std.exception.enforce(!empty);
      ++_a;
    }

    void opIndexAssign(ValueType value, size_t i) {
      i += _a;
      std.exception.enforce(i < _b && _b <= _outer.length);
      _outer[i] = value;
    }

    void opIndexOpAssign(string op)(ValueType value, size_t i) {
      std.exception.enforce(_outer && _a + i < _b && _b <= _outer.length);
      auto element = _outer[i];
      mixin("element "~op~"= value;");
      _outer[i] = element;
    }
  }

  // TODO: dup?

  Range opSlice() {
    return Range(this, 0, length);
  }

  Range opSlice(size_t a, size_t b) {
    std.exception.enforce(a <= b && b <= length);
    return Range(this, a, b);
  }

  size_t opDollar() const {
    return length;
  }

  @property ValueType front() {
    std.exception.enforce(!empty);
    return getElement(0);
  }

  @property void front(ValueType value) {
    std.exception.enforce(!empty);
    setElement(0, value);
  }

  @property ValueType back() {
    std.exception.enforce(!empty);
    return getElement(length - 1);
  }

  @property void back(ValueType value) {
    std.exception.enforce(!empty);
    setElement(length - 1, value);
  }

  ValueType opIndex(size_t i) {
    return getElement(i);
  }

  void opIndexAssign(ValueType value, size_t i) {
    setElement(i, value);
  }

  void opIndexOpAssign(string op)(ValueType value, size_t i) {
    auto element = this[i];
    mixin("element "~op~"= value;");
    this[i] = element;
  }

  ValueType[] opBinary(string op, Stuff)(Stuff stuff) if (op == "~") {
    ValueType[] result;
    result ~= this[];
    assert(result.length == length);
    result ~= stuff[];
    return result;
  }

  void opOpAssign(string op, Stuff)(Stuff stuff) if (op == "~") {
    static if (is(typeof(insertBack(stuff)))) {
      insertBack(stuff);
    } else if (is(typeof(insertBack(stuff[])))) {
      insertBack(stuff[]);
    } else {
      static assert(false, "Cannot append " ~ Stuff.stringof ~ " to " ~ typeof(this).stringof);
    }
  }

  alias size length;

  alias remove removeAny;
  alias removeAny stableRemoveAny;

  size_t insertBack(Stuff)(Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)){
    push_back(stuff);
    return 1;
  }
  size_t insertBack(Stuff)(Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(std.range.ElementType!Stuff, ValueType)) {
    size_t itemCount;
    foreach(item; stuff) {
      insertBack(item);
      ++itemCount;
    }
    return itemCount;
  }
  alias insertBack insert;

  alias pop_back removeBack;
  alias pop_back stableRemoveBack;

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a < length);
    insertAt(r._a, stuff);
    return 1;
  }

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff && std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a <= length);

    size_t insertCount;
    foreach(i, item; stuff) {
      insertAt(r._a + i, item);
      ++insertCount;
    }

    return insertCount;
  }

  size_t insertAfter(Stuff)(Range r, Stuff stuff) {
    // TODO: optimize
    immutable offset = r._a + r.length;
    std.exception.enforce(offset <= length);
    auto result = insertBack(stuff);
    std.algorithm.bringToFront(this[offset .. length - result],
      this[length - result .. length]);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    immutable offset = r._a;
    std.exception.enforce(offset <= length);
    size_t result;
    for (; !stuff.empty; stuff.popFront()) {
      if (r.empty) {
        // append the rest
        return result + insertBack(stuff);
      }
      r.front = stuff.front;
      r.popFront();
      ++result;
    }
    // Remove remaining stuff in r
    remove(r);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType))
  {
      if (r.empty)
      {
          insertBefore(r, stuff);
      }
      else
      {
          r.front = stuff;
          r.popFront();
          remove(r);
      }
      return 1;
  }

  Range linearRemove(Range r) {
    std.exception.enforce(r._a <= r._b && r._b <= length);
    immutable tailLength = length - r._b;
    linearRemove(r._a, r._b);
    return this[length - tailLength .. length];
  }
  alias remove stableLinearRemove;

  int opApply(int delegate(ref uint value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);
      result = dg(value);
      setElement(i, value);
    }
    return result;
  }

  int opApply(int delegate(ref size_t index, ref uint value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);

      // Workaround for http://d.puremagic.com/issues/show_bug.cgi?id=2443.
      auto index = i;

      result = dg(index, value);
      setElement(i, value);
    }
    return result;
  }
}

class SurfaceMeshPositionMaterial {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(SurfaceMeshPositionMaterial obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_SurfaceMeshPositionMaterial(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(PolyVoxCore_im.new_SurfaceMeshPositionMaterial(), true);
  }

  public uint32Vector getIndices() const {
    uint32Vector ret = new uint32Vector(PolyVoxCore_im.SurfaceMeshPositionMaterial_getIndices(cast(void*)swigCPtr), false);
    return ret;
  }

  public uint getNoOfIndices() const {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterial_getNoOfIndices(cast(void*)swigCPtr);
    return ret;
  }

  public uint getNoOfNonUniformTrianges() const {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterial_getNoOfNonUniformTrianges(cast(void*)swigCPtr);
    return ret;
  }

  public uint getNoOfUniformTrianges() const {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterial_getNoOfUniformTrianges(cast(void*)swigCPtr);
    return ret;
  }

  public uint getNoOfVertices() const {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterial_getNoOfVertices(cast(void*)swigCPtr);
    return ret;
  }

  public PositionMaterialVector getRawVertexData() {
    PositionMaterialVector ret = new PositionMaterialVector(PolyVoxCore_im.SurfaceMeshPositionMaterial_getRawVertexData(cast(void*)swigCPtr), false);
    return ret;
  }

  public PositionMaterialVector getVertices() const {
    PositionMaterialVector ret = new PositionMaterialVector(PolyVoxCore_im.SurfaceMeshPositionMaterial_getVertices(cast(void*)swigCPtr), false);
    return ret;
  }

  public void addTriangle(uint index0, uint index1, uint index2) {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_addTriangle(cast(void*)swigCPtr, index0, index1, index2);
  }

  public void addTriangleCubic(uint index0, uint index1, uint index2) {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_addTriangleCubic(cast(void*)swigCPtr, index0, index1, index2);
  }

  public uint addVertex(PositionMaterial vertex) {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterial_addVertex(cast(void*)swigCPtr, PositionMaterial.swigGetCPtr(vertex));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void clear() {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_clear(cast(void*)swigCPtr);
  }

  public bool isEmpty() const {
    bool ret = PolyVoxCore_im.SurfaceMeshPositionMaterial_isEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void scaleVertices(float amount) {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_scaleVertices(cast(void*)swigCPtr, amount);
  }

  public void translateVertices(Vector3DFloat amount) {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_translateVertices(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(amount));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public int noOfDegenerateTris() {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterial_noOfDegenerateTris(cast(void*)swigCPtr);
    return ret;
  }

  public void removeDegenerateTris() {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_removeDegenerateTris(cast(void*)swigCPtr);
  }

  public void removeUnusedVertices() {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_removeUnusedVertices(cast(void*)swigCPtr);
  }

  public void m_Region(Region value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_m_Region_set(cast(void*)swigCPtr, Region.swigGetCPtr(value));
  }

  public Region m_Region() @property const {
    void* cPtr = PolyVoxCore_im.SurfaceMeshPositionMaterial_m_Region_get(cast(void*)swigCPtr);
    Region ret = (cPtr is null) ? null : new Region(cPtr, false);
    return ret;
  }

  public void m_iTimeStamp(int value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_m_iTimeStamp_set(cast(void*)swigCPtr, value);
  }

  public int m_iTimeStamp() @property const {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterial_m_iTimeStamp_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_iNoOfLod0Tris(int value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_m_iNoOfLod0Tris_set(cast(void*)swigCPtr, value);
  }

  public int m_iNoOfLod0Tris() @property const {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterial_m_iNoOfLod0Tris_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_vecTriangleIndices(uint32Vector value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_m_vecTriangleIndices_set(cast(void*)swigCPtr, uint32Vector.swigGetCPtr(value));
  }

  public uint32Vector m_vecTriangleIndices() @property const {
    void* cPtr = PolyVoxCore_im.SurfaceMeshPositionMaterial_m_vecTriangleIndices_get(cast(void*)swigCPtr);
    uint32Vector ret = (cPtr is null) ? null : new uint32Vector(cPtr, false);
    return ret;
  }

  public void m_vecVertices(PositionMaterialVector value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_m_vecVertices_set(cast(void*)swigCPtr, PositionMaterialVector.swigGetCPtr(value));
  }

  public PositionMaterialVector m_vecVertices() @property const {
    void* cPtr = PolyVoxCore_im.SurfaceMeshPositionMaterial_m_vecVertices_get(cast(void*)swigCPtr);
    PositionMaterialVector ret = (cPtr is null) ? null : new PositionMaterialVector(cPtr, false);
    return ret;
  }

  public void m_vecLodRecords(LodRecordVector value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_m_vecLodRecords_set(cast(void*)swigCPtr, LodRecordVector.swigGetCPtr(value));
  }

  public LodRecordVector m_vecLodRecords() @property const {
    void* cPtr = PolyVoxCore_im.SurfaceMeshPositionMaterial_m_vecLodRecords_get(cast(void*)swigCPtr);
    LodRecordVector ret = (cPtr is null) ? null : new LodRecordVector(cPtr, false);
    return ret;
  }

  public void m_mapUsedMaterials(SWIGTYPE_p_std__setT_unsigned_char_t value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterial_m_mapUsedMaterials_set(cast(void*)swigCPtr, SWIGTYPE_p_std__setT_unsigned_char_t.swigGetCPtr(value));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_std__setT_unsigned_char_t m_mapUsedMaterials() @property const {
    SWIGTYPE_p_std__setT_unsigned_char_t ret = new SWIGTYPE_p_std__setT_unsigned_char_t(PolyVoxCore_im.SurfaceMeshPositionMaterial_m_mapUsedMaterials_get(cast(void*)swigCPtr), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }
}

class SurfaceMeshPositionMaterialNormal {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(SurfaceMeshPositionMaterialNormal obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_SurfaceMeshPositionMaterialNormal(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(PolyVoxCore_im.new_SurfaceMeshPositionMaterialNormal(), true);
  }

  public uint32Vector getIndices() const {
    uint32Vector ret = new uint32Vector(PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_getIndices(cast(void*)swigCPtr), false);
    return ret;
  }

  public uint getNoOfIndices() const {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_getNoOfIndices(cast(void*)swigCPtr);
    return ret;
  }

  public uint getNoOfNonUniformTrianges() const {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_getNoOfNonUniformTrianges(cast(void*)swigCPtr);
    return ret;
  }

  public uint getNoOfUniformTrianges() const {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_getNoOfUniformTrianges(cast(void*)swigCPtr);
    return ret;
  }

  public uint getNoOfVertices() const {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_getNoOfVertices(cast(void*)swigCPtr);
    return ret;
  }

  public PositionMaterialNormalVector getRawVertexData() {
    PositionMaterialNormalVector ret = new PositionMaterialNormalVector(PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_getRawVertexData(cast(void*)swigCPtr), false);
    return ret;
  }

  public PositionMaterialNormalVector getVertices() const {
    PositionMaterialNormalVector ret = new PositionMaterialNormalVector(PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_getVertices(cast(void*)swigCPtr), false);
    return ret;
  }

  public void addTriangle(uint index0, uint index1, uint index2) {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_addTriangle(cast(void*)swigCPtr, index0, index1, index2);
  }

  public void addTriangleCubic(uint index0, uint index1, uint index2) {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_addTriangleCubic(cast(void*)swigCPtr, index0, index1, index2);
  }

  public uint addVertex(PositionMaterialNormal vertex) {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_addVertex(cast(void*)swigCPtr, PositionMaterialNormal.swigGetCPtr(vertex));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }

  public void clear() {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_clear(cast(void*)swigCPtr);
  }

  public bool isEmpty() const {
    bool ret = PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_isEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void scaleVertices(float amount) {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_scaleVertices(cast(void*)swigCPtr, amount);
  }

  public void translateVertices(Vector3DFloat amount) {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_translateVertices(cast(void*)swigCPtr, Vector3DFloat.swigGetCPtr(amount));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public int noOfDegenerateTris() {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_noOfDegenerateTris(cast(void*)swigCPtr);
    return ret;
  }

  public void removeDegenerateTris() {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_removeDegenerateTris(cast(void*)swigCPtr);
  }

  public void removeUnusedVertices() {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_removeUnusedVertices(cast(void*)swigCPtr);
  }

  public void m_Region(Region value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_Region_set(cast(void*)swigCPtr, Region.swigGetCPtr(value));
  }

  public Region m_Region() @property const {
    void* cPtr = PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_Region_get(cast(void*)swigCPtr);
    Region ret = (cPtr is null) ? null : new Region(cPtr, false);
    return ret;
  }

  public void m_iTimeStamp(int value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_iTimeStamp_set(cast(void*)swigCPtr, value);
  }

  public int m_iTimeStamp() @property const {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_iTimeStamp_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_iNoOfLod0Tris(int value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_iNoOfLod0Tris_set(cast(void*)swigCPtr, value);
  }

  public int m_iNoOfLod0Tris() @property const {
    auto ret = PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_iNoOfLod0Tris_get(cast(void*)swigCPtr);
    return ret;
  }

  public void m_vecTriangleIndices(uint32Vector value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_vecTriangleIndices_set(cast(void*)swigCPtr, uint32Vector.swigGetCPtr(value));
  }

  public uint32Vector m_vecTriangleIndices() @property const {
    void* cPtr = PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_vecTriangleIndices_get(cast(void*)swigCPtr);
    uint32Vector ret = (cPtr is null) ? null : new uint32Vector(cPtr, false);
    return ret;
  }

  public void m_vecVertices(PositionMaterialNormalVector value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_vecVertices_set(cast(void*)swigCPtr, PositionMaterialNormalVector.swigGetCPtr(value));
  }

  public PositionMaterialNormalVector m_vecVertices() @property const {
    void* cPtr = PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_vecVertices_get(cast(void*)swigCPtr);
    PositionMaterialNormalVector ret = (cPtr is null) ? null : new PositionMaterialNormalVector(cPtr, false);
    return ret;
  }

  public void m_vecLodRecords(LodRecordVector value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_vecLodRecords_set(cast(void*)swigCPtr, LodRecordVector.swigGetCPtr(value));
  }

  public LodRecordVector m_vecLodRecords() @property const {
    void* cPtr = PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_vecLodRecords_get(cast(void*)swigCPtr);
    LodRecordVector ret = (cPtr is null) ? null : new LodRecordVector(cPtr, false);
    return ret;
  }

  public void m_mapUsedMaterials(SWIGTYPE_p_std__setT_unsigned_char_t value) @property {
    PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_mapUsedMaterials_set(cast(void*)swigCPtr, SWIGTYPE_p_std__setT_unsigned_char_t.swigGetCPtr(value));
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_std__setT_unsigned_char_t m_mapUsedMaterials() @property const {
    SWIGTYPE_p_std__setT_unsigned_char_t ret = new SWIGTYPE_p_std__setT_unsigned_char_t(PolyVoxCore_im.SurfaceMeshPositionMaterialNormal_m_mapUsedMaterials_get(cast(void*)swigCPtr), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
    return ret;
  }
}

class SurfaceExtractorSimpleVolumeMaterialDensityPair1616 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(SurfaceExtractorSimpleVolumeMaterialDensityPair1616 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_SurfaceExtractorSimpleVolumeMaterialDensityPair1616(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(SimpleVolumeMaterialDensityPair1616 volData, Region region, SurfaceMeshPositionMaterialNormal result) {
    this(PolyVoxCore_im.new_SurfaceExtractorSimpleVolumeMaterialDensityPair1616(SimpleVolumeMaterialDensityPair1616.swigGetCPtr(volData), Region.swigGetCPtr(region), SurfaceMeshPositionMaterialNormal.swigGetCPtr(result)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void execute() {
    PolyVoxCore_im.SurfaceExtractorSimpleVolumeMaterialDensityPair1616_execute(cast(void*)swigCPtr);
  }
}

class CubicSurfaceExtractorWithNormalsSimpleVolumeMaterialDensityPair44 {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(CubicSurfaceExtractorWithNormalsSimpleVolumeMaterialDensityPair44 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCore_im.delete_CubicSurfaceExtractorWithNormalsSimpleVolumeMaterialDensityPair44(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(SimpleVolumeMaterialDensityPair44 volData, Region region, SurfaceMeshPositionMaterialNormal result) {
    this(PolyVoxCore_im.new_CubicSurfaceExtractorWithNormalsSimpleVolumeMaterialDensityPair44(SimpleVolumeMaterialDensityPair44.swigGetCPtr(volData), Region.swigGetCPtr(region), SurfaceMeshPositionMaterialNormal.swigGetCPtr(result)), true);
    if (PolyVoxCore_im.SwigPendingException.isPending) throw PolyVoxCore_im.SwigPendingException.retrieve();
  }

  public void execute() {
    PolyVoxCore_im.CubicSurfaceExtractorWithNormalsSimpleVolumeMaterialDensityPair44_execute(cast(void*)swigCPtr);
  }
}

class SWIGTYPE_p_std__setT_unsigned_char_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_std__setT_unsigned_char_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin PolyVoxCore_im.SwigOperatorDefinitions;
}
