/*
 * Copyright (C) 2010 Mariusz 'shd' Gliwi≈Ñski.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module PolyVoxCore_im;

static import std.conv;

static import std.conv;
static import std.string;


private {
  version(linux) {
    version = Nix;
  } else version(darwin) {
    version = Nix;
  } else version(OSX) {
    version = Nix;
  } else version(FreeBSD) {
    version = Nix;
    version = freebsd;
  } else version(freebsd) {
    version = Nix;
  } else version(Unix) {
    version = Nix;
  } else version(Posix) {
    version = Nix;
  }

  version(Tango) {
    static import tango.stdc.string;
    static import tango.stdc.stringz;

    version (PhobosCompatibility) {
    } else {
      alias char[] string;
      alias wchar[] wstring;
      alias dchar[] dstring;
    }
  } else {
    version(D_Version2) {
      static import std.conv;
    }
    static import std.string;
    static import std.c.string;
  }

  version(D_Version2) {
    mixin("alias const(char)* CCPTR;");
  } else {
    alias char* CCPTR;
  }

  CCPTR swigToCString(string str) {
    version(Tango) {
      return tango.stdc.stringz.toStringz(str);
    } else {
      return std.string.toStringz(str);
    }
  }

  string swigToDString(CCPTR cstr) {
    version(Tango) {
      return tango.stdc.stringz.fromStringz(cstr);
    } else {
      version(D_Version2) {
        mixin("return std.conv.to!string(cstr);");
      } else {
        return std.c.string.toString(cstr);
      }
    }
  }
}

class SwigSwigSharedLibLoadException : Exception {
  this(in string[] libNames, in string[] reasons) {
    string msg = "Failed to load one or more shared libraries:";
    foreach(i, n; libNames) {
      msg ~= "\n\t" ~ n ~ " - ";
      if(i < reasons.length)
        msg ~= reasons[i];
      else
        msg ~= "Unknown";
    }
    super(msg);
  }
}

class SwigSymbolLoadException : Exception {
  this(string SwigSharedLibName, string symbolName) {
    super("Failed to load symbol " ~ symbolName ~ " from shared library " ~ SwigSharedLibName);
    _symbolName = symbolName;
  }

  string symbolName() {
    return _symbolName;
  }

private:
  string _symbolName;
}

private {
  version(Nix) {
    version(freebsd) {
      // the dl* functions are in libc on FreeBSD
    }
    else {
      pragma(lib, "dl");
    }

    version(Tango) {
      import tango.sys.Common;
    } else version(linux) {
      import std.c.linux.linux;
    } else {
      extern(C) {
        const RTLD_NOW = 2;

        void *dlopen(CCPTR file, int mode);
        int dlclose(void* handle);
        void *dlsym(void* handle, CCPTR name);
        CCPTR dlerror();
      }
    }

    alias void* SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return dlopen(swigToCString(libName), RTLD_NOW);
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      dlclose(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return dlsym(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      CCPTR err = dlerror();
      if (err is null) {
        return "Unknown Error";
      }
      return swigToDString(err);
    }
  } else version(Windows) {
    alias ushort WORD;
    alias uint DWORD;
    alias CCPTR LPCSTR;
    alias void* HMODULE;
    alias void* HLOCAL;
    alias int function() FARPROC;
    struct VA_LIST {}

    extern (Windows) {
      HMODULE LoadLibraryA(LPCSTR);
      FARPROC GetProcAddress(HMODULE, LPCSTR);
      void FreeLibrary(HMODULE);
      DWORD GetLastError();
      DWORD FormatMessageA(DWORD, in void*, DWORD, DWORD, LPCSTR, DWORD, VA_LIST*);
      HLOCAL LocalFree(HLOCAL);
    }

    DWORD MAKELANGID(WORD p, WORD s) {
      return (((cast(WORD)s) << 10) | cast(WORD)p);
    }

    enum {
      LANG_NEUTRAL                    = 0,
      SUBLANG_DEFAULT                 = 1,
      FORMAT_MESSAGE_ALLOCATE_BUFFER  = 256,
      FORMAT_MESSAGE_IGNORE_INSERTS   = 512,
      FORMAT_MESSAGE_FROM_SYSTEM      = 4096
    }

    alias HMODULE SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return LoadLibraryA(swigToCString(libName));
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      FreeLibrary(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return GetProcAddress(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      DWORD errcode = GetLastError();

      LPCSTR msgBuf;
      DWORD i = FormatMessageA(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
        FORMAT_MESSAGE_FROM_SYSTEM |
        FORMAT_MESSAGE_IGNORE_INSERTS,
        null,
        errcode,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        cast(LPCSTR)&msgBuf,
        0,
        null);

      string text = swigToDString(msgBuf);
      LocalFree(cast(HLOCAL)msgBuf);

      if (i >= 2) {
        i -= 2;
      }
      return text[0 .. i];
    }
  } else {
    static assert(0, "Operating system not supported by the wrapper loading code.");
  }

  final class SwigSharedLib {
    void load(string[] names) {
      if (_hlib !is null) return;

      string[] failedLibs;
      string[] reasons;

      foreach(n; names) {
        _hlib = swigLoadSharedLib(n);
        if (_hlib is null) {
          failedLibs ~= n;
          reasons ~= swigGetErrorStr();
          continue;
        }
        _name = n;
        break;
      }

      if (_hlib is null) {
        throw new SwigSwigSharedLibLoadException(failedLibs, reasons);
      }
    }

    void* loadSymbol(string symbolName, bool doThrow = true) {
      void* sym = swigGetSymbol(_hlib, symbolName);
      if(doThrow && (sym is null)) {
        throw new SwigSymbolLoadException(_name, symbolName);
      }
      return sym;
    }

    void unload() {
      if(_hlib !is null) {
        swigUnloadSharedLib(_hlib);
        _hlib = null;
      }
    }

  private:
    string _name;
    SwigSharedLibHandle _hlib;
  }
}

static this() {
  string[] possibleFileNames;
  version (Posix) {
    version (OSX) {
      possibleFileNames ~= ["libPolyVoxCore_wrap.dylib", "libPolyVoxCore_wrap.bundle"];
    }
    possibleFileNames ~= ["libPolyVoxCore_wrap.so"];
  } else version (Windows) {
    possibleFileNames ~= ["PolyVoxCore_wrap.dll", "libPolyVoxCore_wrap.so"];
  } else {
    static assert(false, "Operating system not supported by the wrapper loading code.");
  }

  auto library = new SwigSharedLib;
  library.load(possibleFileNames);

  string bindCode(string functionPointer, string symbol) {
    return functionPointer ~ " = cast(typeof(" ~ functionPointer ~
      "))library.loadSymbol(`" ~ symbol ~ "`);";
  }

  //
  mixin(bindCode("swigRegisterExceptionCallbacks", "SWIGRegisterExceptionCallbacks_PolyVoxCore"));
  //
  //
  mixin(bindCode("swigRegisterStringCallback", "SWIGRegisterStringCallback_PolyVoxCore"));
  //
  
  mixin(bindCode("new_Material8__SWIG_0", "D_new_Material8__SWIG_0"));
  mixin(bindCode("new_Material8__SWIG_1", "D_new_Material8__SWIG_1"));
  mixin(bindCode("Material8_swigOpEquals", "D_Material8_swigOpEquals"));
  mixin(bindCode("Material8_notEqualTo", "D_Material8_notEqualTo"));
  mixin(bindCode("Material8_getDensity", "D_Material8_getDensity"));
  mixin(bindCode("Material8_getMaterial", "D_Material8_getMaterial"));
  mixin(bindCode("Material8_setDensity", "D_Material8_setDensity"));
  mixin(bindCode("Material8_setMaterial", "D_Material8_setMaterial"));
  mixin(bindCode("Material8_getMaxDensity", "D_Material8_getMaxDensity"));
  mixin(bindCode("Material8_getMinDensity", "D_Material8_getMinDensity"));
  mixin(bindCode("Material8_getThreshold", "D_Material8_getThreshold"));
  mixin(bindCode("delete_Material8", "D_delete_Material8"));
  mixin(bindCode("new_Density8__SWIG_0", "D_new_Density8__SWIG_0"));
  mixin(bindCode("new_Density8__SWIG_1", "D_new_Density8__SWIG_1"));
  mixin(bindCode("Density8_swigOpEquals", "D_Density8_swigOpEquals"));
  mixin(bindCode("Density8_notEqualTo", "D_Density8_notEqualTo"));
  mixin(bindCode("Density8_getDensity", "D_Density8_getDensity"));
  mixin(bindCode("Density8_getMaterial", "D_Density8_getMaterial"));
  mixin(bindCode("Density8_setDensity", "D_Density8_setDensity"));
  mixin(bindCode("Density8_setMaterial", "D_Density8_setMaterial"));
  mixin(bindCode("Density8_getMaxDensity", "D_Density8_getMaxDensity"));
  mixin(bindCode("Density8_getMinDensity", "D_Density8_getMinDensity"));
  mixin(bindCode("Density8_getThreshold", "D_Density8_getThreshold"));
  mixin(bindCode("delete_Density8", "D_delete_Density8"));
  mixin(bindCode("new_Vector3DFloat__SWIG_0", "D_new_Vector3DFloat__SWIG_0"));
  mixin(bindCode("new_Vector3DFloat__SWIG_1", "D_new_Vector3DFloat__SWIG_1"));
  mixin(bindCode("new_Vector3DFloat__SWIG_2", "D_new_Vector3DFloat__SWIG_2"));
  mixin(bindCode("new_Vector3DFloat__SWIG_3", "D_new_Vector3DFloat__SWIG_3"));
  mixin(bindCode("new_Vector3DFloat__SWIG_4", "D_new_Vector3DFloat__SWIG_4"));
  mixin(bindCode("delete_Vector3DFloat", "D_delete_Vector3DFloat"));
  mixin(bindCode("Vector3DFloat_assignment", "D_Vector3DFloat_assignment"));
  mixin(bindCode("Vector3DFloat_swigOpEquals", "D_Vector3DFloat_swigOpEquals"));
  mixin(bindCode("Vector3DFloat_swigOpLt", "D_Vector3DFloat_swigOpLt"));
  mixin(bindCode("Vector3DFloat_swigOpAddAssign", "D_Vector3DFloat_swigOpAddAssign"));
  mixin(bindCode("Vector3DFloat_swigOpSubAssign", "D_Vector3DFloat_swigOpSubAssign"));
  mixin(bindCode("Vector3DFloat_swigOpMulAssign__SWIG_0", "D_Vector3DFloat_swigOpMulAssign__SWIG_0"));
  mixin(bindCode("Vector3DFloat_swigOpDivAssign__SWIG_0", "D_Vector3DFloat_swigOpDivAssign__SWIG_0"));
  mixin(bindCode("Vector3DFloat_swigOpMulAssign__SWIG_1", "D_Vector3DFloat_swigOpMulAssign__SWIG_1"));
  mixin(bindCode("Vector3DFloat_swigOpDivAssign__SWIG_1", "D_Vector3DFloat_swigOpDivAssign__SWIG_1"));
  mixin(bindCode("Vector3DFloat_getElement", "D_Vector3DFloat_getElement"));
  mixin(bindCode("Vector3DFloat_getX", "D_Vector3DFloat_getX"));
  mixin(bindCode("Vector3DFloat_getY", "D_Vector3DFloat_getY"));
  mixin(bindCode("Vector3DFloat_getZ", "D_Vector3DFloat_getZ"));
  mixin(bindCode("Vector3DFloat_getW", "D_Vector3DFloat_getW"));
  mixin(bindCode("Vector3DFloat_setElement", "D_Vector3DFloat_setElement"));
  mixin(bindCode("Vector3DFloat_setElements__SWIG_0", "D_Vector3DFloat_setElements__SWIG_0"));
  mixin(bindCode("Vector3DFloat_setElements__SWIG_1", "D_Vector3DFloat_setElements__SWIG_1"));
  mixin(bindCode("Vector3DFloat_setElements__SWIG_2", "D_Vector3DFloat_setElements__SWIG_2"));
  mixin(bindCode("Vector3DFloat_setX", "D_Vector3DFloat_setX"));
  mixin(bindCode("Vector3DFloat_setY", "D_Vector3DFloat_setY"));
  mixin(bindCode("Vector3DFloat_setZ", "D_Vector3DFloat_setZ"));
  mixin(bindCode("Vector3DFloat_setW", "D_Vector3DFloat_setW"));
  mixin(bindCode("Vector3DFloat_length", "D_Vector3DFloat_length"));
  mixin(bindCode("Vector3DFloat_lengthSquared", "D_Vector3DFloat_lengthSquared"));
  mixin(bindCode("Vector3DFloat_angleTo", "D_Vector3DFloat_angleTo"));
  mixin(bindCode("Vector3DFloat_cross", "D_Vector3DFloat_cross"));
  mixin(bindCode("Vector3DFloat_dot", "D_Vector3DFloat_dot"));
  mixin(bindCode("Vector3DFloat_normalise", "D_Vector3DFloat_normalise"));
  mixin(bindCode("new_Vector3DDouble__SWIG_0", "D_new_Vector3DDouble__SWIG_0"));
  mixin(bindCode("new_Vector3DDouble__SWIG_1", "D_new_Vector3DDouble__SWIG_1"));
  mixin(bindCode("new_Vector3DDouble__SWIG_2", "D_new_Vector3DDouble__SWIG_2"));
  mixin(bindCode("new_Vector3DDouble__SWIG_3", "D_new_Vector3DDouble__SWIG_3"));
  mixin(bindCode("new_Vector3DDouble__SWIG_4", "D_new_Vector3DDouble__SWIG_4"));
  mixin(bindCode("delete_Vector3DDouble", "D_delete_Vector3DDouble"));
  mixin(bindCode("Vector3DDouble_assignment", "D_Vector3DDouble_assignment"));
  mixin(bindCode("Vector3DDouble_swigOpEquals", "D_Vector3DDouble_swigOpEquals"));
  mixin(bindCode("Vector3DDouble_swigOpLt", "D_Vector3DDouble_swigOpLt"));
  mixin(bindCode("Vector3DDouble_swigOpAddAssign", "D_Vector3DDouble_swigOpAddAssign"));
  mixin(bindCode("Vector3DDouble_swigOpSubAssign", "D_Vector3DDouble_swigOpSubAssign"));
  mixin(bindCode("Vector3DDouble_swigOpMulAssign__SWIG_0", "D_Vector3DDouble_swigOpMulAssign__SWIG_0"));
  mixin(bindCode("Vector3DDouble_swigOpDivAssign__SWIG_0", "D_Vector3DDouble_swigOpDivAssign__SWIG_0"));
  mixin(bindCode("Vector3DDouble_swigOpMulAssign__SWIG_1", "D_Vector3DDouble_swigOpMulAssign__SWIG_1"));
  mixin(bindCode("Vector3DDouble_swigOpDivAssign__SWIG_1", "D_Vector3DDouble_swigOpDivAssign__SWIG_1"));
  mixin(bindCode("Vector3DDouble_getElement", "D_Vector3DDouble_getElement"));
  mixin(bindCode("Vector3DDouble_getX", "D_Vector3DDouble_getX"));
  mixin(bindCode("Vector3DDouble_getY", "D_Vector3DDouble_getY"));
  mixin(bindCode("Vector3DDouble_getZ", "D_Vector3DDouble_getZ"));
  mixin(bindCode("Vector3DDouble_getW", "D_Vector3DDouble_getW"));
  mixin(bindCode("Vector3DDouble_setElement", "D_Vector3DDouble_setElement"));
  mixin(bindCode("Vector3DDouble_setElements__SWIG_0", "D_Vector3DDouble_setElements__SWIG_0"));
  mixin(bindCode("Vector3DDouble_setElements__SWIG_1", "D_Vector3DDouble_setElements__SWIG_1"));
  mixin(bindCode("Vector3DDouble_setElements__SWIG_2", "D_Vector3DDouble_setElements__SWIG_2"));
  mixin(bindCode("Vector3DDouble_setX", "D_Vector3DDouble_setX"));
  mixin(bindCode("Vector3DDouble_setY", "D_Vector3DDouble_setY"));
  mixin(bindCode("Vector3DDouble_setZ", "D_Vector3DDouble_setZ"));
  mixin(bindCode("Vector3DDouble_setW", "D_Vector3DDouble_setW"));
  mixin(bindCode("Vector3DDouble_length", "D_Vector3DDouble_length"));
  mixin(bindCode("Vector3DDouble_lengthSquared", "D_Vector3DDouble_lengthSquared"));
  mixin(bindCode("Vector3DDouble_angleTo", "D_Vector3DDouble_angleTo"));
  mixin(bindCode("Vector3DDouble_cross", "D_Vector3DDouble_cross"));
  mixin(bindCode("Vector3DDouble_dot", "D_Vector3DDouble_dot"));
  mixin(bindCode("Vector3DDouble_normalise", "D_Vector3DDouble_normalise"));
  mixin(bindCode("new_Vector3DInt8__SWIG_0", "D_new_Vector3DInt8__SWIG_0"));
  mixin(bindCode("new_Vector3DInt8__SWIG_1", "D_new_Vector3DInt8__SWIG_1"));
  mixin(bindCode("new_Vector3DInt8__SWIG_2", "D_new_Vector3DInt8__SWIG_2"));
  mixin(bindCode("new_Vector3DInt8__SWIG_3", "D_new_Vector3DInt8__SWIG_3"));
  mixin(bindCode("new_Vector3DInt8__SWIG_4", "D_new_Vector3DInt8__SWIG_4"));
  mixin(bindCode("delete_Vector3DInt8", "D_delete_Vector3DInt8"));
  mixin(bindCode("Vector3DInt8_assignment", "D_Vector3DInt8_assignment"));
  mixin(bindCode("Vector3DInt8_swigOpEquals", "D_Vector3DInt8_swigOpEquals"));
  mixin(bindCode("Vector3DInt8_swigOpLt", "D_Vector3DInt8_swigOpLt"));
  mixin(bindCode("Vector3DInt8_swigOpAddAssign", "D_Vector3DInt8_swigOpAddAssign"));
  mixin(bindCode("Vector3DInt8_swigOpSubAssign", "D_Vector3DInt8_swigOpSubAssign"));
  mixin(bindCode("Vector3DInt8_swigOpMulAssign__SWIG_0", "D_Vector3DInt8_swigOpMulAssign__SWIG_0"));
  mixin(bindCode("Vector3DInt8_swigOpDivAssign__SWIG_0", "D_Vector3DInt8_swigOpDivAssign__SWIG_0"));
  mixin(bindCode("Vector3DInt8_swigOpMulAssign__SWIG_1", "D_Vector3DInt8_swigOpMulAssign__SWIG_1"));
  mixin(bindCode("Vector3DInt8_swigOpDivAssign__SWIG_1", "D_Vector3DInt8_swigOpDivAssign__SWIG_1"));
  mixin(bindCode("Vector3DInt8_getElement", "D_Vector3DInt8_getElement"));
  mixin(bindCode("Vector3DInt8_getX", "D_Vector3DInt8_getX"));
  mixin(bindCode("Vector3DInt8_getY", "D_Vector3DInt8_getY"));
  mixin(bindCode("Vector3DInt8_getZ", "D_Vector3DInt8_getZ"));
  mixin(bindCode("Vector3DInt8_getW", "D_Vector3DInt8_getW"));
  mixin(bindCode("Vector3DInt8_setElement", "D_Vector3DInt8_setElement"));
  mixin(bindCode("Vector3DInt8_setElements__SWIG_0", "D_Vector3DInt8_setElements__SWIG_0"));
  mixin(bindCode("Vector3DInt8_setElements__SWIG_1", "D_Vector3DInt8_setElements__SWIG_1"));
  mixin(bindCode("Vector3DInt8_setElements__SWIG_2", "D_Vector3DInt8_setElements__SWIG_2"));
  mixin(bindCode("Vector3DInt8_setX", "D_Vector3DInt8_setX"));
  mixin(bindCode("Vector3DInt8_setY", "D_Vector3DInt8_setY"));
  mixin(bindCode("Vector3DInt8_setZ", "D_Vector3DInt8_setZ"));
  mixin(bindCode("Vector3DInt8_setW", "D_Vector3DInt8_setW"));
  mixin(bindCode("Vector3DInt8_length", "D_Vector3DInt8_length"));
  mixin(bindCode("Vector3DInt8_lengthSquared", "D_Vector3DInt8_lengthSquared"));
  mixin(bindCode("Vector3DInt8_angleTo", "D_Vector3DInt8_angleTo"));
  mixin(bindCode("Vector3DInt8_cross", "D_Vector3DInt8_cross"));
  mixin(bindCode("Vector3DInt8_dot", "D_Vector3DInt8_dot"));
  mixin(bindCode("Vector3DInt8_normalise", "D_Vector3DInt8_normalise"));
  mixin(bindCode("new_Vector3DUint8__SWIG_0", "D_new_Vector3DUint8__SWIG_0"));
  mixin(bindCode("new_Vector3DUint8__SWIG_1", "D_new_Vector3DUint8__SWIG_1"));
  mixin(bindCode("new_Vector3DUint8__SWIG_2", "D_new_Vector3DUint8__SWIG_2"));
  mixin(bindCode("new_Vector3DUint8__SWIG_3", "D_new_Vector3DUint8__SWIG_3"));
  mixin(bindCode("new_Vector3DUint8__SWIG_4", "D_new_Vector3DUint8__SWIG_4"));
  mixin(bindCode("delete_Vector3DUint8", "D_delete_Vector3DUint8"));
  mixin(bindCode("Vector3DUint8_assignment", "D_Vector3DUint8_assignment"));
  mixin(bindCode("Vector3DUint8_swigOpEquals", "D_Vector3DUint8_swigOpEquals"));
  mixin(bindCode("Vector3DUint8_swigOpLt", "D_Vector3DUint8_swigOpLt"));
  mixin(bindCode("Vector3DUint8_swigOpAddAssign", "D_Vector3DUint8_swigOpAddAssign"));
  mixin(bindCode("Vector3DUint8_swigOpSubAssign", "D_Vector3DUint8_swigOpSubAssign"));
  mixin(bindCode("Vector3DUint8_swigOpMulAssign__SWIG_0", "D_Vector3DUint8_swigOpMulAssign__SWIG_0"));
  mixin(bindCode("Vector3DUint8_swigOpDivAssign__SWIG_0", "D_Vector3DUint8_swigOpDivAssign__SWIG_0"));
  mixin(bindCode("Vector3DUint8_swigOpMulAssign__SWIG_1", "D_Vector3DUint8_swigOpMulAssign__SWIG_1"));
  mixin(bindCode("Vector3DUint8_swigOpDivAssign__SWIG_1", "D_Vector3DUint8_swigOpDivAssign__SWIG_1"));
  mixin(bindCode("Vector3DUint8_getElement", "D_Vector3DUint8_getElement"));
  mixin(bindCode("Vector3DUint8_getX", "D_Vector3DUint8_getX"));
  mixin(bindCode("Vector3DUint8_getY", "D_Vector3DUint8_getY"));
  mixin(bindCode("Vector3DUint8_getZ", "D_Vector3DUint8_getZ"));
  mixin(bindCode("Vector3DUint8_getW", "D_Vector3DUint8_getW"));
  mixin(bindCode("Vector3DUint8_setElement", "D_Vector3DUint8_setElement"));
  mixin(bindCode("Vector3DUint8_setElements__SWIG_0", "D_Vector3DUint8_setElements__SWIG_0"));
  mixin(bindCode("Vector3DUint8_setElements__SWIG_1", "D_Vector3DUint8_setElements__SWIG_1"));
  mixin(bindCode("Vector3DUint8_setElements__SWIG_2", "D_Vector3DUint8_setElements__SWIG_2"));
  mixin(bindCode("Vector3DUint8_setX", "D_Vector3DUint8_setX"));
  mixin(bindCode("Vector3DUint8_setY", "D_Vector3DUint8_setY"));
  mixin(bindCode("Vector3DUint8_setZ", "D_Vector3DUint8_setZ"));
  mixin(bindCode("Vector3DUint8_setW", "D_Vector3DUint8_setW"));
  mixin(bindCode("Vector3DUint8_length", "D_Vector3DUint8_length"));
  mixin(bindCode("Vector3DUint8_lengthSquared", "D_Vector3DUint8_lengthSquared"));
  mixin(bindCode("Vector3DUint8_angleTo", "D_Vector3DUint8_angleTo"));
  mixin(bindCode("Vector3DUint8_cross", "D_Vector3DUint8_cross"));
  mixin(bindCode("Vector3DUint8_dot", "D_Vector3DUint8_dot"));
  mixin(bindCode("Vector3DUint8_normalise", "D_Vector3DUint8_normalise"));
  mixin(bindCode("new_Vector3DInt16__SWIG_0", "D_new_Vector3DInt16__SWIG_0"));
  mixin(bindCode("new_Vector3DInt16__SWIG_1", "D_new_Vector3DInt16__SWIG_1"));
  mixin(bindCode("new_Vector3DInt16__SWIG_2", "D_new_Vector3DInt16__SWIG_2"));
  mixin(bindCode("new_Vector3DInt16__SWIG_3", "D_new_Vector3DInt16__SWIG_3"));
  mixin(bindCode("new_Vector3DInt16__SWIG_4", "D_new_Vector3DInt16__SWIG_4"));
  mixin(bindCode("delete_Vector3DInt16", "D_delete_Vector3DInt16"));
  mixin(bindCode("Vector3DInt16_assignment", "D_Vector3DInt16_assignment"));
  mixin(bindCode("Vector3DInt16_swigOpEquals", "D_Vector3DInt16_swigOpEquals"));
  mixin(bindCode("Vector3DInt16_swigOpLt", "D_Vector3DInt16_swigOpLt"));
  mixin(bindCode("Vector3DInt16_swigOpAddAssign", "D_Vector3DInt16_swigOpAddAssign"));
  mixin(bindCode("Vector3DInt16_swigOpSubAssign", "D_Vector3DInt16_swigOpSubAssign"));
  mixin(bindCode("Vector3DInt16_swigOpMulAssign__SWIG_0", "D_Vector3DInt16_swigOpMulAssign__SWIG_0"));
  mixin(bindCode("Vector3DInt16_swigOpDivAssign__SWIG_0", "D_Vector3DInt16_swigOpDivAssign__SWIG_0"));
  mixin(bindCode("Vector3DInt16_swigOpMulAssign__SWIG_1", "D_Vector3DInt16_swigOpMulAssign__SWIG_1"));
  mixin(bindCode("Vector3DInt16_swigOpDivAssign__SWIG_1", "D_Vector3DInt16_swigOpDivAssign__SWIG_1"));
  mixin(bindCode("Vector3DInt16_getElement", "D_Vector3DInt16_getElement"));
  mixin(bindCode("Vector3DInt16_getX", "D_Vector3DInt16_getX"));
  mixin(bindCode("Vector3DInt16_getY", "D_Vector3DInt16_getY"));
  mixin(bindCode("Vector3DInt16_getZ", "D_Vector3DInt16_getZ"));
  mixin(bindCode("Vector3DInt16_getW", "D_Vector3DInt16_getW"));
  mixin(bindCode("Vector3DInt16_setElement", "D_Vector3DInt16_setElement"));
  mixin(bindCode("Vector3DInt16_setElements__SWIG_0", "D_Vector3DInt16_setElements__SWIG_0"));
  mixin(bindCode("Vector3DInt16_setElements__SWIG_1", "D_Vector3DInt16_setElements__SWIG_1"));
  mixin(bindCode("Vector3DInt16_setElements__SWIG_2", "D_Vector3DInt16_setElements__SWIG_2"));
  mixin(bindCode("Vector3DInt16_setX", "D_Vector3DInt16_setX"));
  mixin(bindCode("Vector3DInt16_setY", "D_Vector3DInt16_setY"));
  mixin(bindCode("Vector3DInt16_setZ", "D_Vector3DInt16_setZ"));
  mixin(bindCode("Vector3DInt16_setW", "D_Vector3DInt16_setW"));
  mixin(bindCode("Vector3DInt16_length", "D_Vector3DInt16_length"));
  mixin(bindCode("Vector3DInt16_lengthSquared", "D_Vector3DInt16_lengthSquared"));
  mixin(bindCode("Vector3DInt16_angleTo", "D_Vector3DInt16_angleTo"));
  mixin(bindCode("Vector3DInt16_cross", "D_Vector3DInt16_cross"));
  mixin(bindCode("Vector3DInt16_dot", "D_Vector3DInt16_dot"));
  mixin(bindCode("Vector3DInt16_normalise", "D_Vector3DInt16_normalise"));
  mixin(bindCode("new_Vector3DUint16__SWIG_0", "D_new_Vector3DUint16__SWIG_0"));
  mixin(bindCode("new_Vector3DUint16__SWIG_1", "D_new_Vector3DUint16__SWIG_1"));
  mixin(bindCode("new_Vector3DUint16__SWIG_2", "D_new_Vector3DUint16__SWIG_2"));
  mixin(bindCode("new_Vector3DUint16__SWIG_3", "D_new_Vector3DUint16__SWIG_3"));
  mixin(bindCode("new_Vector3DUint16__SWIG_4", "D_new_Vector3DUint16__SWIG_4"));
  mixin(bindCode("delete_Vector3DUint16", "D_delete_Vector3DUint16"));
  mixin(bindCode("Vector3DUint16_assignment", "D_Vector3DUint16_assignment"));
  mixin(bindCode("Vector3DUint16_swigOpEquals", "D_Vector3DUint16_swigOpEquals"));
  mixin(bindCode("Vector3DUint16_swigOpLt", "D_Vector3DUint16_swigOpLt"));
  mixin(bindCode("Vector3DUint16_swigOpAddAssign", "D_Vector3DUint16_swigOpAddAssign"));
  mixin(bindCode("Vector3DUint16_swigOpSubAssign", "D_Vector3DUint16_swigOpSubAssign"));
  mixin(bindCode("Vector3DUint16_swigOpMulAssign__SWIG_0", "D_Vector3DUint16_swigOpMulAssign__SWIG_0"));
  mixin(bindCode("Vector3DUint16_swigOpDivAssign__SWIG_0", "D_Vector3DUint16_swigOpDivAssign__SWIG_0"));
  mixin(bindCode("Vector3DUint16_swigOpMulAssign__SWIG_1", "D_Vector3DUint16_swigOpMulAssign__SWIG_1"));
  mixin(bindCode("Vector3DUint16_swigOpDivAssign__SWIG_1", "D_Vector3DUint16_swigOpDivAssign__SWIG_1"));
  mixin(bindCode("Vector3DUint16_getElement", "D_Vector3DUint16_getElement"));
  mixin(bindCode("Vector3DUint16_getX", "D_Vector3DUint16_getX"));
  mixin(bindCode("Vector3DUint16_getY", "D_Vector3DUint16_getY"));
  mixin(bindCode("Vector3DUint16_getZ", "D_Vector3DUint16_getZ"));
  mixin(bindCode("Vector3DUint16_getW", "D_Vector3DUint16_getW"));
  mixin(bindCode("Vector3DUint16_setElement", "D_Vector3DUint16_setElement"));
  mixin(bindCode("Vector3DUint16_setElements__SWIG_0", "D_Vector3DUint16_setElements__SWIG_0"));
  mixin(bindCode("Vector3DUint16_setElements__SWIG_1", "D_Vector3DUint16_setElements__SWIG_1"));
  mixin(bindCode("Vector3DUint16_setElements__SWIG_2", "D_Vector3DUint16_setElements__SWIG_2"));
  mixin(bindCode("Vector3DUint16_setX", "D_Vector3DUint16_setX"));
  mixin(bindCode("Vector3DUint16_setY", "D_Vector3DUint16_setY"));
  mixin(bindCode("Vector3DUint16_setZ", "D_Vector3DUint16_setZ"));
  mixin(bindCode("Vector3DUint16_setW", "D_Vector3DUint16_setW"));
  mixin(bindCode("Vector3DUint16_length", "D_Vector3DUint16_length"));
  mixin(bindCode("Vector3DUint16_lengthSquared", "D_Vector3DUint16_lengthSquared"));
  mixin(bindCode("Vector3DUint16_angleTo", "D_Vector3DUint16_angleTo"));
  mixin(bindCode("Vector3DUint16_cross", "D_Vector3DUint16_cross"));
  mixin(bindCode("Vector3DUint16_dot", "D_Vector3DUint16_dot"));
  mixin(bindCode("Vector3DUint16_normalise", "D_Vector3DUint16_normalise"));
  mixin(bindCode("new_Vector3DInt32__SWIG_0", "D_new_Vector3DInt32__SWIG_0"));
  mixin(bindCode("new_Vector3DInt32__SWIG_1", "D_new_Vector3DInt32__SWIG_1"));
  mixin(bindCode("new_Vector3DInt32__SWIG_2", "D_new_Vector3DInt32__SWIG_2"));
  mixin(bindCode("new_Vector3DInt32__SWIG_3", "D_new_Vector3DInt32__SWIG_3"));
  mixin(bindCode("new_Vector3DInt32__SWIG_4", "D_new_Vector3DInt32__SWIG_4"));
  mixin(bindCode("delete_Vector3DInt32", "D_delete_Vector3DInt32"));
  mixin(bindCode("Vector3DInt32_assignment", "D_Vector3DInt32_assignment"));
  mixin(bindCode("Vector3DInt32_swigOpEquals", "D_Vector3DInt32_swigOpEquals"));
  mixin(bindCode("Vector3DInt32_swigOpLt", "D_Vector3DInt32_swigOpLt"));
  mixin(bindCode("Vector3DInt32_swigOpAddAssign", "D_Vector3DInt32_swigOpAddAssign"));
  mixin(bindCode("Vector3DInt32_swigOpSubAssign", "D_Vector3DInt32_swigOpSubAssign"));
  mixin(bindCode("Vector3DInt32_swigOpMulAssign__SWIG_0", "D_Vector3DInt32_swigOpMulAssign__SWIG_0"));
  mixin(bindCode("Vector3DInt32_swigOpDivAssign__SWIG_0", "D_Vector3DInt32_swigOpDivAssign__SWIG_0"));
  mixin(bindCode("Vector3DInt32_swigOpMulAssign__SWIG_1", "D_Vector3DInt32_swigOpMulAssign__SWIG_1"));
  mixin(bindCode("Vector3DInt32_swigOpDivAssign__SWIG_1", "D_Vector3DInt32_swigOpDivAssign__SWIG_1"));
  mixin(bindCode("Vector3DInt32_getElement", "D_Vector3DInt32_getElement"));
  mixin(bindCode("Vector3DInt32_getX", "D_Vector3DInt32_getX"));
  mixin(bindCode("Vector3DInt32_getY", "D_Vector3DInt32_getY"));
  mixin(bindCode("Vector3DInt32_getZ", "D_Vector3DInt32_getZ"));
  mixin(bindCode("Vector3DInt32_getW", "D_Vector3DInt32_getW"));
  mixin(bindCode("Vector3DInt32_setElement", "D_Vector3DInt32_setElement"));
  mixin(bindCode("Vector3DInt32_setElements__SWIG_0", "D_Vector3DInt32_setElements__SWIG_0"));
  mixin(bindCode("Vector3DInt32_setElements__SWIG_1", "D_Vector3DInt32_setElements__SWIG_1"));
  mixin(bindCode("Vector3DInt32_setElements__SWIG_2", "D_Vector3DInt32_setElements__SWIG_2"));
  mixin(bindCode("Vector3DInt32_setX", "D_Vector3DInt32_setX"));
  mixin(bindCode("Vector3DInt32_setY", "D_Vector3DInt32_setY"));
  mixin(bindCode("Vector3DInt32_setZ", "D_Vector3DInt32_setZ"));
  mixin(bindCode("Vector3DInt32_setW", "D_Vector3DInt32_setW"));
  mixin(bindCode("Vector3DInt32_length", "D_Vector3DInt32_length"));
  mixin(bindCode("Vector3DInt32_lengthSquared", "D_Vector3DInt32_lengthSquared"));
  mixin(bindCode("Vector3DInt32_angleTo", "D_Vector3DInt32_angleTo"));
  mixin(bindCode("Vector3DInt32_cross", "D_Vector3DInt32_cross"));
  mixin(bindCode("Vector3DInt32_dot", "D_Vector3DInt32_dot"));
  mixin(bindCode("Vector3DInt32_normalise", "D_Vector3DInt32_normalise"));
  mixin(bindCode("new_Vector3DUint32__SWIG_0", "D_new_Vector3DUint32__SWIG_0"));
  mixin(bindCode("new_Vector3DUint32__SWIG_1", "D_new_Vector3DUint32__SWIG_1"));
  mixin(bindCode("new_Vector3DUint32__SWIG_2", "D_new_Vector3DUint32__SWIG_2"));
  mixin(bindCode("new_Vector3DUint32__SWIG_3", "D_new_Vector3DUint32__SWIG_3"));
  mixin(bindCode("new_Vector3DUint32__SWIG_4", "D_new_Vector3DUint32__SWIG_4"));
  mixin(bindCode("delete_Vector3DUint32", "D_delete_Vector3DUint32"));
  mixin(bindCode("Vector3DUint32_assignment", "D_Vector3DUint32_assignment"));
  mixin(bindCode("Vector3DUint32_swigOpEquals", "D_Vector3DUint32_swigOpEquals"));
  mixin(bindCode("Vector3DUint32_swigOpLt", "D_Vector3DUint32_swigOpLt"));
  mixin(bindCode("Vector3DUint32_swigOpAddAssign", "D_Vector3DUint32_swigOpAddAssign"));
  mixin(bindCode("Vector3DUint32_swigOpSubAssign", "D_Vector3DUint32_swigOpSubAssign"));
  mixin(bindCode("Vector3DUint32_swigOpMulAssign__SWIG_0", "D_Vector3DUint32_swigOpMulAssign__SWIG_0"));
  mixin(bindCode("Vector3DUint32_swigOpDivAssign__SWIG_0", "D_Vector3DUint32_swigOpDivAssign__SWIG_0"));
  mixin(bindCode("Vector3DUint32_swigOpMulAssign__SWIG_1", "D_Vector3DUint32_swigOpMulAssign__SWIG_1"));
  mixin(bindCode("Vector3DUint32_swigOpDivAssign__SWIG_1", "D_Vector3DUint32_swigOpDivAssign__SWIG_1"));
  mixin(bindCode("Vector3DUint32_getElement", "D_Vector3DUint32_getElement"));
  mixin(bindCode("Vector3DUint32_getX", "D_Vector3DUint32_getX"));
  mixin(bindCode("Vector3DUint32_getY", "D_Vector3DUint32_getY"));
  mixin(bindCode("Vector3DUint32_getZ", "D_Vector3DUint32_getZ"));
  mixin(bindCode("Vector3DUint32_getW", "D_Vector3DUint32_getW"));
  mixin(bindCode("Vector3DUint32_setElement", "D_Vector3DUint32_setElement"));
  mixin(bindCode("Vector3DUint32_setElements__SWIG_0", "D_Vector3DUint32_setElements__SWIG_0"));
  mixin(bindCode("Vector3DUint32_setElements__SWIG_1", "D_Vector3DUint32_setElements__SWIG_1"));
  mixin(bindCode("Vector3DUint32_setElements__SWIG_2", "D_Vector3DUint32_setElements__SWIG_2"));
  mixin(bindCode("Vector3DUint32_setX", "D_Vector3DUint32_setX"));
  mixin(bindCode("Vector3DUint32_setY", "D_Vector3DUint32_setY"));
  mixin(bindCode("Vector3DUint32_setZ", "D_Vector3DUint32_setZ"));
  mixin(bindCode("Vector3DUint32_setW", "D_Vector3DUint32_setW"));
  mixin(bindCode("Vector3DUint32_length", "D_Vector3DUint32_length"));
  mixin(bindCode("Vector3DUint32_lengthSquared", "D_Vector3DUint32_lengthSquared"));
  mixin(bindCode("Vector3DUint32_angleTo", "D_Vector3DUint32_angleTo"));
  mixin(bindCode("Vector3DUint32_cross", "D_Vector3DUint32_cross"));
  mixin(bindCode("Vector3DUint32_dot", "D_Vector3DUint32_dot"));
  mixin(bindCode("Vector3DUint32_normalise", "D_Vector3DUint32_normalise"));
  mixin(bindCode("Region_MaxRegion_get", "D_Region_MaxRegion_get"));
  mixin(bindCode("new_Region__SWIG_0", "D_new_Region__SWIG_0"));
  mixin(bindCode("new_Region__SWIG_1", "D_new_Region__SWIG_1"));
  mixin(bindCode("Region_getLowerCorner", "D_Region_getLowerCorner"));
  mixin(bindCode("Region_getUpperCorner", "D_Region_getUpperCorner"));
  mixin(bindCode("Region_setLowerCorner", "D_Region_setLowerCorner"));
  mixin(bindCode("Region_setUpperCorner", "D_Region_setUpperCorner"));
  mixin(bindCode("Region_containsPoint__SWIG_0", "D_Region_containsPoint__SWIG_0"));
  mixin(bindCode("Region_containsPoint__SWIG_1", "D_Region_containsPoint__SWIG_1"));
  mixin(bindCode("Region_containsPoint__SWIG_2", "D_Region_containsPoint__SWIG_2"));
  mixin(bindCode("Region_containsPoint__SWIG_3", "D_Region_containsPoint__SWIG_3"));
  mixin(bindCode("Region_cropTo", "D_Region_cropTo"));
  mixin(bindCode("Region_depth", "D_Region_depth"));
  mixin(bindCode("Region_height", "D_Region_height"));
  mixin(bindCode("Region_shift", "D_Region_shift"));
  mixin(bindCode("Region_shiftLowerCorner", "D_Region_shiftLowerCorner"));
  mixin(bindCode("Region_shiftUpperCorner", "D_Region_shiftUpperCorner"));
  mixin(bindCode("Region_dimensions", "D_Region_dimensions"));
  mixin(bindCode("Region_width", "D_Region_width"));
  mixin(bindCode("delete_Region", "D_delete_Region"));
  mixin(bindCode("new_SimpleVolumeMaterial8__SWIG_0", "D_new_SimpleVolumeMaterial8__SWIG_0"));
  mixin(bindCode("new_SimpleVolumeMaterial8__SWIG_1", "D_new_SimpleVolumeMaterial8__SWIG_1"));
  mixin(bindCode("new_SimpleVolumeMaterial8__SWIG_2", "D_new_SimpleVolumeMaterial8__SWIG_2"));
  mixin(bindCode("delete_SimpleVolumeMaterial8", "D_delete_SimpleVolumeMaterial8"));
  mixin(bindCode("SimpleVolumeMaterial8_getBorderValue", "D_SimpleVolumeMaterial8_getBorderValue"));
  mixin(bindCode("SimpleVolumeMaterial8_getEnclosingRegion", "D_SimpleVolumeMaterial8_getEnclosingRegion"));
  mixin(bindCode("SimpleVolumeMaterial8_getWidth", "D_SimpleVolumeMaterial8_getWidth"));
  mixin(bindCode("SimpleVolumeMaterial8_getHeight", "D_SimpleVolumeMaterial8_getHeight"));
  mixin(bindCode("SimpleVolumeMaterial8_getDepth", "D_SimpleVolumeMaterial8_getDepth"));
  mixin(bindCode("SimpleVolumeMaterial8_getLongestSideLength", "D_SimpleVolumeMaterial8_getLongestSideLength"));
  mixin(bindCode("SimpleVolumeMaterial8_getShortestSideLength", "D_SimpleVolumeMaterial8_getShortestSideLength"));
  mixin(bindCode("SimpleVolumeMaterial8_getDiagonalLength", "D_SimpleVolumeMaterial8_getDiagonalLength"));
  mixin(bindCode("SimpleVolumeMaterial8_getVoxelAt__SWIG_0", "D_SimpleVolumeMaterial8_getVoxelAt__SWIG_0"));
  mixin(bindCode("SimpleVolumeMaterial8_getVoxelAt__SWIG_1", "D_SimpleVolumeMaterial8_getVoxelAt__SWIG_1"));
  mixin(bindCode("SimpleVolumeMaterial8_setBorderValue", "D_SimpleVolumeMaterial8_setBorderValue"));
  mixin(bindCode("SimpleVolumeMaterial8_setVoxelAt__SWIG_0", "D_SimpleVolumeMaterial8_setVoxelAt__SWIG_0"));
  mixin(bindCode("SimpleVolumeMaterial8_setVoxelAt__SWIG_1", "D_SimpleVolumeMaterial8_setVoxelAt__SWIG_1"));
  mixin(bindCode("SimpleVolumeMaterial8_calculateSizeInBytes", "D_SimpleVolumeMaterial8_calculateSizeInBytes"));
  mixin(bindCode("SimpleVolumeMaterial8_resize", "D_SimpleVolumeMaterial8_resize"));
  mixin(bindCode("new_SimpleVolumeDensity8__SWIG_0", "D_new_SimpleVolumeDensity8__SWIG_0"));
  mixin(bindCode("new_SimpleVolumeDensity8__SWIG_1", "D_new_SimpleVolumeDensity8__SWIG_1"));
  mixin(bindCode("new_SimpleVolumeDensity8__SWIG_2", "D_new_SimpleVolumeDensity8__SWIG_2"));
  mixin(bindCode("delete_SimpleVolumeDensity8", "D_delete_SimpleVolumeDensity8"));
  mixin(bindCode("SimpleVolumeDensity8_getBorderValue", "D_SimpleVolumeDensity8_getBorderValue"));
  mixin(bindCode("SimpleVolumeDensity8_getEnclosingRegion", "D_SimpleVolumeDensity8_getEnclosingRegion"));
  mixin(bindCode("SimpleVolumeDensity8_getWidth", "D_SimpleVolumeDensity8_getWidth"));
  mixin(bindCode("SimpleVolumeDensity8_getHeight", "D_SimpleVolumeDensity8_getHeight"));
  mixin(bindCode("SimpleVolumeDensity8_getDepth", "D_SimpleVolumeDensity8_getDepth"));
  mixin(bindCode("SimpleVolumeDensity8_getLongestSideLength", "D_SimpleVolumeDensity8_getLongestSideLength"));
  mixin(bindCode("SimpleVolumeDensity8_getShortestSideLength", "D_SimpleVolumeDensity8_getShortestSideLength"));
  mixin(bindCode("SimpleVolumeDensity8_getDiagonalLength", "D_SimpleVolumeDensity8_getDiagonalLength"));
  mixin(bindCode("SimpleVolumeDensity8_getVoxelAt__SWIG_0", "D_SimpleVolumeDensity8_getVoxelAt__SWIG_0"));
  mixin(bindCode("SimpleVolumeDensity8_getVoxelAt__SWIG_1", "D_SimpleVolumeDensity8_getVoxelAt__SWIG_1"));
  mixin(bindCode("SimpleVolumeDensity8_setBorderValue", "D_SimpleVolumeDensity8_setBorderValue"));
  mixin(bindCode("SimpleVolumeDensity8_setVoxelAt__SWIG_0", "D_SimpleVolumeDensity8_setVoxelAt__SWIG_0"));
  mixin(bindCode("SimpleVolumeDensity8_setVoxelAt__SWIG_1", "D_SimpleVolumeDensity8_setVoxelAt__SWIG_1"));
  mixin(bindCode("SimpleVolumeDensity8_calculateSizeInBytes", "D_SimpleVolumeDensity8_calculateSizeInBytes"));
  mixin(bindCode("SimpleVolumeDensity8_resize", "D_SimpleVolumeDensity8_resize"));
  mixin(bindCode("new_PositionMaterial__SWIG_0", "D_new_PositionMaterial__SWIG_0"));
  mixin(bindCode("new_PositionMaterial__SWIG_1", "D_new_PositionMaterial__SWIG_1"));
  mixin(bindCode("PositionMaterial_getMaterial", "D_PositionMaterial_getMaterial"));
  mixin(bindCode("PositionMaterial_getPosition", "D_PositionMaterial_getPosition"));
  mixin(bindCode("PositionMaterial_setMaterial", "D_PositionMaterial_setMaterial"));
  mixin(bindCode("PositionMaterial_setPosition", "D_PositionMaterial_setPosition"));
  mixin(bindCode("PositionMaterial_position_set", "D_PositionMaterial_position_set"));
  mixin(bindCode("PositionMaterial_position_get", "D_PositionMaterial_position_get"));
  mixin(bindCode("PositionMaterial_material_set", "D_PositionMaterial_material_set"));
  mixin(bindCode("PositionMaterial_material_get", "D_PositionMaterial_material_get"));
  mixin(bindCode("delete_PositionMaterial", "D_delete_PositionMaterial"));
  mixin(bindCode("new_PositionMaterialNormal__SWIG_0", "D_new_PositionMaterialNormal__SWIG_0"));
  mixin(bindCode("new_PositionMaterialNormal__SWIG_1", "D_new_PositionMaterialNormal__SWIG_1"));
  mixin(bindCode("new_PositionMaterialNormal__SWIG_2", "D_new_PositionMaterialNormal__SWIG_2"));
  mixin(bindCode("PositionMaterialNormal_getMaterial", "D_PositionMaterialNormal_getMaterial"));
  mixin(bindCode("PositionMaterialNormal_getNormal", "D_PositionMaterialNormal_getNormal"));
  mixin(bindCode("PositionMaterialNormal_getPosition", "D_PositionMaterialNormal_getPosition"));
  mixin(bindCode("PositionMaterialNormal_setMaterial", "D_PositionMaterialNormal_setMaterial"));
  mixin(bindCode("PositionMaterialNormal_setNormal", "D_PositionMaterialNormal_setNormal"));
  mixin(bindCode("PositionMaterialNormal_setPosition", "D_PositionMaterialNormal_setPosition"));
  mixin(bindCode("PositionMaterialNormal_position_set", "D_PositionMaterialNormal_position_set"));
  mixin(bindCode("PositionMaterialNormal_position_get", "D_PositionMaterialNormal_position_get"));
  mixin(bindCode("PositionMaterialNormal_normal_set", "D_PositionMaterialNormal_normal_set"));
  mixin(bindCode("PositionMaterialNormal_normal_get", "D_PositionMaterialNormal_normal_get"));
  mixin(bindCode("PositionMaterialNormal_material_set", "D_PositionMaterialNormal_material_set"));
  mixin(bindCode("PositionMaterialNormal_material_get", "D_PositionMaterialNormal_material_get"));
  mixin(bindCode("delete_PositionMaterialNormal", "D_delete_PositionMaterialNormal"));
  mixin(bindCode("LodRecord_beginIndex_set", "D_LodRecord_beginIndex_set"));
  mixin(bindCode("LodRecord_beginIndex_get", "D_LodRecord_beginIndex_get"));
  mixin(bindCode("LodRecord_endIndex_set", "D_LodRecord_endIndex_set"));
  mixin(bindCode("LodRecord_endIndex_get", "D_LodRecord_endIndex_get"));
  mixin(bindCode("new_LodRecord", "D_new_LodRecord"));
  mixin(bindCode("delete_LodRecord", "D_delete_LodRecord"));
  mixin(bindCode("PositionMaterialVector_empty", "D_PositionMaterialVector_empty"));
  mixin(bindCode("PositionMaterialVector_clear", "D_PositionMaterialVector_clear"));
  mixin(bindCode("PositionMaterialVector_push_back", "D_PositionMaterialVector_push_back"));
  mixin(bindCode("PositionMaterialVector_pop_back", "D_PositionMaterialVector_pop_back"));
  mixin(bindCode("PositionMaterialVector_size", "D_PositionMaterialVector_size"));
  mixin(bindCode("PositionMaterialVector_capacity", "D_PositionMaterialVector_capacity"));
  mixin(bindCode("PositionMaterialVector_reserve", "D_PositionMaterialVector_reserve"));
  mixin(bindCode("new_PositionMaterialVector__SWIG_0", "D_new_PositionMaterialVector__SWIG_0"));
  mixin(bindCode("new_PositionMaterialVector__SWIG_1", "D_new_PositionMaterialVector__SWIG_1"));
  mixin(bindCode("new_PositionMaterialVector__SWIG_2", "D_new_PositionMaterialVector__SWIG_2"));
  mixin(bindCode("PositionMaterialVector_remove__SWIG_0", "D_PositionMaterialVector_remove__SWIG_0"));
  mixin(bindCode("PositionMaterialVector_remove__SWIG_1", "D_PositionMaterialVector_remove__SWIG_1"));
  mixin(bindCode("PositionMaterialVector_removeBack", "D_PositionMaterialVector_removeBack"));
  mixin(bindCode("PositionMaterialVector_linearRemove", "D_PositionMaterialVector_linearRemove"));
  mixin(bindCode("PositionMaterialVector_insertAt", "D_PositionMaterialVector_insertAt"));
  mixin(bindCode("PositionMaterialVector_getElement", "D_PositionMaterialVector_getElement"));
  mixin(bindCode("PositionMaterialVector_setElement", "D_PositionMaterialVector_setElement"));
  mixin(bindCode("delete_PositionMaterialVector", "D_delete_PositionMaterialVector"));
  mixin(bindCode("PositionMaterialNormalVector_empty", "D_PositionMaterialNormalVector_empty"));
  mixin(bindCode("PositionMaterialNormalVector_clear", "D_PositionMaterialNormalVector_clear"));
  mixin(bindCode("PositionMaterialNormalVector_push_back", "D_PositionMaterialNormalVector_push_back"));
  mixin(bindCode("PositionMaterialNormalVector_pop_back", "D_PositionMaterialNormalVector_pop_back"));
  mixin(bindCode("PositionMaterialNormalVector_size", "D_PositionMaterialNormalVector_size"));
  mixin(bindCode("PositionMaterialNormalVector_capacity", "D_PositionMaterialNormalVector_capacity"));
  mixin(bindCode("PositionMaterialNormalVector_reserve", "D_PositionMaterialNormalVector_reserve"));
  mixin(bindCode("new_PositionMaterialNormalVector__SWIG_0", "D_new_PositionMaterialNormalVector__SWIG_0"));
  mixin(bindCode("new_PositionMaterialNormalVector__SWIG_1", "D_new_PositionMaterialNormalVector__SWIG_1"));
  mixin(bindCode("new_PositionMaterialNormalVector__SWIG_2", "D_new_PositionMaterialNormalVector__SWIG_2"));
  mixin(bindCode("PositionMaterialNormalVector_remove__SWIG_0", "D_PositionMaterialNormalVector_remove__SWIG_0"));
  mixin(bindCode("PositionMaterialNormalVector_remove__SWIG_1", "D_PositionMaterialNormalVector_remove__SWIG_1"));
  mixin(bindCode("PositionMaterialNormalVector_removeBack", "D_PositionMaterialNormalVector_removeBack"));
  mixin(bindCode("PositionMaterialNormalVector_linearRemove", "D_PositionMaterialNormalVector_linearRemove"));
  mixin(bindCode("PositionMaterialNormalVector_insertAt", "D_PositionMaterialNormalVector_insertAt"));
  mixin(bindCode("PositionMaterialNormalVector_getElement", "D_PositionMaterialNormalVector_getElement"));
  mixin(bindCode("PositionMaterialNormalVector_setElement", "D_PositionMaterialNormalVector_setElement"));
  mixin(bindCode("delete_PositionMaterialNormalVector", "D_delete_PositionMaterialNormalVector"));
  mixin(bindCode("LodRecordVector_empty", "D_LodRecordVector_empty"));
  mixin(bindCode("LodRecordVector_clear", "D_LodRecordVector_clear"));
  mixin(bindCode("LodRecordVector_push_back", "D_LodRecordVector_push_back"));
  mixin(bindCode("LodRecordVector_pop_back", "D_LodRecordVector_pop_back"));
  mixin(bindCode("LodRecordVector_size", "D_LodRecordVector_size"));
  mixin(bindCode("LodRecordVector_capacity", "D_LodRecordVector_capacity"));
  mixin(bindCode("LodRecordVector_reserve", "D_LodRecordVector_reserve"));
  mixin(bindCode("new_LodRecordVector__SWIG_0", "D_new_LodRecordVector__SWIG_0"));
  mixin(bindCode("new_LodRecordVector__SWIG_1", "D_new_LodRecordVector__SWIG_1"));
  mixin(bindCode("new_LodRecordVector__SWIG_2", "D_new_LodRecordVector__SWIG_2"));
  mixin(bindCode("LodRecordVector_remove__SWIG_0", "D_LodRecordVector_remove__SWIG_0"));
  mixin(bindCode("LodRecordVector_remove__SWIG_1", "D_LodRecordVector_remove__SWIG_1"));
  mixin(bindCode("LodRecordVector_removeBack", "D_LodRecordVector_removeBack"));
  mixin(bindCode("LodRecordVector_linearRemove", "D_LodRecordVector_linearRemove"));
  mixin(bindCode("LodRecordVector_insertAt", "D_LodRecordVector_insertAt"));
  mixin(bindCode("LodRecordVector_getElement", "D_LodRecordVector_getElement"));
  mixin(bindCode("LodRecordVector_setElement", "D_LodRecordVector_setElement"));
  mixin(bindCode("delete_LodRecordVector", "D_delete_LodRecordVector"));
  mixin(bindCode("uint8Vector_empty", "D_uint8Vector_empty"));
  mixin(bindCode("uint8Vector_clear", "D_uint8Vector_clear"));
  mixin(bindCode("uint8Vector_push_back", "D_uint8Vector_push_back"));
  mixin(bindCode("uint8Vector_pop_back", "D_uint8Vector_pop_back"));
  mixin(bindCode("uint8Vector_size", "D_uint8Vector_size"));
  mixin(bindCode("uint8Vector_capacity", "D_uint8Vector_capacity"));
  mixin(bindCode("uint8Vector_reserve", "D_uint8Vector_reserve"));
  mixin(bindCode("new_uint8Vector__SWIG_0", "D_new_uint8Vector__SWIG_0"));
  mixin(bindCode("new_uint8Vector__SWIG_1", "D_new_uint8Vector__SWIG_1"));
  mixin(bindCode("new_uint8Vector__SWIG_2", "D_new_uint8Vector__SWIG_2"));
  mixin(bindCode("uint8Vector_remove__SWIG_0", "D_uint8Vector_remove__SWIG_0"));
  mixin(bindCode("uint8Vector_remove__SWIG_1", "D_uint8Vector_remove__SWIG_1"));
  mixin(bindCode("uint8Vector_removeBack", "D_uint8Vector_removeBack"));
  mixin(bindCode("uint8Vector_linearRemove", "D_uint8Vector_linearRemove"));
  mixin(bindCode("uint8Vector_insertAt", "D_uint8Vector_insertAt"));
  mixin(bindCode("uint8Vector_getElement", "D_uint8Vector_getElement"));
  mixin(bindCode("uint8Vector_setElement", "D_uint8Vector_setElement"));
  mixin(bindCode("delete_uint8Vector", "D_delete_uint8Vector"));
  mixin(bindCode("uint32Vector_empty", "D_uint32Vector_empty"));
  mixin(bindCode("uint32Vector_clear", "D_uint32Vector_clear"));
  mixin(bindCode("uint32Vector_push_back", "D_uint32Vector_push_back"));
  mixin(bindCode("uint32Vector_pop_back", "D_uint32Vector_pop_back"));
  mixin(bindCode("uint32Vector_size", "D_uint32Vector_size"));
  mixin(bindCode("uint32Vector_capacity", "D_uint32Vector_capacity"));
  mixin(bindCode("uint32Vector_reserve", "D_uint32Vector_reserve"));
  mixin(bindCode("new_uint32Vector__SWIG_0", "D_new_uint32Vector__SWIG_0"));
  mixin(bindCode("new_uint32Vector__SWIG_1", "D_new_uint32Vector__SWIG_1"));
  mixin(bindCode("new_uint32Vector__SWIG_2", "D_new_uint32Vector__SWIG_2"));
  mixin(bindCode("uint32Vector_remove__SWIG_0", "D_uint32Vector_remove__SWIG_0"));
  mixin(bindCode("uint32Vector_remove__SWIG_1", "D_uint32Vector_remove__SWIG_1"));
  mixin(bindCode("uint32Vector_removeBack", "D_uint32Vector_removeBack"));
  mixin(bindCode("uint32Vector_linearRemove", "D_uint32Vector_linearRemove"));
  mixin(bindCode("uint32Vector_insertAt", "D_uint32Vector_insertAt"));
  mixin(bindCode("uint32Vector_getElement", "D_uint32Vector_getElement"));
  mixin(bindCode("uint32Vector_setElement", "D_uint32Vector_setElement"));
  mixin(bindCode("delete_uint32Vector", "D_delete_uint32Vector"));
  mixin(bindCode("new_SurfaceMeshPositionMaterial", "D_new_SurfaceMeshPositionMaterial"));
  mixin(bindCode("delete_SurfaceMeshPositionMaterial", "D_delete_SurfaceMeshPositionMaterial"));
  mixin(bindCode("SurfaceMeshPositionMaterial_getIndices", "D_SurfaceMeshPositionMaterial_getIndices"));
  mixin(bindCode("SurfaceMeshPositionMaterial_getNoOfIndices", "D_SurfaceMeshPositionMaterial_getNoOfIndices"));
  mixin(bindCode("SurfaceMeshPositionMaterial_getNoOfNonUniformTrianges", "D_SurfaceMeshPositionMaterial_getNoOfNonUniformTrianges"));
  mixin(bindCode("SurfaceMeshPositionMaterial_getNoOfUniformTrianges", "D_SurfaceMeshPositionMaterial_getNoOfUniformTrianges"));
  mixin(bindCode("SurfaceMeshPositionMaterial_getNoOfVertices", "D_SurfaceMeshPositionMaterial_getNoOfVertices"));
  mixin(bindCode("SurfaceMeshPositionMaterial_getRawVertexData", "D_SurfaceMeshPositionMaterial_getRawVertexData"));
  mixin(bindCode("SurfaceMeshPositionMaterial_getVertices", "D_SurfaceMeshPositionMaterial_getVertices"));
  mixin(bindCode("SurfaceMeshPositionMaterial_addTriangle", "D_SurfaceMeshPositionMaterial_addTriangle"));
  mixin(bindCode("SurfaceMeshPositionMaterial_addTriangleCubic", "D_SurfaceMeshPositionMaterial_addTriangleCubic"));
  mixin(bindCode("SurfaceMeshPositionMaterial_addVertex", "D_SurfaceMeshPositionMaterial_addVertex"));
  mixin(bindCode("SurfaceMeshPositionMaterial_clear", "D_SurfaceMeshPositionMaterial_clear"));
  mixin(bindCode("SurfaceMeshPositionMaterial_isEmpty", "D_SurfaceMeshPositionMaterial_isEmpty"));
  mixin(bindCode("SurfaceMeshPositionMaterial_scaleVertices", "D_SurfaceMeshPositionMaterial_scaleVertices"));
  mixin(bindCode("SurfaceMeshPositionMaterial_translateVertices", "D_SurfaceMeshPositionMaterial_translateVertices"));
  mixin(bindCode("SurfaceMeshPositionMaterial_noOfDegenerateTris", "D_SurfaceMeshPositionMaterial_noOfDegenerateTris"));
  mixin(bindCode("SurfaceMeshPositionMaterial_removeDegenerateTris", "D_SurfaceMeshPositionMaterial_removeDegenerateTris"));
  mixin(bindCode("SurfaceMeshPositionMaterial_removeUnusedVertices", "D_SurfaceMeshPositionMaterial_removeUnusedVertices"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_Region_set", "D_SurfaceMeshPositionMaterial_m_Region_set"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_Region_get", "D_SurfaceMeshPositionMaterial_m_Region_get"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_iTimeStamp_set", "D_SurfaceMeshPositionMaterial_m_iTimeStamp_set"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_iTimeStamp_get", "D_SurfaceMeshPositionMaterial_m_iTimeStamp_get"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_iNoOfLod0Tris_set", "D_SurfaceMeshPositionMaterial_m_iNoOfLod0Tris_set"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_iNoOfLod0Tris_get", "D_SurfaceMeshPositionMaterial_m_iNoOfLod0Tris_get"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_vecTriangleIndices_set", "D_SurfaceMeshPositionMaterial_m_vecTriangleIndices_set"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_vecTriangleIndices_get", "D_SurfaceMeshPositionMaterial_m_vecTriangleIndices_get"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_vecVertices_set", "D_SurfaceMeshPositionMaterial_m_vecVertices_set"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_vecVertices_get", "D_SurfaceMeshPositionMaterial_m_vecVertices_get"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_vecLodRecords_set", "D_SurfaceMeshPositionMaterial_m_vecLodRecords_set"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_vecLodRecords_get", "D_SurfaceMeshPositionMaterial_m_vecLodRecords_get"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_mapUsedMaterials_set", "D_SurfaceMeshPositionMaterial_m_mapUsedMaterials_set"));
  mixin(bindCode("SurfaceMeshPositionMaterial_m_mapUsedMaterials_get", "D_SurfaceMeshPositionMaterial_m_mapUsedMaterials_get"));
  mixin(bindCode("new_SurfaceMeshPositionMaterialNormal", "D_new_SurfaceMeshPositionMaterialNormal"));
  mixin(bindCode("delete_SurfaceMeshPositionMaterialNormal", "D_delete_SurfaceMeshPositionMaterialNormal"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_getIndices", "D_SurfaceMeshPositionMaterialNormal_getIndices"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_getNoOfIndices", "D_SurfaceMeshPositionMaterialNormal_getNoOfIndices"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_getNoOfNonUniformTrianges", "D_SurfaceMeshPositionMaterialNormal_getNoOfNonUniformTrianges"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_getNoOfUniformTrianges", "D_SurfaceMeshPositionMaterialNormal_getNoOfUniformTrianges"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_getNoOfVertices", "D_SurfaceMeshPositionMaterialNormal_getNoOfVertices"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_getRawVertexData", "D_SurfaceMeshPositionMaterialNormal_getRawVertexData"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_getVertices", "D_SurfaceMeshPositionMaterialNormal_getVertices"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_addTriangle", "D_SurfaceMeshPositionMaterialNormal_addTriangle"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_addTriangleCubic", "D_SurfaceMeshPositionMaterialNormal_addTriangleCubic"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_addVertex", "D_SurfaceMeshPositionMaterialNormal_addVertex"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_clear", "D_SurfaceMeshPositionMaterialNormal_clear"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_isEmpty", "D_SurfaceMeshPositionMaterialNormal_isEmpty"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_scaleVertices", "D_SurfaceMeshPositionMaterialNormal_scaleVertices"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_translateVertices", "D_SurfaceMeshPositionMaterialNormal_translateVertices"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_noOfDegenerateTris", "D_SurfaceMeshPositionMaterialNormal_noOfDegenerateTris"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_removeDegenerateTris", "D_SurfaceMeshPositionMaterialNormal_removeDegenerateTris"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_removeUnusedVertices", "D_SurfaceMeshPositionMaterialNormal_removeUnusedVertices"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_Region_set", "D_SurfaceMeshPositionMaterialNormal_m_Region_set"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_Region_get", "D_SurfaceMeshPositionMaterialNormal_m_Region_get"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_iTimeStamp_set", "D_SurfaceMeshPositionMaterialNormal_m_iTimeStamp_set"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_iTimeStamp_get", "D_SurfaceMeshPositionMaterialNormal_m_iTimeStamp_get"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_iNoOfLod0Tris_set", "D_SurfaceMeshPositionMaterialNormal_m_iNoOfLod0Tris_set"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_iNoOfLod0Tris_get", "D_SurfaceMeshPositionMaterialNormal_m_iNoOfLod0Tris_get"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_vecTriangleIndices_set", "D_SurfaceMeshPositionMaterialNormal_m_vecTriangleIndices_set"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_vecTriangleIndices_get", "D_SurfaceMeshPositionMaterialNormal_m_vecTriangleIndices_get"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_vecVertices_set", "D_SurfaceMeshPositionMaterialNormal_m_vecVertices_set"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_vecVertices_get", "D_SurfaceMeshPositionMaterialNormal_m_vecVertices_get"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_vecLodRecords_set", "D_SurfaceMeshPositionMaterialNormal_m_vecLodRecords_set"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_vecLodRecords_get", "D_SurfaceMeshPositionMaterialNormal_m_vecLodRecords_get"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_mapUsedMaterials_set", "D_SurfaceMeshPositionMaterialNormal_m_mapUsedMaterials_set"));
  mixin(bindCode("SurfaceMeshPositionMaterialNormal_m_mapUsedMaterials_get", "D_SurfaceMeshPositionMaterialNormal_m_mapUsedMaterials_get"));
  mixin(bindCode("new_SurfaceExtractorSimpleVolumeMaterial8", "D_new_SurfaceExtractorSimpleVolumeMaterial8"));
  mixin(bindCode("SurfaceExtractorSimpleVolumeMaterial8_execute", "D_SurfaceExtractorSimpleVolumeMaterial8_execute"));
  mixin(bindCode("delete_SurfaceExtractorSimpleVolumeMaterial8", "D_delete_SurfaceExtractorSimpleVolumeMaterial8"));
}

//
extern(C) void function(
  SwigExceptionCallback exceptionCallback,
  SwigExceptionCallback illegalArgumentCallback,
  SwigExceptionCallback illegalElementCallback,
  SwigExceptionCallback ioCallback,
  SwigExceptionCallback noSuchElementCallback) swigRegisterExceptionCallbacks;
//

//
extern(C) void function(SwigStringCallback callback) swigRegisterStringCallback;
//


mixin template SwigOperatorDefinitions() {
  public override bool opEquals(Object o) {
    if (auto rhs = cast(typeof(this))o) {
      if (swigCPtr == rhs.swigCPtr) return true;
      static if (is(typeof(swigOpEquals(rhs)))) {
        return swigOpEquals(rhs);
      } else {
        return false; 
      }
    }
    return super.opEquals(o);
  }

  
  public override int opCmp(Object o) {
    static if (__traits(compiles, swigOpLt(typeof(this).init) &&
        swigOpEquals(typeof(this).init))) {
      if (auto rhs = cast(typeof(this))o) {
        if (swigOpLt(rhs)) {
          return -1;
        } else if (swigOpEquals(rhs)) {
          return 0;
        } else {
          return 1;
        }
      }
    }
    return super.opCmp(o);
  }

  private template swigOpBinary(string operator, string name) {
    enum swigOpBinary = `public void opOpAssign(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `Assign(rhs))) { swigOp` ~ name ~ `Assign(rhs);}` ~
      `public auto opBinary(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `(rhs))) { return swigOp` ~ name ~ `(rhs);}`;
  }
  mixin(swigOpBinary!("+", "Add"));
  mixin(swigOpBinary!("-", "Sub"));
  mixin(swigOpBinary!("*", "Mul"));
  mixin(swigOpBinary!("/", "Div"));
  mixin(swigOpBinary!("%", "Mod"));
  mixin(swigOpBinary!("&", "And"));
  mixin(swigOpBinary!("|", "Or"));
  mixin(swigOpBinary!("^", "Xor"));
  mixin(swigOpBinary!("<<", "Shl"));
  mixin(swigOpBinary!(">>", "Shr"));
  
  private template swigOpUnary(string operator, string name) {
    enum swigOpUnary = `public auto opUnary(string op)() if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `())) { return swigOp` ~ name ~ `();}`;   
  }
  mixin(swigOpUnary!("+", "Pos"));
  mixin(swigOpUnary!("-", "Neg"));
  mixin(swigOpUnary!("~", "Com"));
  mixin(swigOpUnary!("++", "Inc"));
  mixin(swigOpUnary!("--", "Dec"));


}


private class SwigExceptionHelper {
  static this() {
	// The D1/Tango version maps C++ exceptions to multiple exception types.
    swigRegisterExceptionCallbacks(
      &setException,
      &setException,
      &setException,
      &setException,
      &setException
    );
  }

  static void setException(char* message) {
    auto exception = new object.Exception(std.conv.to!string(message).idup);
    exception.next = SwigPendingException.retrieve();
    SwigPendingException.set(exception);
  }
}

package struct SwigPendingException {
public:
  static this() {
    m_sPendingCount = 0;
    m_sPendingException = null;
  }

  static bool isPending() {
    bool pending = false;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        pending = true;
      }
    }
    return pending;
  }

  static void set(object.Exception e) {
    if (m_sPendingException !is null) {
      throw new object.Exception("FATAL: An earlier pending exception from C/C++ code " ~
        "was missed and thus not thrown (" ~ m_sPendingException.classinfo.name ~
        ": " ~ m_sPendingException.msg ~ ")!", e);
    }

    m_sPendingException = e;
    synchronized {
      ++m_sPendingCount;
    }
  }

  static object.Exception retrieve() {
    object.Exception e = null;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        e = m_sPendingException;
        m_sPendingException = null;
        synchronized {
          --m_sPendingCount;
        }
      }
    }
    return e;
  }

private:
  // The pending exception counter is stored thread-global.
  static shared int m_sPendingCount;

  // The reference to the pending exception (if any) is stored thread-local.
  static object.Exception m_sPendingException;
}
alias void function(const char* message) SwigExceptionCallback;


private class SwigStringHelper {
  static this() {
    swigRegisterStringCallback(&createString);
  }

  static const(char)* createString(const(char*) cString) {
    // We are effectively dup'ing the string here.
    // TODO: Is this also correct for D2/Phobos?
    return std.string.toStringz(std.conv.to!string(cString));
  }
}
alias const(char)* function(const(char*) cString) SwigStringCallback;

extern(C) void* function() new_Material8__SWIG_0;
extern(C) void* function(ubyte jarg1) new_Material8__SWIG_1;
extern(C) uint function(void* jarg1, void* jarg2) Material8_swigOpEquals;
extern(C) uint function(void* jarg1, void* jarg2) Material8_notEqualTo;
extern(C) ubyte function(void* jarg1) Material8_getDensity;
extern(C) ubyte function(void* jarg1) Material8_getMaterial;
extern(C) void function(void* jarg1, ubyte jarg2) Material8_setDensity;
extern(C) void function(void* jarg1, ubyte jarg2) Material8_setMaterial;
extern(C) ubyte function() Material8_getMaxDensity;
extern(C) ubyte function() Material8_getMinDensity;
extern(C) ubyte function() Material8_getThreshold;
extern(C) void function(void* jarg1) delete_Material8;
extern(C) void* function() new_Density8__SWIG_0;
extern(C) void* function(ubyte jarg1) new_Density8__SWIG_1;
extern(C) uint function(void* jarg1, void* jarg2) Density8_swigOpEquals;
extern(C) uint function(void* jarg1, void* jarg2) Density8_notEqualTo;
extern(C) ubyte function(void* jarg1) Density8_getDensity;
extern(C) ubyte function(void* jarg1) Density8_getMaterial;
extern(C) void function(void* jarg1, ubyte jarg2) Density8_setDensity;
extern(C) void function(void* jarg1, ubyte jarg2) Density8_setMaterial;
extern(C) ubyte function() Density8_getMaxDensity;
extern(C) ubyte function() Density8_getMinDensity;
extern(C) ubyte function() Density8_getThreshold;
extern(C) void function(void* jarg1) delete_Density8;
extern(C) void* function(float jarg1, float jarg2) new_Vector3DFloat__SWIG_0;
extern(C) void* function(float jarg1, float jarg2, float jarg3) new_Vector3DFloat__SWIG_1;
extern(C) void* function(float jarg1, float jarg2, float jarg3, float jarg4) new_Vector3DFloat__SWIG_2;
extern(C) void* function() new_Vector3DFloat__SWIG_3;
extern(C) void* function(void* jarg1) new_Vector3DFloat__SWIG_4;
extern(C) void function(void* jarg1) delete_Vector3DFloat;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DFloat_assignment;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DFloat_swigOpEquals;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DFloat_swigOpLt;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DFloat_swigOpAddAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DFloat_swigOpSubAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DFloat_swigOpMulAssign__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DFloat_swigOpDivAssign__SWIG_0;
extern(C) void* function(void* jarg1, float jarg2) Vector3DFloat_swigOpMulAssign__SWIG_1;
extern(C) void* function(void* jarg1, float jarg2) Vector3DFloat_swigOpDivAssign__SWIG_1;
extern(C) float function(void* jarg1, uint jarg2) Vector3DFloat_getElement;
extern(C) float function(void* jarg1) Vector3DFloat_getX;
extern(C) float function(void* jarg1) Vector3DFloat_getY;
extern(C) float function(void* jarg1) Vector3DFloat_getZ;
extern(C) float function(void* jarg1) Vector3DFloat_getW;
extern(C) void function(void* jarg1, uint jarg2, float jarg3) Vector3DFloat_setElement;
extern(C) void function(void* jarg1, float jarg2, float jarg3) Vector3DFloat_setElements__SWIG_0;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4) Vector3DFloat_setElements__SWIG_1;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4, float jarg5) Vector3DFloat_setElements__SWIG_2;
extern(C) void function(void* jarg1, float jarg2) Vector3DFloat_setX;
extern(C) void function(void* jarg1, float jarg2) Vector3DFloat_setY;
extern(C) void function(void* jarg1, float jarg2) Vector3DFloat_setZ;
extern(C) void function(void* jarg1, float jarg2) Vector3DFloat_setW;
extern(C) double function(void* jarg1) Vector3DFloat_length;
extern(C) double function(void* jarg1) Vector3DFloat_lengthSquared;
extern(C) double function(void* jarg1, void* jarg2) Vector3DFloat_angleTo;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DFloat_cross;
extern(C) float function(void* jarg1, void* jarg2) Vector3DFloat_dot;
extern(C) void function(void* jarg1) Vector3DFloat_normalise;
extern(C) void* function(double jarg1, double jarg2) new_Vector3DDouble__SWIG_0;
extern(C) void* function(double jarg1, double jarg2, double jarg3) new_Vector3DDouble__SWIG_1;
extern(C) void* function(double jarg1, double jarg2, double jarg3, double jarg4) new_Vector3DDouble__SWIG_2;
extern(C) void* function() new_Vector3DDouble__SWIG_3;
extern(C) void* function(void* jarg1) new_Vector3DDouble__SWIG_4;
extern(C) void function(void* jarg1) delete_Vector3DDouble;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DDouble_assignment;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DDouble_swigOpEquals;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DDouble_swigOpLt;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DDouble_swigOpAddAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DDouble_swigOpSubAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DDouble_swigOpMulAssign__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DDouble_swigOpDivAssign__SWIG_0;
extern(C) void* function(void* jarg1, double jarg2) Vector3DDouble_swigOpMulAssign__SWIG_1;
extern(C) void* function(void* jarg1, double jarg2) Vector3DDouble_swigOpDivAssign__SWIG_1;
extern(C) double function(void* jarg1, uint jarg2) Vector3DDouble_getElement;
extern(C) double function(void* jarg1) Vector3DDouble_getX;
extern(C) double function(void* jarg1) Vector3DDouble_getY;
extern(C) double function(void* jarg1) Vector3DDouble_getZ;
extern(C) double function(void* jarg1) Vector3DDouble_getW;
extern(C) void function(void* jarg1, uint jarg2, double jarg3) Vector3DDouble_setElement;
extern(C) void function(void* jarg1, double jarg2, double jarg3) Vector3DDouble_setElements__SWIG_0;
extern(C) void function(void* jarg1, double jarg2, double jarg3, double jarg4) Vector3DDouble_setElements__SWIG_1;
extern(C) void function(void* jarg1, double jarg2, double jarg3, double jarg4, double jarg5) Vector3DDouble_setElements__SWIG_2;
extern(C) void function(void* jarg1, double jarg2) Vector3DDouble_setX;
extern(C) void function(void* jarg1, double jarg2) Vector3DDouble_setY;
extern(C) void function(void* jarg1, double jarg2) Vector3DDouble_setZ;
extern(C) void function(void* jarg1, double jarg2) Vector3DDouble_setW;
extern(C) double function(void* jarg1) Vector3DDouble_length;
extern(C) double function(void* jarg1) Vector3DDouble_lengthSquared;
extern(C) double function(void* jarg1, void* jarg2) Vector3DDouble_angleTo;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DDouble_cross;
extern(C) double function(void* jarg1, void* jarg2) Vector3DDouble_dot;
extern(C) void function(void* jarg1) Vector3DDouble_normalise;
extern(C) void* function(byte jarg1, byte jarg2) new_Vector3DInt8__SWIG_0;
extern(C) void* function(byte jarg1, byte jarg2, byte jarg3) new_Vector3DInt8__SWIG_1;
extern(C) void* function(byte jarg1, byte jarg2, byte jarg3, byte jarg4) new_Vector3DInt8__SWIG_2;
extern(C) void* function() new_Vector3DInt8__SWIG_3;
extern(C) void* function(void* jarg1) new_Vector3DInt8__SWIG_4;
extern(C) void function(void* jarg1) delete_Vector3DInt8;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt8_assignment;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DInt8_swigOpEquals;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DInt8_swigOpLt;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt8_swigOpAddAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt8_swigOpSubAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt8_swigOpMulAssign__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt8_swigOpDivAssign__SWIG_0;
extern(C) void* function(void* jarg1, byte jarg2) Vector3DInt8_swigOpMulAssign__SWIG_1;
extern(C) void* function(void* jarg1, byte jarg2) Vector3DInt8_swigOpDivAssign__SWIG_1;
extern(C) byte function(void* jarg1, uint jarg2) Vector3DInt8_getElement;
extern(C) byte function(void* jarg1) Vector3DInt8_getX;
extern(C) byte function(void* jarg1) Vector3DInt8_getY;
extern(C) byte function(void* jarg1) Vector3DInt8_getZ;
extern(C) byte function(void* jarg1) Vector3DInt8_getW;
extern(C) void function(void* jarg1, uint jarg2, byte jarg3) Vector3DInt8_setElement;
extern(C) void function(void* jarg1, byte jarg2, byte jarg3) Vector3DInt8_setElements__SWIG_0;
extern(C) void function(void* jarg1, byte jarg2, byte jarg3, byte jarg4) Vector3DInt8_setElements__SWIG_1;
extern(C) void function(void* jarg1, byte jarg2, byte jarg3, byte jarg4, byte jarg5) Vector3DInt8_setElements__SWIG_2;
extern(C) void function(void* jarg1, byte jarg2) Vector3DInt8_setX;
extern(C) void function(void* jarg1, byte jarg2) Vector3DInt8_setY;
extern(C) void function(void* jarg1, byte jarg2) Vector3DInt8_setZ;
extern(C) void function(void* jarg1, byte jarg2) Vector3DInt8_setW;
extern(C) double function(void* jarg1) Vector3DInt8_length;
extern(C) double function(void* jarg1) Vector3DInt8_lengthSquared;
extern(C) double function(void* jarg1, void* jarg2) Vector3DInt8_angleTo;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt8_cross;
extern(C) byte function(void* jarg1, void* jarg2) Vector3DInt8_dot;
extern(C) void function(void* jarg1) Vector3DInt8_normalise;
extern(C) void* function(ubyte jarg1, ubyte jarg2) new_Vector3DUint8__SWIG_0;
extern(C) void* function(ubyte jarg1, ubyte jarg2, ubyte jarg3) new_Vector3DUint8__SWIG_1;
extern(C) void* function(ubyte jarg1, ubyte jarg2, ubyte jarg3, ubyte jarg4) new_Vector3DUint8__SWIG_2;
extern(C) void* function() new_Vector3DUint8__SWIG_3;
extern(C) void* function(void* jarg1) new_Vector3DUint8__SWIG_4;
extern(C) void function(void* jarg1) delete_Vector3DUint8;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint8_assignment;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DUint8_swigOpEquals;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DUint8_swigOpLt;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint8_swigOpAddAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint8_swigOpSubAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint8_swigOpMulAssign__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint8_swigOpDivAssign__SWIG_0;
extern(C) void* function(void* jarg1, ubyte jarg2) Vector3DUint8_swigOpMulAssign__SWIG_1;
extern(C) void* function(void* jarg1, ubyte jarg2) Vector3DUint8_swigOpDivAssign__SWIG_1;
extern(C) ubyte function(void* jarg1, uint jarg2) Vector3DUint8_getElement;
extern(C) ubyte function(void* jarg1) Vector3DUint8_getX;
extern(C) ubyte function(void* jarg1) Vector3DUint8_getY;
extern(C) ubyte function(void* jarg1) Vector3DUint8_getZ;
extern(C) ubyte function(void* jarg1) Vector3DUint8_getW;
extern(C) void function(void* jarg1, uint jarg2, ubyte jarg3) Vector3DUint8_setElement;
extern(C) void function(void* jarg1, ubyte jarg2, ubyte jarg3) Vector3DUint8_setElements__SWIG_0;
extern(C) void function(void* jarg1, ubyte jarg2, ubyte jarg3, ubyte jarg4) Vector3DUint8_setElements__SWIG_1;
extern(C) void function(void* jarg1, ubyte jarg2, ubyte jarg3, ubyte jarg4, ubyte jarg5) Vector3DUint8_setElements__SWIG_2;
extern(C) void function(void* jarg1, ubyte jarg2) Vector3DUint8_setX;
extern(C) void function(void* jarg1, ubyte jarg2) Vector3DUint8_setY;
extern(C) void function(void* jarg1, ubyte jarg2) Vector3DUint8_setZ;
extern(C) void function(void* jarg1, ubyte jarg2) Vector3DUint8_setW;
extern(C) double function(void* jarg1) Vector3DUint8_length;
extern(C) double function(void* jarg1) Vector3DUint8_lengthSquared;
extern(C) double function(void* jarg1, void* jarg2) Vector3DUint8_angleTo;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint8_cross;
extern(C) ubyte function(void* jarg1, void* jarg2) Vector3DUint8_dot;
extern(C) void function(void* jarg1) Vector3DUint8_normalise;
extern(C) void* function(short jarg1, short jarg2) new_Vector3DInt16__SWIG_0;
extern(C) void* function(short jarg1, short jarg2, short jarg3) new_Vector3DInt16__SWIG_1;
extern(C) void* function(short jarg1, short jarg2, short jarg3, short jarg4) new_Vector3DInt16__SWIG_2;
extern(C) void* function() new_Vector3DInt16__SWIG_3;
extern(C) void* function(void* jarg1) new_Vector3DInt16__SWIG_4;
extern(C) void function(void* jarg1) delete_Vector3DInt16;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt16_assignment;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DInt16_swigOpEquals;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DInt16_swigOpLt;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt16_swigOpAddAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt16_swigOpSubAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt16_swigOpMulAssign__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt16_swigOpDivAssign__SWIG_0;
extern(C) void* function(void* jarg1, short jarg2) Vector3DInt16_swigOpMulAssign__SWIG_1;
extern(C) void* function(void* jarg1, short jarg2) Vector3DInt16_swigOpDivAssign__SWIG_1;
extern(C) short function(void* jarg1, uint jarg2) Vector3DInt16_getElement;
extern(C) short function(void* jarg1) Vector3DInt16_getX;
extern(C) short function(void* jarg1) Vector3DInt16_getY;
extern(C) short function(void* jarg1) Vector3DInt16_getZ;
extern(C) short function(void* jarg1) Vector3DInt16_getW;
extern(C) void function(void* jarg1, uint jarg2, short jarg3) Vector3DInt16_setElement;
extern(C) void function(void* jarg1, short jarg2, short jarg3) Vector3DInt16_setElements__SWIG_0;
extern(C) void function(void* jarg1, short jarg2, short jarg3, short jarg4) Vector3DInt16_setElements__SWIG_1;
extern(C) void function(void* jarg1, short jarg2, short jarg3, short jarg4, short jarg5) Vector3DInt16_setElements__SWIG_2;
extern(C) void function(void* jarg1, short jarg2) Vector3DInt16_setX;
extern(C) void function(void* jarg1, short jarg2) Vector3DInt16_setY;
extern(C) void function(void* jarg1, short jarg2) Vector3DInt16_setZ;
extern(C) void function(void* jarg1, short jarg2) Vector3DInt16_setW;
extern(C) double function(void* jarg1) Vector3DInt16_length;
extern(C) double function(void* jarg1) Vector3DInt16_lengthSquared;
extern(C) double function(void* jarg1, void* jarg2) Vector3DInt16_angleTo;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt16_cross;
extern(C) short function(void* jarg1, void* jarg2) Vector3DInt16_dot;
extern(C) void function(void* jarg1) Vector3DInt16_normalise;
extern(C) void* function(ushort jarg1, ushort jarg2) new_Vector3DUint16__SWIG_0;
extern(C) void* function(ushort jarg1, ushort jarg2, ushort jarg3) new_Vector3DUint16__SWIG_1;
extern(C) void* function(ushort jarg1, ushort jarg2, ushort jarg3, ushort jarg4) new_Vector3DUint16__SWIG_2;
extern(C) void* function() new_Vector3DUint16__SWIG_3;
extern(C) void* function(void* jarg1) new_Vector3DUint16__SWIG_4;
extern(C) void function(void* jarg1) delete_Vector3DUint16;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint16_assignment;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DUint16_swigOpEquals;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DUint16_swigOpLt;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint16_swigOpAddAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint16_swigOpSubAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint16_swigOpMulAssign__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint16_swigOpDivAssign__SWIG_0;
extern(C) void* function(void* jarg1, ushort jarg2) Vector3DUint16_swigOpMulAssign__SWIG_1;
extern(C) void* function(void* jarg1, ushort jarg2) Vector3DUint16_swigOpDivAssign__SWIG_1;
extern(C) ushort function(void* jarg1, uint jarg2) Vector3DUint16_getElement;
extern(C) ushort function(void* jarg1) Vector3DUint16_getX;
extern(C) ushort function(void* jarg1) Vector3DUint16_getY;
extern(C) ushort function(void* jarg1) Vector3DUint16_getZ;
extern(C) ushort function(void* jarg1) Vector3DUint16_getW;
extern(C) void function(void* jarg1, uint jarg2, ushort jarg3) Vector3DUint16_setElement;
extern(C) void function(void* jarg1, ushort jarg2, ushort jarg3) Vector3DUint16_setElements__SWIG_0;
extern(C) void function(void* jarg1, ushort jarg2, ushort jarg3, ushort jarg4) Vector3DUint16_setElements__SWIG_1;
extern(C) void function(void* jarg1, ushort jarg2, ushort jarg3, ushort jarg4, ushort jarg5) Vector3DUint16_setElements__SWIG_2;
extern(C) void function(void* jarg1, ushort jarg2) Vector3DUint16_setX;
extern(C) void function(void* jarg1, ushort jarg2) Vector3DUint16_setY;
extern(C) void function(void* jarg1, ushort jarg2) Vector3DUint16_setZ;
extern(C) void function(void* jarg1, ushort jarg2) Vector3DUint16_setW;
extern(C) double function(void* jarg1) Vector3DUint16_length;
extern(C) double function(void* jarg1) Vector3DUint16_lengthSquared;
extern(C) double function(void* jarg1, void* jarg2) Vector3DUint16_angleTo;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint16_cross;
extern(C) ushort function(void* jarg1, void* jarg2) Vector3DUint16_dot;
extern(C) void function(void* jarg1) Vector3DUint16_normalise;
extern(C) void* function(int jarg1, int jarg2) new_Vector3DInt32__SWIG_0;
extern(C) void* function(int jarg1, int jarg2, int jarg3) new_Vector3DInt32__SWIG_1;
extern(C) void* function(int jarg1, int jarg2, int jarg3, int jarg4) new_Vector3DInt32__SWIG_2;
extern(C) void* function() new_Vector3DInt32__SWIG_3;
extern(C) void* function(void* jarg1) new_Vector3DInt32__SWIG_4;
extern(C) void function(void* jarg1) delete_Vector3DInt32;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt32_assignment;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DInt32_swigOpEquals;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DInt32_swigOpLt;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt32_swigOpAddAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt32_swigOpSubAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt32_swigOpMulAssign__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt32_swigOpDivAssign__SWIG_0;
extern(C) void* function(void* jarg1, int jarg2) Vector3DInt32_swigOpMulAssign__SWIG_1;
extern(C) void* function(void* jarg1, int jarg2) Vector3DInt32_swigOpDivAssign__SWIG_1;
extern(C) int function(void* jarg1, uint jarg2) Vector3DInt32_getElement;
extern(C) int function(void* jarg1) Vector3DInt32_getX;
extern(C) int function(void* jarg1) Vector3DInt32_getY;
extern(C) int function(void* jarg1) Vector3DInt32_getZ;
extern(C) int function(void* jarg1) Vector3DInt32_getW;
extern(C) void function(void* jarg1, uint jarg2, int jarg3) Vector3DInt32_setElement;
extern(C) void function(void* jarg1, int jarg2, int jarg3) Vector3DInt32_setElements__SWIG_0;
extern(C) void function(void* jarg1, int jarg2, int jarg3, int jarg4) Vector3DInt32_setElements__SWIG_1;
extern(C) void function(void* jarg1, int jarg2, int jarg3, int jarg4, int jarg5) Vector3DInt32_setElements__SWIG_2;
extern(C) void function(void* jarg1, int jarg2) Vector3DInt32_setX;
extern(C) void function(void* jarg1, int jarg2) Vector3DInt32_setY;
extern(C) void function(void* jarg1, int jarg2) Vector3DInt32_setZ;
extern(C) void function(void* jarg1, int jarg2) Vector3DInt32_setW;
extern(C) double function(void* jarg1) Vector3DInt32_length;
extern(C) double function(void* jarg1) Vector3DInt32_lengthSquared;
extern(C) double function(void* jarg1, void* jarg2) Vector3DInt32_angleTo;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DInt32_cross;
extern(C) int function(void* jarg1, void* jarg2) Vector3DInt32_dot;
extern(C) void function(void* jarg1) Vector3DInt32_normalise;
extern(C) void* function(uint jarg1, uint jarg2) new_Vector3DUint32__SWIG_0;
extern(C) void* function(uint jarg1, uint jarg2, uint jarg3) new_Vector3DUint32__SWIG_1;
extern(C) void* function(uint jarg1, uint jarg2, uint jarg3, uint jarg4) new_Vector3DUint32__SWIG_2;
extern(C) void* function() new_Vector3DUint32__SWIG_3;
extern(C) void* function(void* jarg1) new_Vector3DUint32__SWIG_4;
extern(C) void function(void* jarg1) delete_Vector3DUint32;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint32_assignment;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DUint32_swigOpEquals;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DUint32_swigOpLt;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint32_swigOpAddAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint32_swigOpSubAssign;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint32_swigOpMulAssign__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint32_swigOpDivAssign__SWIG_0;
extern(C) void* function(void* jarg1, uint jarg2) Vector3DUint32_swigOpMulAssign__SWIG_1;
extern(C) void* function(void* jarg1, uint jarg2) Vector3DUint32_swigOpDivAssign__SWIG_1;
extern(C) uint function(void* jarg1, uint jarg2) Vector3DUint32_getElement;
extern(C) uint function(void* jarg1) Vector3DUint32_getX;
extern(C) uint function(void* jarg1) Vector3DUint32_getY;
extern(C) uint function(void* jarg1) Vector3DUint32_getZ;
extern(C) uint function(void* jarg1) Vector3DUint32_getW;
extern(C) void function(void* jarg1, uint jarg2, uint jarg3) Vector3DUint32_setElement;
extern(C) void function(void* jarg1, uint jarg2, uint jarg3) Vector3DUint32_setElements__SWIG_0;
extern(C) void function(void* jarg1, uint jarg2, uint jarg3, uint jarg4) Vector3DUint32_setElements__SWIG_1;
extern(C) void function(void* jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5) Vector3DUint32_setElements__SWIG_2;
extern(C) void function(void* jarg1, uint jarg2) Vector3DUint32_setX;
extern(C) void function(void* jarg1, uint jarg2) Vector3DUint32_setY;
extern(C) void function(void* jarg1, uint jarg2) Vector3DUint32_setZ;
extern(C) void function(void* jarg1, uint jarg2) Vector3DUint32_setW;
extern(C) double function(void* jarg1) Vector3DUint32_length;
extern(C) double function(void* jarg1) Vector3DUint32_lengthSquared;
extern(C) double function(void* jarg1, void* jarg2) Vector3DUint32_angleTo;
extern(C) void* function(void* jarg1, void* jarg2) Vector3DUint32_cross;
extern(C) uint function(void* jarg1, void* jarg2) Vector3DUint32_dot;
extern(C) void function(void* jarg1) Vector3DUint32_normalise;
extern(C) void* function() Region_MaxRegion_get;
extern(C) void* function() new_Region__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) new_Region__SWIG_1;
extern(C) void* function(void* jarg1) Region_getLowerCorner;
extern(C) void* function(void* jarg1) Region_getUpperCorner;
extern(C) void function(void* jarg1, void* jarg2) Region_setLowerCorner;
extern(C) void function(void* jarg1, void* jarg2) Region_setUpperCorner;
extern(C) uint function(void* jarg1, void* jarg2, float jarg3) Region_containsPoint__SWIG_0;
extern(C) uint function(void* jarg1, void* jarg2) Region_containsPoint__SWIG_1;
extern(C) uint function(void* jarg1, void* jarg2, ubyte jarg3) Region_containsPoint__SWIG_2;
extern(C) uint function(void* jarg1, void* jarg2) Region_containsPoint__SWIG_3;
extern(C) void function(void* jarg1, void* jarg2) Region_cropTo;
extern(C) int function(void* jarg1) Region_depth;
extern(C) int function(void* jarg1) Region_height;
extern(C) void function(void* jarg1, void* jarg2) Region_shift;
extern(C) void function(void* jarg1, void* jarg2) Region_shiftLowerCorner;
extern(C) void function(void* jarg1, void* jarg2) Region_shiftUpperCorner;
extern(C) void* function(void* jarg1) Region_dimensions;
extern(C) int function(void* jarg1) Region_width;
extern(C) void function(void* jarg1) delete_Region;
extern(C) void* function(void* jarg1, ushort jarg2) new_SimpleVolumeMaterial8__SWIG_0;
extern(C) void* function(void* jarg1) new_SimpleVolumeMaterial8__SWIG_1;
extern(C) void* function(int jarg1, int jarg2, int jarg3) new_SimpleVolumeMaterial8__SWIG_2;
extern(C) void function(void* jarg1) delete_SimpleVolumeMaterial8;
extern(C) void* function(void* jarg1) SimpleVolumeMaterial8_getBorderValue;
extern(C) void* function(void* jarg1) SimpleVolumeMaterial8_getEnclosingRegion;
extern(C) int function(void* jarg1) SimpleVolumeMaterial8_getWidth;
extern(C) int function(void* jarg1) SimpleVolumeMaterial8_getHeight;
extern(C) int function(void* jarg1) SimpleVolumeMaterial8_getDepth;
extern(C) int function(void* jarg1) SimpleVolumeMaterial8_getLongestSideLength;
extern(C) int function(void* jarg1) SimpleVolumeMaterial8_getShortestSideLength;
extern(C) float function(void* jarg1) SimpleVolumeMaterial8_getDiagonalLength;
extern(C) void* function(void* jarg1, int jarg2, int jarg3, int jarg4) SimpleVolumeMaterial8_getVoxelAt__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) SimpleVolumeMaterial8_getVoxelAt__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2) SimpleVolumeMaterial8_setBorderValue;
extern(C) uint function(void* jarg1, int jarg2, int jarg3, int jarg4, void* jarg5) SimpleVolumeMaterial8_setVoxelAt__SWIG_0;
extern(C) uint function(void* jarg1, void* jarg2, void* jarg3) SimpleVolumeMaterial8_setVoxelAt__SWIG_1;
extern(C) uint function(void* jarg1) SimpleVolumeMaterial8_calculateSizeInBytes;
extern(C) void function(void* jarg1, void* jarg2, ushort jarg3) SimpleVolumeMaterial8_resize;
extern(C) void* function(void* jarg1, ushort jarg2) new_SimpleVolumeDensity8__SWIG_0;
extern(C) void* function(void* jarg1) new_SimpleVolumeDensity8__SWIG_1;
extern(C) void* function(int jarg1, int jarg2, int jarg3) new_SimpleVolumeDensity8__SWIG_2;
extern(C) void function(void* jarg1) delete_SimpleVolumeDensity8;
extern(C) void* function(void* jarg1) SimpleVolumeDensity8_getBorderValue;
extern(C) void* function(void* jarg1) SimpleVolumeDensity8_getEnclosingRegion;
extern(C) int function(void* jarg1) SimpleVolumeDensity8_getWidth;
extern(C) int function(void* jarg1) SimpleVolumeDensity8_getHeight;
extern(C) int function(void* jarg1) SimpleVolumeDensity8_getDepth;
extern(C) int function(void* jarg1) SimpleVolumeDensity8_getLongestSideLength;
extern(C) int function(void* jarg1) SimpleVolumeDensity8_getShortestSideLength;
extern(C) float function(void* jarg1) SimpleVolumeDensity8_getDiagonalLength;
extern(C) void* function(void* jarg1, int jarg2, int jarg3, int jarg4) SimpleVolumeDensity8_getVoxelAt__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) SimpleVolumeDensity8_getVoxelAt__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2) SimpleVolumeDensity8_setBorderValue;
extern(C) uint function(void* jarg1, int jarg2, int jarg3, int jarg4, void* jarg5) SimpleVolumeDensity8_setVoxelAt__SWIG_0;
extern(C) uint function(void* jarg1, void* jarg2, void* jarg3) SimpleVolumeDensity8_setVoxelAt__SWIG_1;
extern(C) uint function(void* jarg1) SimpleVolumeDensity8_calculateSizeInBytes;
extern(C) void function(void* jarg1, void* jarg2, ushort jarg3) SimpleVolumeDensity8_resize;
extern(C) void* function() new_PositionMaterial__SWIG_0;
extern(C) void* function(void* jarg1, float jarg2) new_PositionMaterial__SWIG_1;
extern(C) float function(void* jarg1) PositionMaterial_getMaterial;
extern(C) void* function(void* jarg1) PositionMaterial_getPosition;
extern(C) void function(void* jarg1, float jarg2) PositionMaterial_setMaterial;
extern(C) void function(void* jarg1, void* jarg2) PositionMaterial_setPosition;
extern(C) void function(void* jarg1, void* jarg2) PositionMaterial_position_set;
extern(C) void* function(void* jarg1) PositionMaterial_position_get;
extern(C) void function(void* jarg1, float jarg2) PositionMaterial_material_set;
extern(C) float function(void* jarg1) PositionMaterial_material_get;
extern(C) void function(void* jarg1) delete_PositionMaterial;
extern(C) void* function() new_PositionMaterialNormal__SWIG_0;
extern(C) void* function(void* jarg1, float jarg2) new_PositionMaterialNormal__SWIG_1;
extern(C) void* function(void* jarg1, void* jarg2, float jarg3) new_PositionMaterialNormal__SWIG_2;
extern(C) float function(void* jarg1) PositionMaterialNormal_getMaterial;
extern(C) void* function(void* jarg1) PositionMaterialNormal_getNormal;
extern(C) void* function(void* jarg1) PositionMaterialNormal_getPosition;
extern(C) void function(void* jarg1, float jarg2) PositionMaterialNormal_setMaterial;
extern(C) void function(void* jarg1, void* jarg2) PositionMaterialNormal_setNormal;
extern(C) void function(void* jarg1, void* jarg2) PositionMaterialNormal_setPosition;
extern(C) void function(void* jarg1, void* jarg2) PositionMaterialNormal_position_set;
extern(C) void* function(void* jarg1) PositionMaterialNormal_position_get;
extern(C) void function(void* jarg1, void* jarg2) PositionMaterialNormal_normal_set;
extern(C) void* function(void* jarg1) PositionMaterialNormal_normal_get;
extern(C) void function(void* jarg1, float jarg2) PositionMaterialNormal_material_set;
extern(C) float function(void* jarg1) PositionMaterialNormal_material_get;
extern(C) void function(void* jarg1) delete_PositionMaterialNormal;
extern(C) void function(void* jarg1, int jarg2) LodRecord_beginIndex_set;
extern(C) int function(void* jarg1) LodRecord_beginIndex_get;
extern(C) void function(void* jarg1, int jarg2) LodRecord_endIndex_set;
extern(C) int function(void* jarg1) LodRecord_endIndex_get;
extern(C) void* function() new_LodRecord;
extern(C) void function(void* jarg1) delete_LodRecord;
extern(C) uint function(void* jarg1) PositionMaterialVector_empty;
extern(C) void function(void* jarg1) PositionMaterialVector_clear;
extern(C) void function(void* jarg1, void* jarg2) PositionMaterialVector_push_back;
extern(C) void function(void* jarg1) PositionMaterialVector_pop_back;
extern(C) size_t function(void* jarg1) PositionMaterialVector_size;
extern(C) size_t function(void* jarg1) PositionMaterialVector_capacity;
extern(C) void function(void* jarg1, size_t jarg2) PositionMaterialVector_reserve;
extern(C) void* function() new_PositionMaterialVector__SWIG_0;
extern(C) void* function(void* jarg1) new_PositionMaterialVector__SWIG_1;
extern(C) void* function(size_t jarg1) new_PositionMaterialVector__SWIG_2;
extern(C) void* function(void* jarg1) PositionMaterialVector_remove__SWIG_0;
extern(C) void* function(void* jarg1, size_t jarg2) PositionMaterialVector_remove__SWIG_1;
extern(C) void function(void* jarg1, size_t jarg2) PositionMaterialVector_removeBack;
extern(C) void function(void* jarg1, size_t jarg2, size_t jarg3) PositionMaterialVector_linearRemove;
extern(C) void function(void* jarg1, size_t jarg2, void* jarg3) PositionMaterialVector_insertAt;
extern(C) void* function(void* jarg1, size_t jarg2) PositionMaterialVector_getElement;
extern(C) void function(void* jarg1, size_t jarg2, void* jarg3) PositionMaterialVector_setElement;
extern(C) void function(void* jarg1) delete_PositionMaterialVector;
extern(C) uint function(void* jarg1) PositionMaterialNormalVector_empty;
extern(C) void function(void* jarg1) PositionMaterialNormalVector_clear;
extern(C) void function(void* jarg1, void* jarg2) PositionMaterialNormalVector_push_back;
extern(C) void function(void* jarg1) PositionMaterialNormalVector_pop_back;
extern(C) size_t function(void* jarg1) PositionMaterialNormalVector_size;
extern(C) size_t function(void* jarg1) PositionMaterialNormalVector_capacity;
extern(C) void function(void* jarg1, size_t jarg2) PositionMaterialNormalVector_reserve;
extern(C) void* function() new_PositionMaterialNormalVector__SWIG_0;
extern(C) void* function(void* jarg1) new_PositionMaterialNormalVector__SWIG_1;
extern(C) void* function(size_t jarg1) new_PositionMaterialNormalVector__SWIG_2;
extern(C) void* function(void* jarg1) PositionMaterialNormalVector_remove__SWIG_0;
extern(C) void* function(void* jarg1, size_t jarg2) PositionMaterialNormalVector_remove__SWIG_1;
extern(C) void function(void* jarg1, size_t jarg2) PositionMaterialNormalVector_removeBack;
extern(C) void function(void* jarg1, size_t jarg2, size_t jarg3) PositionMaterialNormalVector_linearRemove;
extern(C) void function(void* jarg1, size_t jarg2, void* jarg3) PositionMaterialNormalVector_insertAt;
extern(C) void* function(void* jarg1, size_t jarg2) PositionMaterialNormalVector_getElement;
extern(C) void function(void* jarg1, size_t jarg2, void* jarg3) PositionMaterialNormalVector_setElement;
extern(C) void function(void* jarg1) delete_PositionMaterialNormalVector;
extern(C) uint function(void* jarg1) LodRecordVector_empty;
extern(C) void function(void* jarg1) LodRecordVector_clear;
extern(C) void function(void* jarg1, void* jarg2) LodRecordVector_push_back;
extern(C) void function(void* jarg1) LodRecordVector_pop_back;
extern(C) size_t function(void* jarg1) LodRecordVector_size;
extern(C) size_t function(void* jarg1) LodRecordVector_capacity;
extern(C) void function(void* jarg1, size_t jarg2) LodRecordVector_reserve;
extern(C) void* function() new_LodRecordVector__SWIG_0;
extern(C) void* function(void* jarg1) new_LodRecordVector__SWIG_1;
extern(C) void* function(size_t jarg1) new_LodRecordVector__SWIG_2;
extern(C) void* function(void* jarg1) LodRecordVector_remove__SWIG_0;
extern(C) void* function(void* jarg1, size_t jarg2) LodRecordVector_remove__SWIG_1;
extern(C) void function(void* jarg1, size_t jarg2) LodRecordVector_removeBack;
extern(C) void function(void* jarg1, size_t jarg2, size_t jarg3) LodRecordVector_linearRemove;
extern(C) void function(void* jarg1, size_t jarg2, void* jarg3) LodRecordVector_insertAt;
extern(C) void* function(void* jarg1, size_t jarg2) LodRecordVector_getElement;
extern(C) void function(void* jarg1, size_t jarg2, void* jarg3) LodRecordVector_setElement;
extern(C) void function(void* jarg1) delete_LodRecordVector;
extern(C) uint function(void* jarg1) uint8Vector_empty;
extern(C) void function(void* jarg1) uint8Vector_clear;
extern(C) void function(void* jarg1, ubyte jarg2) uint8Vector_push_back;
extern(C) void function(void* jarg1) uint8Vector_pop_back;
extern(C) size_t function(void* jarg1) uint8Vector_size;
extern(C) size_t function(void* jarg1) uint8Vector_capacity;
extern(C) void function(void* jarg1, size_t jarg2) uint8Vector_reserve;
extern(C) void* function() new_uint8Vector__SWIG_0;
extern(C) void* function(void* jarg1) new_uint8Vector__SWIG_1;
extern(C) void* function(size_t jarg1) new_uint8Vector__SWIG_2;
extern(C) ubyte function(void* jarg1) uint8Vector_remove__SWIG_0;
extern(C) ubyte function(void* jarg1, size_t jarg2) uint8Vector_remove__SWIG_1;
extern(C) void function(void* jarg1, size_t jarg2) uint8Vector_removeBack;
extern(C) void function(void* jarg1, size_t jarg2, size_t jarg3) uint8Vector_linearRemove;
extern(C) void function(void* jarg1, size_t jarg2, ubyte jarg3) uint8Vector_insertAt;
extern(C) ubyte function(void* jarg1, size_t jarg2) uint8Vector_getElement;
extern(C) void function(void* jarg1, size_t jarg2, ubyte jarg3) uint8Vector_setElement;
extern(C) void function(void* jarg1) delete_uint8Vector;
extern(C) uint function(void* jarg1) uint32Vector_empty;
extern(C) void function(void* jarg1) uint32Vector_clear;
extern(C) void function(void* jarg1, uint jarg2) uint32Vector_push_back;
extern(C) void function(void* jarg1) uint32Vector_pop_back;
extern(C) size_t function(void* jarg1) uint32Vector_size;
extern(C) size_t function(void* jarg1) uint32Vector_capacity;
extern(C) void function(void* jarg1, size_t jarg2) uint32Vector_reserve;
extern(C) void* function() new_uint32Vector__SWIG_0;
extern(C) void* function(void* jarg1) new_uint32Vector__SWIG_1;
extern(C) void* function(size_t jarg1) new_uint32Vector__SWIG_2;
extern(C) uint function(void* jarg1) uint32Vector_remove__SWIG_0;
extern(C) uint function(void* jarg1, size_t jarg2) uint32Vector_remove__SWIG_1;
extern(C) void function(void* jarg1, size_t jarg2) uint32Vector_removeBack;
extern(C) void function(void* jarg1, size_t jarg2, size_t jarg3) uint32Vector_linearRemove;
extern(C) void function(void* jarg1, size_t jarg2, uint jarg3) uint32Vector_insertAt;
extern(C) uint function(void* jarg1, size_t jarg2) uint32Vector_getElement;
extern(C) void function(void* jarg1, size_t jarg2, uint jarg3) uint32Vector_setElement;
extern(C) void function(void* jarg1) delete_uint32Vector;
extern(C) void* function() new_SurfaceMeshPositionMaterial;
extern(C) void function(void* jarg1) delete_SurfaceMeshPositionMaterial;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterial_getIndices;
extern(C) uint function(void* jarg1) SurfaceMeshPositionMaterial_getNoOfIndices;
extern(C) uint function(void* jarg1) SurfaceMeshPositionMaterial_getNoOfNonUniformTrianges;
extern(C) uint function(void* jarg1) SurfaceMeshPositionMaterial_getNoOfUniformTrianges;
extern(C) uint function(void* jarg1) SurfaceMeshPositionMaterial_getNoOfVertices;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterial_getRawVertexData;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterial_getVertices;
extern(C) void function(void* jarg1, uint jarg2, uint jarg3, uint jarg4) SurfaceMeshPositionMaterial_addTriangle;
extern(C) void function(void* jarg1, uint jarg2, uint jarg3, uint jarg4) SurfaceMeshPositionMaterial_addTriangleCubic;
extern(C) uint function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterial_addVertex;
extern(C) void function(void* jarg1) SurfaceMeshPositionMaterial_clear;
extern(C) uint function(void* jarg1) SurfaceMeshPositionMaterial_isEmpty;
extern(C) void function(void* jarg1, float jarg2) SurfaceMeshPositionMaterial_scaleVertices;
extern(C) void function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterial_translateVertices;
extern(C) int function(void* jarg1) SurfaceMeshPositionMaterial_noOfDegenerateTris;
extern(C) void function(void* jarg1) SurfaceMeshPositionMaterial_removeDegenerateTris;
extern(C) void function(void* jarg1) SurfaceMeshPositionMaterial_removeUnusedVertices;
extern(C) void function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterial_m_Region_set;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterial_m_Region_get;
extern(C) void function(void* jarg1, int jarg2) SurfaceMeshPositionMaterial_m_iTimeStamp_set;
extern(C) int function(void* jarg1) SurfaceMeshPositionMaterial_m_iTimeStamp_get;
extern(C) void function(void* jarg1, int jarg2) SurfaceMeshPositionMaterial_m_iNoOfLod0Tris_set;
extern(C) int function(void* jarg1) SurfaceMeshPositionMaterial_m_iNoOfLod0Tris_get;
extern(C) void function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterial_m_vecTriangleIndices_set;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterial_m_vecTriangleIndices_get;
extern(C) void function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterial_m_vecVertices_set;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterial_m_vecVertices_get;
extern(C) void function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterial_m_vecLodRecords_set;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterial_m_vecLodRecords_get;
extern(C) void function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterial_m_mapUsedMaterials_set;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterial_m_mapUsedMaterials_get;
extern(C) void* function() new_SurfaceMeshPositionMaterialNormal;
extern(C) void function(void* jarg1) delete_SurfaceMeshPositionMaterialNormal;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterialNormal_getIndices;
extern(C) uint function(void* jarg1) SurfaceMeshPositionMaterialNormal_getNoOfIndices;
extern(C) uint function(void* jarg1) SurfaceMeshPositionMaterialNormal_getNoOfNonUniformTrianges;
extern(C) uint function(void* jarg1) SurfaceMeshPositionMaterialNormal_getNoOfUniformTrianges;
extern(C) uint function(void* jarg1) SurfaceMeshPositionMaterialNormal_getNoOfVertices;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterialNormal_getRawVertexData;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterialNormal_getVertices;
extern(C) void function(void* jarg1, uint jarg2, uint jarg3, uint jarg4) SurfaceMeshPositionMaterialNormal_addTriangle;
extern(C) void function(void* jarg1, uint jarg2, uint jarg3, uint jarg4) SurfaceMeshPositionMaterialNormal_addTriangleCubic;
extern(C) uint function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterialNormal_addVertex;
extern(C) void function(void* jarg1) SurfaceMeshPositionMaterialNormal_clear;
extern(C) uint function(void* jarg1) SurfaceMeshPositionMaterialNormal_isEmpty;
extern(C) void function(void* jarg1, float jarg2) SurfaceMeshPositionMaterialNormal_scaleVertices;
extern(C) void function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterialNormal_translateVertices;
extern(C) int function(void* jarg1) SurfaceMeshPositionMaterialNormal_noOfDegenerateTris;
extern(C) void function(void* jarg1) SurfaceMeshPositionMaterialNormal_removeDegenerateTris;
extern(C) void function(void* jarg1) SurfaceMeshPositionMaterialNormal_removeUnusedVertices;
extern(C) void function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterialNormal_m_Region_set;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterialNormal_m_Region_get;
extern(C) void function(void* jarg1, int jarg2) SurfaceMeshPositionMaterialNormal_m_iTimeStamp_set;
extern(C) int function(void* jarg1) SurfaceMeshPositionMaterialNormal_m_iTimeStamp_get;
extern(C) void function(void* jarg1, int jarg2) SurfaceMeshPositionMaterialNormal_m_iNoOfLod0Tris_set;
extern(C) int function(void* jarg1) SurfaceMeshPositionMaterialNormal_m_iNoOfLod0Tris_get;
extern(C) void function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterialNormal_m_vecTriangleIndices_set;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterialNormal_m_vecTriangleIndices_get;
extern(C) void function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterialNormal_m_vecVertices_set;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterialNormal_m_vecVertices_get;
extern(C) void function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterialNormal_m_vecLodRecords_set;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterialNormal_m_vecLodRecords_get;
extern(C) void function(void* jarg1, void* jarg2) SurfaceMeshPositionMaterialNormal_m_mapUsedMaterials_set;
extern(C) void* function(void* jarg1) SurfaceMeshPositionMaterialNormal_m_mapUsedMaterials_get;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3) new_SurfaceExtractorSimpleVolumeMaterial8;
extern(C) void function(void* jarg1) SurfaceExtractorSimpleVolumeMaterial8_execute;
extern(C) void function(void* jarg1) delete_SurfaceExtractorSimpleVolumeMaterial8;
