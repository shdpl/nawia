/*
 * Copyright (C) 2010 Mariusz 'shd' Gliwi≈Ñski.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.3
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module glfw_im;

static import std.conv;

static import std.conv;
static import std.string;


private {
  version(linux) {
    version = Nix;
  } else version(darwin) {
    version = Nix;
  } else version(OSX) {
    version = Nix;
  } else version(FreeBSD) {
    version = Nix;
    version = freebsd;
  } else version(freebsd) {
    version = Nix;
  } else version(Unix) {
    version = Nix;
  } else version(Posix) {
    version = Nix;
  }

  version(Tango) {
    static import tango.stdc.string;
    static import tango.stdc.stringz;

    version (PhobosCompatibility) {
    } else {
      alias char[] string;
      alias wchar[] wstring;
      alias dchar[] dstring;
    }
  } else {
    version(D_Version2) {
      static import std.conv;
    }
    static import std.string;
    static import std.c.string;
  }

  version(D_Version2) {
    mixin("alias const(char)* CCPTR;");
  } else {
    alias char* CCPTR;
  }

  CCPTR swigToCString(string str) {
    version(Tango) {
      return tango.stdc.stringz.toStringz(str);
    } else {
      return std.string.toStringz(str);
    }
  }

  string swigToDString(CCPTR cstr) {
    version(Tango) {
      return tango.stdc.stringz.fromStringz(cstr);
    } else {
      version(D_Version2) {
        mixin("return std.conv.to!string(cstr);");
      } else {
        return std.c.string.toString(cstr);
      }
    }
  }
}

class SwigSwigSharedLibLoadException : Exception {
  this(in string[] libNames, in string[] reasons) {
    string msg = "Failed to load one or more shared libraries:";
    foreach(i, n; libNames) {
      msg ~= "\n\t" ~ n ~ " - ";
      if(i < reasons.length)
        msg ~= reasons[i];
      else
        msg ~= "Unknown";
    }
    super(msg);
  }
}

class SwigSymbolLoadException : Exception {
  this(string SwigSharedLibName, string symbolName) {
    super("Failed to load symbol " ~ symbolName ~ " from shared library " ~ SwigSharedLibName);
    _symbolName = symbolName;
  }

  string symbolName() {
    return _symbolName;
  }

private:
  string _symbolName;
}

private {
  version(Nix) {
    version(freebsd) {
      // the dl* functions are in libc on FreeBSD
    }
    else {
      pragma(lib, "dl");
    }

    version(Tango) {
      import tango.sys.Common;
    } else version(linux) {
      import std.c.linux.linux;
    } else {
      extern(C) {
        const RTLD_NOW = 2;

        void *dlopen(CCPTR file, int mode);
        int dlclose(void* handle);
        void *dlsym(void* handle, CCPTR name);
        CCPTR dlerror();
      }
    }

    alias void* SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return dlopen(swigToCString(libName), RTLD_NOW);
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      dlclose(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return dlsym(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      CCPTR err = dlerror();
      if (err is null) {
        return "Unknown Error";
      }
      return swigToDString(err);
    }
  } else version(Windows) {
    alias ushort WORD;
    alias uint DWORD;
    alias CCPTR LPCSTR;
    alias void* HMODULE;
    alias void* HLOCAL;
    alias int function() FARPROC;
    struct VA_LIST {}

    extern (Windows) {
      HMODULE LoadLibraryA(LPCSTR);
      FARPROC GetProcAddress(HMODULE, LPCSTR);
      void FreeLibrary(HMODULE);
      DWORD GetLastError();
      DWORD FormatMessageA(DWORD, in void*, DWORD, DWORD, LPCSTR, DWORD, VA_LIST*);
      HLOCAL LocalFree(HLOCAL);
    }

    DWORD MAKELANGID(WORD p, WORD s) {
      return (((cast(WORD)s) << 10) | cast(WORD)p);
    }

    enum {
      LANG_NEUTRAL                    = 0,
      SUBLANG_DEFAULT                 = 1,
      FORMAT_MESSAGE_ALLOCATE_BUFFER  = 256,
      FORMAT_MESSAGE_IGNORE_INSERTS   = 512,
      FORMAT_MESSAGE_FROM_SYSTEM      = 4096
    }

    alias HMODULE SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return LoadLibraryA(swigToCString(libName));
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      FreeLibrary(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return GetProcAddress(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      DWORD errcode = GetLastError();

      LPCSTR msgBuf;
      DWORD i = FormatMessageA(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
        FORMAT_MESSAGE_FROM_SYSTEM |
        FORMAT_MESSAGE_IGNORE_INSERTS,
        null,
        errcode,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        cast(LPCSTR)&msgBuf,
        0,
        null);

      string text = swigToDString(msgBuf);
      LocalFree(cast(HLOCAL)msgBuf);

      if (i >= 2) {
        i -= 2;
      }
      return text[0 .. i];
    }
  } else {
    static assert(0, "Operating system not supported by the wrapper loading code.");
  }

  final class SwigSharedLib {
    void load(string[] names) {
      if (_hlib !is null) return;

      string[] failedLibs;
      string[] reasons;

      foreach(n; names) {
        _hlib = swigLoadSharedLib(n);
        if (_hlib is null) {
          failedLibs ~= n;
          reasons ~= swigGetErrorStr();
          continue;
        }
        _name = n;
        break;
      }

      if (_hlib is null) {
        throw new SwigSwigSharedLibLoadException(failedLibs, reasons);
      }
    }

    void* loadSymbol(string symbolName, bool doThrow = true) {
      void* sym = swigGetSymbol(_hlib, symbolName);
      if(doThrow && (sym is null)) {
        throw new SwigSymbolLoadException(_name, symbolName);
      }
      return sym;
    }

    void unload() {
      if(_hlib !is null) {
        swigUnloadSharedLib(_hlib);
        _hlib = null;
      }
    }

  private:
    string _name;
    SwigSharedLibHandle _hlib;
  }
}

static this() {
  string[] possibleFileNames;
  version (Posix) {
    version (OSX) {
      possibleFileNames ~= ["libglfw_wrap.dylib", "libglfw_wrap.bundle"];
    }
    possibleFileNames ~= ["libglfw_wrap.so"];
  } else version (Windows) {
    possibleFileNames ~= ["glfw_wrap.dll", "libglfw_wrap.so"];
  } else {
    static assert(false, "Operating system not supported by the wrapper loading code.");
  }

  auto library = new SwigSharedLib;
  library.load(possibleFileNames);

  string bindCode(string functionPointer, string symbol) {
    return functionPointer ~ " = cast(typeof(" ~ functionPointer ~
      "))library.loadSymbol(`" ~ symbol ~ "`);";
  }

  //
  mixin(bindCode("swigRegisterExceptionCallbacks", "SWIGRegisterExceptionCallbacks_glfw"));
  //
  //
  mixin(bindCode("swigRegisterStringCallback", "SWIGRegisterStringCallback_glfw"));
  //
  
  mixin(bindCode("NULL_get", "D_NULL_get"));
  mixin(bindCode("GLFW_VERSION_MAJOR_get", "D_GLFW_VERSION_MAJOR_get"));
  mixin(bindCode("GLFW_VERSION_MINOR_get", "D_GLFW_VERSION_MINOR_get"));
  mixin(bindCode("GLFW_VERSION_REVISION_get", "D_GLFW_VERSION_REVISION_get"));
  mixin(bindCode("GLFW_RELEASE_get", "D_GLFW_RELEASE_get"));
  mixin(bindCode("GLFW_PRESS_get", "D_GLFW_PRESS_get"));
  mixin(bindCode("GLFW_KEY_UNKNOWN_get", "D_GLFW_KEY_UNKNOWN_get"));
  mixin(bindCode("GLFW_KEY_SPACE_get", "D_GLFW_KEY_SPACE_get"));
  mixin(bindCode("GLFW_KEY_SPECIAL_get", "D_GLFW_KEY_SPECIAL_get"));
  mixin(bindCode("GLFW_KEY_ESC_get", "D_GLFW_KEY_ESC_get"));
  mixin(bindCode("GLFW_KEY_F1_get", "D_GLFW_KEY_F1_get"));
  mixin(bindCode("GLFW_KEY_F2_get", "D_GLFW_KEY_F2_get"));
  mixin(bindCode("GLFW_KEY_F3_get", "D_GLFW_KEY_F3_get"));
  mixin(bindCode("GLFW_KEY_F4_get", "D_GLFW_KEY_F4_get"));
  mixin(bindCode("GLFW_KEY_F5_get", "D_GLFW_KEY_F5_get"));
  mixin(bindCode("GLFW_KEY_F6_get", "D_GLFW_KEY_F6_get"));
  mixin(bindCode("GLFW_KEY_F7_get", "D_GLFW_KEY_F7_get"));
  mixin(bindCode("GLFW_KEY_F8_get", "D_GLFW_KEY_F8_get"));
  mixin(bindCode("GLFW_KEY_F9_get", "D_GLFW_KEY_F9_get"));
  mixin(bindCode("GLFW_KEY_F10_get", "D_GLFW_KEY_F10_get"));
  mixin(bindCode("GLFW_KEY_F11_get", "D_GLFW_KEY_F11_get"));
  mixin(bindCode("GLFW_KEY_F12_get", "D_GLFW_KEY_F12_get"));
  mixin(bindCode("GLFW_KEY_F13_get", "D_GLFW_KEY_F13_get"));
  mixin(bindCode("GLFW_KEY_F14_get", "D_GLFW_KEY_F14_get"));
  mixin(bindCode("GLFW_KEY_F15_get", "D_GLFW_KEY_F15_get"));
  mixin(bindCode("GLFW_KEY_F16_get", "D_GLFW_KEY_F16_get"));
  mixin(bindCode("GLFW_KEY_F17_get", "D_GLFW_KEY_F17_get"));
  mixin(bindCode("GLFW_KEY_F18_get", "D_GLFW_KEY_F18_get"));
  mixin(bindCode("GLFW_KEY_F19_get", "D_GLFW_KEY_F19_get"));
  mixin(bindCode("GLFW_KEY_F20_get", "D_GLFW_KEY_F20_get"));
  mixin(bindCode("GLFW_KEY_F21_get", "D_GLFW_KEY_F21_get"));
  mixin(bindCode("GLFW_KEY_F22_get", "D_GLFW_KEY_F22_get"));
  mixin(bindCode("GLFW_KEY_F23_get", "D_GLFW_KEY_F23_get"));
  mixin(bindCode("GLFW_KEY_F24_get", "D_GLFW_KEY_F24_get"));
  mixin(bindCode("GLFW_KEY_F25_get", "D_GLFW_KEY_F25_get"));
  mixin(bindCode("GLFW_KEY_UP_get", "D_GLFW_KEY_UP_get"));
  mixin(bindCode("GLFW_KEY_DOWN_get", "D_GLFW_KEY_DOWN_get"));
  mixin(bindCode("GLFW_KEY_LEFT_get", "D_GLFW_KEY_LEFT_get"));
  mixin(bindCode("GLFW_KEY_RIGHT_get", "D_GLFW_KEY_RIGHT_get"));
  mixin(bindCode("GLFW_KEY_LSHIFT_get", "D_GLFW_KEY_LSHIFT_get"));
  mixin(bindCode("GLFW_KEY_RSHIFT_get", "D_GLFW_KEY_RSHIFT_get"));
  mixin(bindCode("GLFW_KEY_LCTRL_get", "D_GLFW_KEY_LCTRL_get"));
  mixin(bindCode("GLFW_KEY_RCTRL_get", "D_GLFW_KEY_RCTRL_get"));
  mixin(bindCode("GLFW_KEY_LALT_get", "D_GLFW_KEY_LALT_get"));
  mixin(bindCode("GLFW_KEY_RALT_get", "D_GLFW_KEY_RALT_get"));
  mixin(bindCode("GLFW_KEY_TAB_get", "D_GLFW_KEY_TAB_get"));
  mixin(bindCode("GLFW_KEY_ENTER_get", "D_GLFW_KEY_ENTER_get"));
  mixin(bindCode("GLFW_KEY_BACKSPACE_get", "D_GLFW_KEY_BACKSPACE_get"));
  mixin(bindCode("GLFW_KEY_INSERT_get", "D_GLFW_KEY_INSERT_get"));
  mixin(bindCode("GLFW_KEY_DEL_get", "D_GLFW_KEY_DEL_get"));
  mixin(bindCode("GLFW_KEY_PAGEUP_get", "D_GLFW_KEY_PAGEUP_get"));
  mixin(bindCode("GLFW_KEY_PAGEDOWN_get", "D_GLFW_KEY_PAGEDOWN_get"));
  mixin(bindCode("GLFW_KEY_HOME_get", "D_GLFW_KEY_HOME_get"));
  mixin(bindCode("GLFW_KEY_END_get", "D_GLFW_KEY_END_get"));
  mixin(bindCode("GLFW_KEY_KP_0_get", "D_GLFW_KEY_KP_0_get"));
  mixin(bindCode("GLFW_KEY_KP_1_get", "D_GLFW_KEY_KP_1_get"));
  mixin(bindCode("GLFW_KEY_KP_2_get", "D_GLFW_KEY_KP_2_get"));
  mixin(bindCode("GLFW_KEY_KP_3_get", "D_GLFW_KEY_KP_3_get"));
  mixin(bindCode("GLFW_KEY_KP_4_get", "D_GLFW_KEY_KP_4_get"));
  mixin(bindCode("GLFW_KEY_KP_5_get", "D_GLFW_KEY_KP_5_get"));
  mixin(bindCode("GLFW_KEY_KP_6_get", "D_GLFW_KEY_KP_6_get"));
  mixin(bindCode("GLFW_KEY_KP_7_get", "D_GLFW_KEY_KP_7_get"));
  mixin(bindCode("GLFW_KEY_KP_8_get", "D_GLFW_KEY_KP_8_get"));
  mixin(bindCode("GLFW_KEY_KP_9_get", "D_GLFW_KEY_KP_9_get"));
  mixin(bindCode("GLFW_KEY_KP_DIVIDE_get", "D_GLFW_KEY_KP_DIVIDE_get"));
  mixin(bindCode("GLFW_KEY_KP_MULTIPLY_get", "D_GLFW_KEY_KP_MULTIPLY_get"));
  mixin(bindCode("GLFW_KEY_KP_SUBTRACT_get", "D_GLFW_KEY_KP_SUBTRACT_get"));
  mixin(bindCode("GLFW_KEY_KP_ADD_get", "D_GLFW_KEY_KP_ADD_get"));
  mixin(bindCode("GLFW_KEY_KP_DECIMAL_get", "D_GLFW_KEY_KP_DECIMAL_get"));
  mixin(bindCode("GLFW_KEY_KP_EQUAL_get", "D_GLFW_KEY_KP_EQUAL_get"));
  mixin(bindCode("GLFW_KEY_KP_ENTER_get", "D_GLFW_KEY_KP_ENTER_get"));
  mixin(bindCode("GLFW_KEY_KP_NUM_LOCK_get", "D_GLFW_KEY_KP_NUM_LOCK_get"));
  mixin(bindCode("GLFW_KEY_CAPS_LOCK_get", "D_GLFW_KEY_CAPS_LOCK_get"));
  mixin(bindCode("GLFW_KEY_SCROLL_LOCK_get", "D_GLFW_KEY_SCROLL_LOCK_get"));
  mixin(bindCode("GLFW_KEY_PAUSE_get", "D_GLFW_KEY_PAUSE_get"));
  mixin(bindCode("GLFW_KEY_LSUPER_get", "D_GLFW_KEY_LSUPER_get"));
  mixin(bindCode("GLFW_KEY_RSUPER_get", "D_GLFW_KEY_RSUPER_get"));
  mixin(bindCode("GLFW_KEY_MENU_get", "D_GLFW_KEY_MENU_get"));
  mixin(bindCode("GLFW_KEY_LAST_get", "D_GLFW_KEY_LAST_get"));
  mixin(bindCode("GLFW_MOUSE_BUTTON_1_get", "D_GLFW_MOUSE_BUTTON_1_get"));
  mixin(bindCode("GLFW_MOUSE_BUTTON_2_get", "D_GLFW_MOUSE_BUTTON_2_get"));
  mixin(bindCode("GLFW_MOUSE_BUTTON_3_get", "D_GLFW_MOUSE_BUTTON_3_get"));
  mixin(bindCode("GLFW_MOUSE_BUTTON_4_get", "D_GLFW_MOUSE_BUTTON_4_get"));
  mixin(bindCode("GLFW_MOUSE_BUTTON_5_get", "D_GLFW_MOUSE_BUTTON_5_get"));
  mixin(bindCode("GLFW_MOUSE_BUTTON_6_get", "D_GLFW_MOUSE_BUTTON_6_get"));
  mixin(bindCode("GLFW_MOUSE_BUTTON_7_get", "D_GLFW_MOUSE_BUTTON_7_get"));
  mixin(bindCode("GLFW_MOUSE_BUTTON_8_get", "D_GLFW_MOUSE_BUTTON_8_get"));
  mixin(bindCode("GLFW_MOUSE_BUTTON_LAST_get", "D_GLFW_MOUSE_BUTTON_LAST_get"));
  mixin(bindCode("GLFW_MOUSE_BUTTON_LEFT_get", "D_GLFW_MOUSE_BUTTON_LEFT_get"));
  mixin(bindCode("GLFW_MOUSE_BUTTON_RIGHT_get", "D_GLFW_MOUSE_BUTTON_RIGHT_get"));
  mixin(bindCode("GLFW_MOUSE_BUTTON_MIDDLE_get", "D_GLFW_MOUSE_BUTTON_MIDDLE_get"));
  mixin(bindCode("GLFW_JOYSTICK_1_get", "D_GLFW_JOYSTICK_1_get"));
  mixin(bindCode("GLFW_JOYSTICK_2_get", "D_GLFW_JOYSTICK_2_get"));
  mixin(bindCode("GLFW_JOYSTICK_3_get", "D_GLFW_JOYSTICK_3_get"));
  mixin(bindCode("GLFW_JOYSTICK_4_get", "D_GLFW_JOYSTICK_4_get"));
  mixin(bindCode("GLFW_JOYSTICK_5_get", "D_GLFW_JOYSTICK_5_get"));
  mixin(bindCode("GLFW_JOYSTICK_6_get", "D_GLFW_JOYSTICK_6_get"));
  mixin(bindCode("GLFW_JOYSTICK_7_get", "D_GLFW_JOYSTICK_7_get"));
  mixin(bindCode("GLFW_JOYSTICK_8_get", "D_GLFW_JOYSTICK_8_get"));
  mixin(bindCode("GLFW_JOYSTICK_9_get", "D_GLFW_JOYSTICK_9_get"));
  mixin(bindCode("GLFW_JOYSTICK_10_get", "D_GLFW_JOYSTICK_10_get"));
  mixin(bindCode("GLFW_JOYSTICK_11_get", "D_GLFW_JOYSTICK_11_get"));
  mixin(bindCode("GLFW_JOYSTICK_12_get", "D_GLFW_JOYSTICK_12_get"));
  mixin(bindCode("GLFW_JOYSTICK_13_get", "D_GLFW_JOYSTICK_13_get"));
  mixin(bindCode("GLFW_JOYSTICK_14_get", "D_GLFW_JOYSTICK_14_get"));
  mixin(bindCode("GLFW_JOYSTICK_15_get", "D_GLFW_JOYSTICK_15_get"));
  mixin(bindCode("GLFW_JOYSTICK_16_get", "D_GLFW_JOYSTICK_16_get"));
  mixin(bindCode("GLFW_JOYSTICK_LAST_get", "D_GLFW_JOYSTICK_LAST_get"));
  mixin(bindCode("GLFW_WINDOW_get", "D_GLFW_WINDOW_get"));
  mixin(bindCode("GLFW_FULLSCREEN_get", "D_GLFW_FULLSCREEN_get"));
  mixin(bindCode("GLFW_OPENED_get", "D_GLFW_OPENED_get"));
  mixin(bindCode("GLFW_ACTIVE_get", "D_GLFW_ACTIVE_get"));
  mixin(bindCode("GLFW_ICONIFIED_get", "D_GLFW_ICONIFIED_get"));
  mixin(bindCode("GLFW_ACCELERATED_get", "D_GLFW_ACCELERATED_get"));
  mixin(bindCode("GLFW_RED_BITS_get", "D_GLFW_RED_BITS_get"));
  mixin(bindCode("GLFW_GREEN_BITS_get", "D_GLFW_GREEN_BITS_get"));
  mixin(bindCode("GLFW_BLUE_BITS_get", "D_GLFW_BLUE_BITS_get"));
  mixin(bindCode("GLFW_ALPHA_BITS_get", "D_GLFW_ALPHA_BITS_get"));
  mixin(bindCode("GLFW_DEPTH_BITS_get", "D_GLFW_DEPTH_BITS_get"));
  mixin(bindCode("GLFW_STENCIL_BITS_get", "D_GLFW_STENCIL_BITS_get"));
  mixin(bindCode("GLFW_REFRESH_RATE_get", "D_GLFW_REFRESH_RATE_get"));
  mixin(bindCode("GLFW_ACCUM_RED_BITS_get", "D_GLFW_ACCUM_RED_BITS_get"));
  mixin(bindCode("GLFW_ACCUM_GREEN_BITS_get", "D_GLFW_ACCUM_GREEN_BITS_get"));
  mixin(bindCode("GLFW_ACCUM_BLUE_BITS_get", "D_GLFW_ACCUM_BLUE_BITS_get"));
  mixin(bindCode("GLFW_ACCUM_ALPHA_BITS_get", "D_GLFW_ACCUM_ALPHA_BITS_get"));
  mixin(bindCode("GLFW_AUX_BUFFERS_get", "D_GLFW_AUX_BUFFERS_get"));
  mixin(bindCode("GLFW_STEREO_get", "D_GLFW_STEREO_get"));
  mixin(bindCode("GLFW_WINDOW_NO_RESIZE_get", "D_GLFW_WINDOW_NO_RESIZE_get"));
  mixin(bindCode("GLFW_FSAA_SAMPLES_get", "D_GLFW_FSAA_SAMPLES_get"));
  mixin(bindCode("GLFW_OPENGL_VERSION_MAJOR_get", "D_GLFW_OPENGL_VERSION_MAJOR_get"));
  mixin(bindCode("GLFW_OPENGL_VERSION_MINOR_get", "D_GLFW_OPENGL_VERSION_MINOR_get"));
  mixin(bindCode("GLFW_OPENGL_FORWARD_COMPAT_get", "D_GLFW_OPENGL_FORWARD_COMPAT_get"));
  mixin(bindCode("GLFW_OPENGL_DEBUG_CONTEXT_get", "D_GLFW_OPENGL_DEBUG_CONTEXT_get"));
  mixin(bindCode("GLFW_OPENGL_PROFILE_get", "D_GLFW_OPENGL_PROFILE_get"));
  mixin(bindCode("GLFW_OPENGL_CORE_PROFILE_get", "D_GLFW_OPENGL_CORE_PROFILE_get"));
  mixin(bindCode("GLFW_OPENGL_COMPAT_PROFILE_get", "D_GLFW_OPENGL_COMPAT_PROFILE_get"));
  mixin(bindCode("GLFW_MOUSE_CURSOR_get", "D_GLFW_MOUSE_CURSOR_get"));
  mixin(bindCode("GLFW_STICKY_KEYS_get", "D_GLFW_STICKY_KEYS_get"));
  mixin(bindCode("GLFW_STICKY_MOUSE_BUTTONS_get", "D_GLFW_STICKY_MOUSE_BUTTONS_get"));
  mixin(bindCode("GLFW_SYSTEM_KEYS_get", "D_GLFW_SYSTEM_KEYS_get"));
  mixin(bindCode("GLFW_KEY_REPEAT_get", "D_GLFW_KEY_REPEAT_get"));
  mixin(bindCode("GLFW_AUTO_POLL_EVENTS_get", "D_GLFW_AUTO_POLL_EVENTS_get"));
  mixin(bindCode("GLFW_WAIT_get", "D_GLFW_WAIT_get"));
  mixin(bindCode("GLFW_NOWAIT_get", "D_GLFW_NOWAIT_get"));
  mixin(bindCode("GLFW_PRESENT_get", "D_GLFW_PRESENT_get"));
  mixin(bindCode("GLFW_AXES_get", "D_GLFW_AXES_get"));
  mixin(bindCode("GLFW_BUTTONS_get", "D_GLFW_BUTTONS_get"));
  mixin(bindCode("GLFW_NO_RESCALE_BIT_get", "D_GLFW_NO_RESCALE_BIT_get"));
  mixin(bindCode("GLFW_ORIGIN_UL_BIT_get", "D_GLFW_ORIGIN_UL_BIT_get"));
  mixin(bindCode("GLFW_BUILD_MIPMAPS_BIT_get", "D_GLFW_BUILD_MIPMAPS_BIT_get"));
  mixin(bindCode("GLFW_ALPHA_MAP_BIT_get", "D_GLFW_ALPHA_MAP_BIT_get"));
  mixin(bindCode("GLFW_INFINITY_get", "D_GLFW_INFINITY_get"));
  mixin(bindCode("GLFWvidmode_Width_set", "D_GLFWvidmode_Width_set"));
  mixin(bindCode("GLFWvidmode_Width_get", "D_GLFWvidmode_Width_get"));
  mixin(bindCode("GLFWvidmode_Height_set", "D_GLFWvidmode_Height_set"));
  mixin(bindCode("GLFWvidmode_Height_get", "D_GLFWvidmode_Height_get"));
  mixin(bindCode("GLFWvidmode_RedBits_set", "D_GLFWvidmode_RedBits_set"));
  mixin(bindCode("GLFWvidmode_RedBits_get", "D_GLFWvidmode_RedBits_get"));
  mixin(bindCode("GLFWvidmode_BlueBits_set", "D_GLFWvidmode_BlueBits_set"));
  mixin(bindCode("GLFWvidmode_BlueBits_get", "D_GLFWvidmode_BlueBits_get"));
  mixin(bindCode("GLFWvidmode_GreenBits_set", "D_GLFWvidmode_GreenBits_set"));
  mixin(bindCode("GLFWvidmode_GreenBits_get", "D_GLFWvidmode_GreenBits_get"));
  mixin(bindCode("new_GLFWvidmode", "D_new_GLFWvidmode"));
  mixin(bindCode("delete_GLFWvidmode", "D_delete_GLFWvidmode"));
  mixin(bindCode("GLFWimage_Width_set", "D_GLFWimage_Width_set"));
  mixin(bindCode("GLFWimage_Width_get", "D_GLFWimage_Width_get"));
  mixin(bindCode("GLFWimage_Height_set", "D_GLFWimage_Height_set"));
  mixin(bindCode("GLFWimage_Height_get", "D_GLFWimage_Height_get"));
  mixin(bindCode("GLFWimage_Format_set", "D_GLFWimage_Format_set"));
  mixin(bindCode("GLFWimage_Format_get", "D_GLFWimage_Format_get"));
  mixin(bindCode("GLFWimage_BytesPerPixel_set", "D_GLFWimage_BytesPerPixel_set"));
  mixin(bindCode("GLFWimage_BytesPerPixel_get", "D_GLFWimage_BytesPerPixel_get"));
  mixin(bindCode("GLFWimage_Data_set", "D_GLFWimage_Data_set"));
  mixin(bindCode("GLFWimage_Data_get", "D_GLFWimage_Data_get"));
  mixin(bindCode("new_GLFWimage", "D_new_GLFWimage"));
  mixin(bindCode("delete_GLFWimage", "D_delete_GLFWimage"));
  mixin(bindCode("glfwInit", "D_glfwInit"));
  mixin(bindCode("glfwTerminate", "D_glfwTerminate"));
  mixin(bindCode("glfwGetVersion", "D_glfwGetVersion"));
  mixin(bindCode("glfwOpenWindow", "D_glfwOpenWindow"));
  mixin(bindCode("glfwOpenWindowHint", "D_glfwOpenWindowHint"));
  mixin(bindCode("glfwCloseWindow", "D_glfwCloseWindow"));
  mixin(bindCode("glfwSetWindowTitle", "D_glfwSetWindowTitle"));
  mixin(bindCode("glfwGetWindowSize", "D_glfwGetWindowSize"));
  mixin(bindCode("glfwSetWindowSize", "D_glfwSetWindowSize"));
  mixin(bindCode("glfwSetWindowPos", "D_glfwSetWindowPos"));
  mixin(bindCode("glfwIconifyWindow", "D_glfwIconifyWindow"));
  mixin(bindCode("glfwRestoreWindow", "D_glfwRestoreWindow"));
  mixin(bindCode("glfwSwapBuffers", "D_glfwSwapBuffers"));
  mixin(bindCode("glfwSwapInterval", "D_glfwSwapInterval"));
  mixin(bindCode("glfwGetWindowParam", "D_glfwGetWindowParam"));
  mixin(bindCode("glfwSetWindowSizeCallback", "D_glfwSetWindowSizeCallback"));
  mixin(bindCode("glfwSetWindowCloseCallback", "D_glfwSetWindowCloseCallback"));
  mixin(bindCode("glfwSetWindowRefreshCallback", "D_glfwSetWindowRefreshCallback"));
  mixin(bindCode("glfwGetVideoModes", "D_glfwGetVideoModes"));
  mixin(bindCode("glfwGetDesktopMode", "D_glfwGetDesktopMode"));
  mixin(bindCode("glfwPollEvents", "D_glfwPollEvents"));
  mixin(bindCode("glfwWaitEvents", "D_glfwWaitEvents"));
  mixin(bindCode("glfwGetKey", "D_glfwGetKey"));
  mixin(bindCode("glfwGetMouseButton", "D_glfwGetMouseButton"));
  mixin(bindCode("glfwGetMousePos", "D_glfwGetMousePos"));
  mixin(bindCode("glfwSetMousePos", "D_glfwSetMousePos"));
  mixin(bindCode("glfwGetMouseWheel", "D_glfwGetMouseWheel"));
  mixin(bindCode("glfwSetMouseWheel", "D_glfwSetMouseWheel"));
  mixin(bindCode("glfwSetKeyCallback", "D_glfwSetKeyCallback"));
  mixin(bindCode("glfwSetCharCallback", "D_glfwSetCharCallback"));
  mixin(bindCode("glfwSetMouseButtonCallback", "D_glfwSetMouseButtonCallback"));
  mixin(bindCode("glfwSetMousePosCallback", "D_glfwSetMousePosCallback"));
  mixin(bindCode("glfwSetMouseWheelCallback", "D_glfwSetMouseWheelCallback"));
  mixin(bindCode("glfwGetJoystickParam", "D_glfwGetJoystickParam"));
  mixin(bindCode("glfwGetJoystickPos", "D_glfwGetJoystickPos"));
  mixin(bindCode("glfwGetJoystickButtons", "D_glfwGetJoystickButtons"));
  mixin(bindCode("glfwGetTime", "D_glfwGetTime"));
  mixin(bindCode("glfwSetTime", "D_glfwSetTime"));
  mixin(bindCode("glfwSleep", "D_glfwSleep"));
  mixin(bindCode("glfwExtensionSupported", "D_glfwExtensionSupported"));
  mixin(bindCode("glfwGetProcAddress", "D_glfwGetProcAddress"));
  mixin(bindCode("glfwGetGLVersion", "D_glfwGetGLVersion"));
  mixin(bindCode("glfwCreateThread", "D_glfwCreateThread"));
  mixin(bindCode("glfwDestroyThread", "D_glfwDestroyThread"));
  mixin(bindCode("glfwWaitThread", "D_glfwWaitThread"));
  mixin(bindCode("glfwGetThreadID", "D_glfwGetThreadID"));
  mixin(bindCode("glfwCreateMutex", "D_glfwCreateMutex"));
  mixin(bindCode("glfwDestroyMutex", "D_glfwDestroyMutex"));
  mixin(bindCode("glfwLockMutex", "D_glfwLockMutex"));
  mixin(bindCode("glfwUnlockMutex", "D_glfwUnlockMutex"));
  mixin(bindCode("glfwCreateCond", "D_glfwCreateCond"));
  mixin(bindCode("glfwDestroyCond", "D_glfwDestroyCond"));
  mixin(bindCode("glfwWaitCond", "D_glfwWaitCond"));
  mixin(bindCode("glfwSignalCond", "D_glfwSignalCond"));
  mixin(bindCode("glfwBroadcastCond", "D_glfwBroadcastCond"));
  mixin(bindCode("glfwGetNumberOfProcessors", "D_glfwGetNumberOfProcessors"));
  mixin(bindCode("glfwEnable", "D_glfwEnable"));
  mixin(bindCode("glfwDisable", "D_glfwDisable"));
  mixin(bindCode("glfwReadImage", "D_glfwReadImage"));
  mixin(bindCode("glfwReadMemoryImage", "D_glfwReadMemoryImage"));
  mixin(bindCode("glfwFreeImage", "D_glfwFreeImage"));
  mixin(bindCode("glfwLoadTexture2D", "D_glfwLoadTexture2D"));
  mixin(bindCode("glfwLoadMemoryTexture2D", "D_glfwLoadMemoryTexture2D"));
  mixin(bindCode("glfwLoadTextureImage2D", "D_glfwLoadTextureImage2D"));
}

//
extern(C) void function(
  SwigExceptionCallback exceptionCallback,
  SwigExceptionCallback illegalArgumentCallback,
  SwigExceptionCallback illegalElementCallback,
  SwigExceptionCallback ioCallback,
  SwigExceptionCallback noSuchElementCallback) swigRegisterExceptionCallbacks;
//

//
extern(C) void function(SwigStringCallback callback) swigRegisterStringCallback;
//


mixin template SwigOperatorDefinitions() {
  public override bool opEquals(Object o) {
    if (auto rhs = cast(typeof(this))o) {
      if (swigCPtr == rhs.swigCPtr) return true;
      static if (is(typeof(swigOpEquals(rhs)))) {
        return swigOpEquals(rhs);
      } else {
        return false; 
      }
    }
    return super.opEquals(o);
  }

  
  public override int opCmp(Object o) {
    static if (__traits(compiles, swigOpLt(typeof(this).init) &&
        swigOpEquals(typeof(this).init))) {
      if (auto rhs = cast(typeof(this))o) {
        if (swigOpLt(rhs)) {
          return -1;
        } else if (swigOpEquals(rhs)) {
          return 0;
        } else {
          return 1;
        }
      }
    }
    return super.opCmp(o);
  }

  private template swigOpBinary(string operator, string name) {
    enum swigOpBinary = `public void opOpAssign(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `Assign(rhs))) { swigOp` ~ name ~ `Assign(rhs);}` ~
      `public auto opBinary(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `(rhs))) { return swigOp` ~ name ~ `(rhs);}`;
  }
  mixin(swigOpBinary!("+", "Add"));
  mixin(swigOpBinary!("-", "Sub"));
  mixin(swigOpBinary!("*", "Mul"));
  mixin(swigOpBinary!("/", "Div"));
  mixin(swigOpBinary!("%", "Mod"));
  mixin(swigOpBinary!("&", "And"));
  mixin(swigOpBinary!("|", "Or"));
  mixin(swigOpBinary!("^", "Xor"));
  mixin(swigOpBinary!("<<", "Shl"));
  mixin(swigOpBinary!(">>", "Shr"));
  
  private template swigOpUnary(string operator, string name) {
    enum swigOpUnary = `public auto opUnary(string op)() if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `())) { return swigOp` ~ name ~ `();}`;   
  }
  mixin(swigOpUnary!("+", "Pos"));
  mixin(swigOpUnary!("-", "Neg"));
  mixin(swigOpUnary!("~", "Com"));
  mixin(swigOpUnary!("++", "Inc"));
  mixin(swigOpUnary!("--", "Dec"));


}


private class SwigExceptionHelper {
  static this() {
	// The D1/Tango version maps C++ exceptions to multiple exception types.
    swigRegisterExceptionCallbacks(
      &setException,
      &setException,
      &setException,
      &setException,
      &setException
    );
  }

  static void setException(char* message) {
    auto exception = new object.Exception(std.conv.to!string(message).idup);
    exception.next = SwigPendingException.retrieve();
    SwigPendingException.set(exception);
  }
}

package struct SwigPendingException {
public:
  static this() {
    m_sPendingCount = 0;
    m_sPendingException = null;
  }

  static bool isPending() {
    bool pending = false;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        pending = true;
      }
    }
    return pending;
  }

  static void set(object.Exception e) {
    if (m_sPendingException !is null) {
      throw new object.Exception("FATAL: An earlier pending exception from C/C++ code " ~
        "was missed and thus not thrown (" ~ m_sPendingException.classinfo.name ~
        ": " ~ m_sPendingException.msg ~ ")!", e);
    }

    m_sPendingException = e;
    synchronized {
      ++m_sPendingCount;
    }
  }

  static object.Exception retrieve() {
    object.Exception e = null;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        e = m_sPendingException;
        m_sPendingException = null;
        synchronized {
          --m_sPendingCount;
        }
      }
    }
    return e;
  }

private:
  // The pending exception counter is stored thread-global.
  static shared int m_sPendingCount;

  // The reference to the pending exception (if any) is stored thread-local.
  static object.Exception m_sPendingException;
}
alias void function(const char* message) SwigExceptionCallback;


private class SwigStringHelper {
  static this() {
    swigRegisterStringCallback(&createString);
  }

  static const(char)* createString(const(char*) cString) {
    // We are effectively dup'ing the string here.
    // TODO: Is this also correct for D2/Phobos?
    return std.string.toStringz(std.conv.to!string(cString));
  }
}
alias const(char)* function(const(char*) cString) SwigStringCallback;

extern(C) int function() NULL_get;
extern(C) int function() GLFW_VERSION_MAJOR_get;
extern(C) int function() GLFW_VERSION_MINOR_get;
extern(C) int function() GLFW_VERSION_REVISION_get;
extern(C) int function() GLFW_RELEASE_get;
extern(C) int function() GLFW_PRESS_get;
extern(C) int function() GLFW_KEY_UNKNOWN_get;
extern(C) int function() GLFW_KEY_SPACE_get;
extern(C) int function() GLFW_KEY_SPECIAL_get;
extern(C) int function() GLFW_KEY_ESC_get;
extern(C) int function() GLFW_KEY_F1_get;
extern(C) int function() GLFW_KEY_F2_get;
extern(C) int function() GLFW_KEY_F3_get;
extern(C) int function() GLFW_KEY_F4_get;
extern(C) int function() GLFW_KEY_F5_get;
extern(C) int function() GLFW_KEY_F6_get;
extern(C) int function() GLFW_KEY_F7_get;
extern(C) int function() GLFW_KEY_F8_get;
extern(C) int function() GLFW_KEY_F9_get;
extern(C) int function() GLFW_KEY_F10_get;
extern(C) int function() GLFW_KEY_F11_get;
extern(C) int function() GLFW_KEY_F12_get;
extern(C) int function() GLFW_KEY_F13_get;
extern(C) int function() GLFW_KEY_F14_get;
extern(C) int function() GLFW_KEY_F15_get;
extern(C) int function() GLFW_KEY_F16_get;
extern(C) int function() GLFW_KEY_F17_get;
extern(C) int function() GLFW_KEY_F18_get;
extern(C) int function() GLFW_KEY_F19_get;
extern(C) int function() GLFW_KEY_F20_get;
extern(C) int function() GLFW_KEY_F21_get;
extern(C) int function() GLFW_KEY_F22_get;
extern(C) int function() GLFW_KEY_F23_get;
extern(C) int function() GLFW_KEY_F24_get;
extern(C) int function() GLFW_KEY_F25_get;
extern(C) int function() GLFW_KEY_UP_get;
extern(C) int function() GLFW_KEY_DOWN_get;
extern(C) int function() GLFW_KEY_LEFT_get;
extern(C) int function() GLFW_KEY_RIGHT_get;
extern(C) int function() GLFW_KEY_LSHIFT_get;
extern(C) int function() GLFW_KEY_RSHIFT_get;
extern(C) int function() GLFW_KEY_LCTRL_get;
extern(C) int function() GLFW_KEY_RCTRL_get;
extern(C) int function() GLFW_KEY_LALT_get;
extern(C) int function() GLFW_KEY_RALT_get;
extern(C) int function() GLFW_KEY_TAB_get;
extern(C) int function() GLFW_KEY_ENTER_get;
extern(C) int function() GLFW_KEY_BACKSPACE_get;
extern(C) int function() GLFW_KEY_INSERT_get;
extern(C) int function() GLFW_KEY_DEL_get;
extern(C) int function() GLFW_KEY_PAGEUP_get;
extern(C) int function() GLFW_KEY_PAGEDOWN_get;
extern(C) int function() GLFW_KEY_HOME_get;
extern(C) int function() GLFW_KEY_END_get;
extern(C) int function() GLFW_KEY_KP_0_get;
extern(C) int function() GLFW_KEY_KP_1_get;
extern(C) int function() GLFW_KEY_KP_2_get;
extern(C) int function() GLFW_KEY_KP_3_get;
extern(C) int function() GLFW_KEY_KP_4_get;
extern(C) int function() GLFW_KEY_KP_5_get;
extern(C) int function() GLFW_KEY_KP_6_get;
extern(C) int function() GLFW_KEY_KP_7_get;
extern(C) int function() GLFW_KEY_KP_8_get;
extern(C) int function() GLFW_KEY_KP_9_get;
extern(C) int function() GLFW_KEY_KP_DIVIDE_get;
extern(C) int function() GLFW_KEY_KP_MULTIPLY_get;
extern(C) int function() GLFW_KEY_KP_SUBTRACT_get;
extern(C) int function() GLFW_KEY_KP_ADD_get;
extern(C) int function() GLFW_KEY_KP_DECIMAL_get;
extern(C) int function() GLFW_KEY_KP_EQUAL_get;
extern(C) int function() GLFW_KEY_KP_ENTER_get;
extern(C) int function() GLFW_KEY_KP_NUM_LOCK_get;
extern(C) int function() GLFW_KEY_CAPS_LOCK_get;
extern(C) int function() GLFW_KEY_SCROLL_LOCK_get;
extern(C) int function() GLFW_KEY_PAUSE_get;
extern(C) int function() GLFW_KEY_LSUPER_get;
extern(C) int function() GLFW_KEY_RSUPER_get;
extern(C) int function() GLFW_KEY_MENU_get;
extern(C) int function() GLFW_KEY_LAST_get;
extern(C) int function() GLFW_MOUSE_BUTTON_1_get;
extern(C) int function() GLFW_MOUSE_BUTTON_2_get;
extern(C) int function() GLFW_MOUSE_BUTTON_3_get;
extern(C) int function() GLFW_MOUSE_BUTTON_4_get;
extern(C) int function() GLFW_MOUSE_BUTTON_5_get;
extern(C) int function() GLFW_MOUSE_BUTTON_6_get;
extern(C) int function() GLFW_MOUSE_BUTTON_7_get;
extern(C) int function() GLFW_MOUSE_BUTTON_8_get;
extern(C) int function() GLFW_MOUSE_BUTTON_LAST_get;
extern(C) int function() GLFW_MOUSE_BUTTON_LEFT_get;
extern(C) int function() GLFW_MOUSE_BUTTON_RIGHT_get;
extern(C) int function() GLFW_MOUSE_BUTTON_MIDDLE_get;
extern(C) int function() GLFW_JOYSTICK_1_get;
extern(C) int function() GLFW_JOYSTICK_2_get;
extern(C) int function() GLFW_JOYSTICK_3_get;
extern(C) int function() GLFW_JOYSTICK_4_get;
extern(C) int function() GLFW_JOYSTICK_5_get;
extern(C) int function() GLFW_JOYSTICK_6_get;
extern(C) int function() GLFW_JOYSTICK_7_get;
extern(C) int function() GLFW_JOYSTICK_8_get;
extern(C) int function() GLFW_JOYSTICK_9_get;
extern(C) int function() GLFW_JOYSTICK_10_get;
extern(C) int function() GLFW_JOYSTICK_11_get;
extern(C) int function() GLFW_JOYSTICK_12_get;
extern(C) int function() GLFW_JOYSTICK_13_get;
extern(C) int function() GLFW_JOYSTICK_14_get;
extern(C) int function() GLFW_JOYSTICK_15_get;
extern(C) int function() GLFW_JOYSTICK_16_get;
extern(C) int function() GLFW_JOYSTICK_LAST_get;
extern(C) int function() GLFW_WINDOW_get;
extern(C) int function() GLFW_FULLSCREEN_get;
extern(C) int function() GLFW_OPENED_get;
extern(C) int function() GLFW_ACTIVE_get;
extern(C) int function() GLFW_ICONIFIED_get;
extern(C) int function() GLFW_ACCELERATED_get;
extern(C) int function() GLFW_RED_BITS_get;
extern(C) int function() GLFW_GREEN_BITS_get;
extern(C) int function() GLFW_BLUE_BITS_get;
extern(C) int function() GLFW_ALPHA_BITS_get;
extern(C) int function() GLFW_DEPTH_BITS_get;
extern(C) int function() GLFW_STENCIL_BITS_get;
extern(C) int function() GLFW_REFRESH_RATE_get;
extern(C) int function() GLFW_ACCUM_RED_BITS_get;
extern(C) int function() GLFW_ACCUM_GREEN_BITS_get;
extern(C) int function() GLFW_ACCUM_BLUE_BITS_get;
extern(C) int function() GLFW_ACCUM_ALPHA_BITS_get;
extern(C) int function() GLFW_AUX_BUFFERS_get;
extern(C) int function() GLFW_STEREO_get;
extern(C) int function() GLFW_WINDOW_NO_RESIZE_get;
extern(C) int function() GLFW_FSAA_SAMPLES_get;
extern(C) int function() GLFW_OPENGL_VERSION_MAJOR_get;
extern(C) int function() GLFW_OPENGL_VERSION_MINOR_get;
extern(C) int function() GLFW_OPENGL_FORWARD_COMPAT_get;
extern(C) int function() GLFW_OPENGL_DEBUG_CONTEXT_get;
extern(C) int function() GLFW_OPENGL_PROFILE_get;
extern(C) int function() GLFW_OPENGL_CORE_PROFILE_get;
extern(C) int function() GLFW_OPENGL_COMPAT_PROFILE_get;
extern(C) int function() GLFW_MOUSE_CURSOR_get;
extern(C) int function() GLFW_STICKY_KEYS_get;
extern(C) int function() GLFW_STICKY_MOUSE_BUTTONS_get;
extern(C) int function() GLFW_SYSTEM_KEYS_get;
extern(C) int function() GLFW_KEY_REPEAT_get;
extern(C) int function() GLFW_AUTO_POLL_EVENTS_get;
extern(C) int function() GLFW_WAIT_get;
extern(C) int function() GLFW_NOWAIT_get;
extern(C) int function() GLFW_PRESENT_get;
extern(C) int function() GLFW_AXES_get;
extern(C) int function() GLFW_BUTTONS_get;
extern(C) int function() GLFW_NO_RESCALE_BIT_get;
extern(C) int function() GLFW_ORIGIN_UL_BIT_get;
extern(C) int function() GLFW_BUILD_MIPMAPS_BIT_get;
extern(C) int function() GLFW_ALPHA_MAP_BIT_get;
extern(C) double function() GLFW_INFINITY_get;
extern(C) void function(void* jarg1, int jarg2) GLFWvidmode_Width_set;
extern(C) int function(void* jarg1) GLFWvidmode_Width_get;
extern(C) void function(void* jarg1, int jarg2) GLFWvidmode_Height_set;
extern(C) int function(void* jarg1) GLFWvidmode_Height_get;
extern(C) void function(void* jarg1, int jarg2) GLFWvidmode_RedBits_set;
extern(C) int function(void* jarg1) GLFWvidmode_RedBits_get;
extern(C) void function(void* jarg1, int jarg2) GLFWvidmode_BlueBits_set;
extern(C) int function(void* jarg1) GLFWvidmode_BlueBits_get;
extern(C) void function(void* jarg1, int jarg2) GLFWvidmode_GreenBits_set;
extern(C) int function(void* jarg1) GLFWvidmode_GreenBits_get;
extern(C) void* function() new_GLFWvidmode;
extern(C) void function(void* jarg1) delete_GLFWvidmode;
extern(C) void function(void* jarg1, int jarg2) GLFWimage_Width_set;
extern(C) int function(void* jarg1) GLFWimage_Width_get;
extern(C) void function(void* jarg1, int jarg2) GLFWimage_Height_set;
extern(C) int function(void* jarg1) GLFWimage_Height_get;
extern(C) void function(void* jarg1, int jarg2) GLFWimage_Format_set;
extern(C) int function(void* jarg1) GLFWimage_Format_get;
extern(C) void function(void* jarg1, int jarg2) GLFWimage_BytesPerPixel_set;
extern(C) int function(void* jarg1) GLFWimage_BytesPerPixel_get;
extern(C) void function(void* jarg1, void* jarg2) GLFWimage_Data_set;
extern(C) void* function(void* jarg1) GLFWimage_Data_get;
extern(C) void* function() new_GLFWimage;
extern(C) void function(void* jarg1) delete_GLFWimage;
extern(C) int function() glfwInit;
extern(C) void function() glfwTerminate;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) glfwGetVersion;
extern(C) int function(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9) glfwOpenWindow;
extern(C) void function(int jarg1, int jarg2) glfwOpenWindowHint;
extern(C) void function() glfwCloseWindow;
extern(C) void function(const(char)* jarg1) glfwSetWindowTitle;
extern(C) void function(void* jarg1, void* jarg2) glfwGetWindowSize;
extern(C) void function(int jarg1, int jarg2) glfwSetWindowSize;
extern(C) void function(int jarg1, int jarg2) glfwSetWindowPos;
extern(C) void function() glfwIconifyWindow;
extern(C) void function() glfwRestoreWindow;
extern(C) void function() glfwSwapBuffers;
extern(C) void function(int jarg1) glfwSwapInterval;
extern(C) int function(int jarg1) glfwGetWindowParam;
extern(C) void function(void* jarg1) glfwSetWindowSizeCallback;
extern(C) void function(void* jarg1) glfwSetWindowCloseCallback;
extern(C) void function(void* jarg1) glfwSetWindowRefreshCallback;
extern(C) int function(void* jarg1, int jarg2) glfwGetVideoModes;
extern(C) void function(void* jarg1) glfwGetDesktopMode;
extern(C) void function() glfwPollEvents;
extern(C) void function() glfwWaitEvents;
extern(C) int function(int jarg1) glfwGetKey;
extern(C) int function(int jarg1) glfwGetMouseButton;
extern(C) void function(void* jarg1, void* jarg2) glfwGetMousePos;
extern(C) void function(int jarg1, int jarg2) glfwSetMousePos;
extern(C) int function() glfwGetMouseWheel;
extern(C) void function(int jarg1) glfwSetMouseWheel;
extern(C) void function(void* jarg1) glfwSetKeyCallback;
extern(C) void function(void* jarg1) glfwSetCharCallback;
extern(C) void function(void* jarg1) glfwSetMouseButtonCallback;
extern(C) void function(void* jarg1) glfwSetMousePosCallback;
extern(C) void function(void* jarg1) glfwSetMouseWheelCallback;
extern(C) int function(int jarg1, int jarg2) glfwGetJoystickParam;
extern(C) int function(int jarg1, void* jarg2, int jarg3) glfwGetJoystickPos;
extern(C) int function(int jarg1, void* jarg2, int jarg3) glfwGetJoystickButtons;
extern(C) double function() glfwGetTime;
extern(C) void function(double jarg1) glfwSetTime;
extern(C) void function(double jarg1) glfwSleep;
extern(C) int function(const(char)* jarg1) glfwExtensionSupported;
extern(C) void* function(const(char)* jarg1) glfwGetProcAddress;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) glfwGetGLVersion;
extern(C) int function(void* jarg1, void* jarg2) glfwCreateThread;
extern(C) void function(int jarg1) glfwDestroyThread;
extern(C) int function(int jarg1, int jarg2) glfwWaitThread;
extern(C) int function() glfwGetThreadID;
extern(C) void* function() glfwCreateMutex;
extern(C) void function(void* jarg1) glfwDestroyMutex;
extern(C) void function(void* jarg1) glfwLockMutex;
extern(C) void function(void* jarg1) glfwUnlockMutex;
extern(C) void* function() glfwCreateCond;
extern(C) void function(void* jarg1) glfwDestroyCond;
extern(C) void function(void* jarg1, void* jarg2, double jarg3) glfwWaitCond;
extern(C) void function(void* jarg1) glfwSignalCond;
extern(C) void function(void* jarg1) glfwBroadcastCond;
extern(C) int function() glfwGetNumberOfProcessors;
extern(C) void function(int jarg1) glfwEnable;
extern(C) void function(int jarg1) glfwDisable;
extern(C) int function(const(char)* jarg1, void* jarg2, int jarg3) glfwReadImage;
extern(C) int function(void* jarg1, int jarg2, void* jarg3, int jarg4) glfwReadMemoryImage;
extern(C) void function(void* jarg1) glfwFreeImage;
extern(C) int function(const(char)* jarg1, int jarg2) glfwLoadTexture2D;
extern(C) int function(void* jarg1, int jarg2, int jarg3) glfwLoadMemoryTexture2D;
extern(C) int function(void* jarg1, int jarg2) glfwLoadTextureImage2D;
