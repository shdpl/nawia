/*
 * Copyright (C) 2010 Mariusz 'shd' Gliwi≈Ñski.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.3
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module glfw;

static import glfw_im;

static import std.conv;
static import std.string;


int NULL() @property {
  auto ret = glfw_im.NULL_get();
  return ret;
}

int GLFW_VERSION_MAJOR() @property {
  auto ret = glfw_im.GLFW_VERSION_MAJOR_get();
  return ret;
}

int GLFW_VERSION_MINOR() @property {
  auto ret = glfw_im.GLFW_VERSION_MINOR_get();
  return ret;
}

int GLFW_VERSION_REVISION() @property {
  auto ret = glfw_im.GLFW_VERSION_REVISION_get();
  return ret;
}

int GLFW_RELEASE() @property {
  auto ret = glfw_im.GLFW_RELEASE_get();
  return ret;
}

int GLFW_PRESS() @property {
  auto ret = glfw_im.GLFW_PRESS_get();
  return ret;
}

int GLFW_KEY_UNKNOWN() @property {
  auto ret = glfw_im.GLFW_KEY_UNKNOWN_get();
  return ret;
}

int GLFW_KEY_SPACE() @property {
  auto ret = glfw_im.GLFW_KEY_SPACE_get();
  return ret;
}

int GLFW_KEY_SPECIAL() @property {
  auto ret = glfw_im.GLFW_KEY_SPECIAL_get();
  return ret;
}

int GLFW_KEY_ESC() @property {
  auto ret = glfw_im.GLFW_KEY_ESC_get();
  return ret;
}

int GLFW_KEY_F1() @property {
  auto ret = glfw_im.GLFW_KEY_F1_get();
  return ret;
}

int GLFW_KEY_F2() @property {
  auto ret = glfw_im.GLFW_KEY_F2_get();
  return ret;
}

int GLFW_KEY_F3() @property {
  auto ret = glfw_im.GLFW_KEY_F3_get();
  return ret;
}

int GLFW_KEY_F4() @property {
  auto ret = glfw_im.GLFW_KEY_F4_get();
  return ret;
}

int GLFW_KEY_F5() @property {
  auto ret = glfw_im.GLFW_KEY_F5_get();
  return ret;
}

int GLFW_KEY_F6() @property {
  auto ret = glfw_im.GLFW_KEY_F6_get();
  return ret;
}

int GLFW_KEY_F7() @property {
  auto ret = glfw_im.GLFW_KEY_F7_get();
  return ret;
}

int GLFW_KEY_F8() @property {
  auto ret = glfw_im.GLFW_KEY_F8_get();
  return ret;
}

int GLFW_KEY_F9() @property {
  auto ret = glfw_im.GLFW_KEY_F9_get();
  return ret;
}

int GLFW_KEY_F10() @property {
  auto ret = glfw_im.GLFW_KEY_F10_get();
  return ret;
}

int GLFW_KEY_F11() @property {
  auto ret = glfw_im.GLFW_KEY_F11_get();
  return ret;
}

int GLFW_KEY_F12() @property {
  auto ret = glfw_im.GLFW_KEY_F12_get();
  return ret;
}

int GLFW_KEY_F13() @property {
  auto ret = glfw_im.GLFW_KEY_F13_get();
  return ret;
}

int GLFW_KEY_F14() @property {
  auto ret = glfw_im.GLFW_KEY_F14_get();
  return ret;
}

int GLFW_KEY_F15() @property {
  auto ret = glfw_im.GLFW_KEY_F15_get();
  return ret;
}

int GLFW_KEY_F16() @property {
  auto ret = glfw_im.GLFW_KEY_F16_get();
  return ret;
}

int GLFW_KEY_F17() @property {
  auto ret = glfw_im.GLFW_KEY_F17_get();
  return ret;
}

int GLFW_KEY_F18() @property {
  auto ret = glfw_im.GLFW_KEY_F18_get();
  return ret;
}

int GLFW_KEY_F19() @property {
  auto ret = glfw_im.GLFW_KEY_F19_get();
  return ret;
}

int GLFW_KEY_F20() @property {
  auto ret = glfw_im.GLFW_KEY_F20_get();
  return ret;
}

int GLFW_KEY_F21() @property {
  auto ret = glfw_im.GLFW_KEY_F21_get();
  return ret;
}

int GLFW_KEY_F22() @property {
  auto ret = glfw_im.GLFW_KEY_F22_get();
  return ret;
}

int GLFW_KEY_F23() @property {
  auto ret = glfw_im.GLFW_KEY_F23_get();
  return ret;
}

int GLFW_KEY_F24() @property {
  auto ret = glfw_im.GLFW_KEY_F24_get();
  return ret;
}

int GLFW_KEY_F25() @property {
  auto ret = glfw_im.GLFW_KEY_F25_get();
  return ret;
}

int GLFW_KEY_UP() @property {
  auto ret = glfw_im.GLFW_KEY_UP_get();
  return ret;
}

int GLFW_KEY_DOWN() @property {
  auto ret = glfw_im.GLFW_KEY_DOWN_get();
  return ret;
}

int GLFW_KEY_LEFT() @property {
  auto ret = glfw_im.GLFW_KEY_LEFT_get();
  return ret;
}

int GLFW_KEY_RIGHT() @property {
  auto ret = glfw_im.GLFW_KEY_RIGHT_get();
  return ret;
}

int GLFW_KEY_LSHIFT() @property {
  auto ret = glfw_im.GLFW_KEY_LSHIFT_get();
  return ret;
}

int GLFW_KEY_RSHIFT() @property {
  auto ret = glfw_im.GLFW_KEY_RSHIFT_get();
  return ret;
}

int GLFW_KEY_LCTRL() @property {
  auto ret = glfw_im.GLFW_KEY_LCTRL_get();
  return ret;
}

int GLFW_KEY_RCTRL() @property {
  auto ret = glfw_im.GLFW_KEY_RCTRL_get();
  return ret;
}

int GLFW_KEY_LALT() @property {
  auto ret = glfw_im.GLFW_KEY_LALT_get();
  return ret;
}

int GLFW_KEY_RALT() @property {
  auto ret = glfw_im.GLFW_KEY_RALT_get();
  return ret;
}

int GLFW_KEY_TAB() @property {
  auto ret = glfw_im.GLFW_KEY_TAB_get();
  return ret;
}

int GLFW_KEY_ENTER() @property {
  auto ret = glfw_im.GLFW_KEY_ENTER_get();
  return ret;
}

int GLFW_KEY_BACKSPACE() @property {
  auto ret = glfw_im.GLFW_KEY_BACKSPACE_get();
  return ret;
}

int GLFW_KEY_INSERT() @property {
  auto ret = glfw_im.GLFW_KEY_INSERT_get();
  return ret;
}

int GLFW_KEY_DEL() @property {
  auto ret = glfw_im.GLFW_KEY_DEL_get();
  return ret;
}

int GLFW_KEY_PAGEUP() @property {
  auto ret = glfw_im.GLFW_KEY_PAGEUP_get();
  return ret;
}

int GLFW_KEY_PAGEDOWN() @property {
  auto ret = glfw_im.GLFW_KEY_PAGEDOWN_get();
  return ret;
}

int GLFW_KEY_HOME() @property {
  auto ret = glfw_im.GLFW_KEY_HOME_get();
  return ret;
}

int GLFW_KEY_END() @property {
  auto ret = glfw_im.GLFW_KEY_END_get();
  return ret;
}

int GLFW_KEY_KP_0() @property {
  auto ret = glfw_im.GLFW_KEY_KP_0_get();
  return ret;
}

int GLFW_KEY_KP_1() @property {
  auto ret = glfw_im.GLFW_KEY_KP_1_get();
  return ret;
}

int GLFW_KEY_KP_2() @property {
  auto ret = glfw_im.GLFW_KEY_KP_2_get();
  return ret;
}

int GLFW_KEY_KP_3() @property {
  auto ret = glfw_im.GLFW_KEY_KP_3_get();
  return ret;
}

int GLFW_KEY_KP_4() @property {
  auto ret = glfw_im.GLFW_KEY_KP_4_get();
  return ret;
}

int GLFW_KEY_KP_5() @property {
  auto ret = glfw_im.GLFW_KEY_KP_5_get();
  return ret;
}

int GLFW_KEY_KP_6() @property {
  auto ret = glfw_im.GLFW_KEY_KP_6_get();
  return ret;
}

int GLFW_KEY_KP_7() @property {
  auto ret = glfw_im.GLFW_KEY_KP_7_get();
  return ret;
}

int GLFW_KEY_KP_8() @property {
  auto ret = glfw_im.GLFW_KEY_KP_8_get();
  return ret;
}

int GLFW_KEY_KP_9() @property {
  auto ret = glfw_im.GLFW_KEY_KP_9_get();
  return ret;
}

int GLFW_KEY_KP_DIVIDE() @property {
  auto ret = glfw_im.GLFW_KEY_KP_DIVIDE_get();
  return ret;
}

int GLFW_KEY_KP_MULTIPLY() @property {
  auto ret = glfw_im.GLFW_KEY_KP_MULTIPLY_get();
  return ret;
}

int GLFW_KEY_KP_SUBTRACT() @property {
  auto ret = glfw_im.GLFW_KEY_KP_SUBTRACT_get();
  return ret;
}

int GLFW_KEY_KP_ADD() @property {
  auto ret = glfw_im.GLFW_KEY_KP_ADD_get();
  return ret;
}

int GLFW_KEY_KP_DECIMAL() @property {
  auto ret = glfw_im.GLFW_KEY_KP_DECIMAL_get();
  return ret;
}

int GLFW_KEY_KP_EQUAL() @property {
  auto ret = glfw_im.GLFW_KEY_KP_EQUAL_get();
  return ret;
}

int GLFW_KEY_KP_ENTER() @property {
  auto ret = glfw_im.GLFW_KEY_KP_ENTER_get();
  return ret;
}

int GLFW_KEY_KP_NUM_LOCK() @property {
  auto ret = glfw_im.GLFW_KEY_KP_NUM_LOCK_get();
  return ret;
}

int GLFW_KEY_CAPS_LOCK() @property {
  auto ret = glfw_im.GLFW_KEY_CAPS_LOCK_get();
  return ret;
}

int GLFW_KEY_SCROLL_LOCK() @property {
  auto ret = glfw_im.GLFW_KEY_SCROLL_LOCK_get();
  return ret;
}

int GLFW_KEY_PAUSE() @property {
  auto ret = glfw_im.GLFW_KEY_PAUSE_get();
  return ret;
}

int GLFW_KEY_LSUPER() @property {
  auto ret = glfw_im.GLFW_KEY_LSUPER_get();
  return ret;
}

int GLFW_KEY_RSUPER() @property {
  auto ret = glfw_im.GLFW_KEY_RSUPER_get();
  return ret;
}

int GLFW_KEY_MENU() @property {
  auto ret = glfw_im.GLFW_KEY_MENU_get();
  return ret;
}

int GLFW_KEY_LAST() @property {
  auto ret = glfw_im.GLFW_KEY_LAST_get();
  return ret;
}

int GLFW_MOUSE_BUTTON_1() @property {
  auto ret = glfw_im.GLFW_MOUSE_BUTTON_1_get();
  return ret;
}

int GLFW_MOUSE_BUTTON_2() @property {
  auto ret = glfw_im.GLFW_MOUSE_BUTTON_2_get();
  return ret;
}

int GLFW_MOUSE_BUTTON_3() @property {
  auto ret = glfw_im.GLFW_MOUSE_BUTTON_3_get();
  return ret;
}

int GLFW_MOUSE_BUTTON_4() @property {
  auto ret = glfw_im.GLFW_MOUSE_BUTTON_4_get();
  return ret;
}

int GLFW_MOUSE_BUTTON_5() @property {
  auto ret = glfw_im.GLFW_MOUSE_BUTTON_5_get();
  return ret;
}

int GLFW_MOUSE_BUTTON_6() @property {
  auto ret = glfw_im.GLFW_MOUSE_BUTTON_6_get();
  return ret;
}

int GLFW_MOUSE_BUTTON_7() @property {
  auto ret = glfw_im.GLFW_MOUSE_BUTTON_7_get();
  return ret;
}

int GLFW_MOUSE_BUTTON_8() @property {
  auto ret = glfw_im.GLFW_MOUSE_BUTTON_8_get();
  return ret;
}

int GLFW_MOUSE_BUTTON_LAST() @property {
  auto ret = glfw_im.GLFW_MOUSE_BUTTON_LAST_get();
  return ret;
}

int GLFW_MOUSE_BUTTON_LEFT() @property {
  auto ret = glfw_im.GLFW_MOUSE_BUTTON_LEFT_get();
  return ret;
}

int GLFW_MOUSE_BUTTON_RIGHT() @property {
  auto ret = glfw_im.GLFW_MOUSE_BUTTON_RIGHT_get();
  return ret;
}

int GLFW_MOUSE_BUTTON_MIDDLE() @property {
  auto ret = glfw_im.GLFW_MOUSE_BUTTON_MIDDLE_get();
  return ret;
}

int GLFW_JOYSTICK_1() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_1_get();
  return ret;
}

int GLFW_JOYSTICK_2() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_2_get();
  return ret;
}

int GLFW_JOYSTICK_3() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_3_get();
  return ret;
}

int GLFW_JOYSTICK_4() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_4_get();
  return ret;
}

int GLFW_JOYSTICK_5() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_5_get();
  return ret;
}

int GLFW_JOYSTICK_6() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_6_get();
  return ret;
}

int GLFW_JOYSTICK_7() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_7_get();
  return ret;
}

int GLFW_JOYSTICK_8() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_8_get();
  return ret;
}

int GLFW_JOYSTICK_9() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_9_get();
  return ret;
}

int GLFW_JOYSTICK_10() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_10_get();
  return ret;
}

int GLFW_JOYSTICK_11() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_11_get();
  return ret;
}

int GLFW_JOYSTICK_12() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_12_get();
  return ret;
}

int GLFW_JOYSTICK_13() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_13_get();
  return ret;
}

int GLFW_JOYSTICK_14() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_14_get();
  return ret;
}

int GLFW_JOYSTICK_15() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_15_get();
  return ret;
}

int GLFW_JOYSTICK_16() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_16_get();
  return ret;
}

int GLFW_JOYSTICK_LAST() @property {
  auto ret = glfw_im.GLFW_JOYSTICK_LAST_get();
  return ret;
}

int GLFW_WINDOW() @property {
  auto ret = glfw_im.GLFW_WINDOW_get();
  return ret;
}

int GLFW_FULLSCREEN() @property {
  auto ret = glfw_im.GLFW_FULLSCREEN_get();
  return ret;
}

int GLFW_OPENED() @property {
  auto ret = glfw_im.GLFW_OPENED_get();
  return ret;
}

int GLFW_ACTIVE() @property {
  auto ret = glfw_im.GLFW_ACTIVE_get();
  return ret;
}

int GLFW_ICONIFIED() @property {
  auto ret = glfw_im.GLFW_ICONIFIED_get();
  return ret;
}

int GLFW_ACCELERATED() @property {
  auto ret = glfw_im.GLFW_ACCELERATED_get();
  return ret;
}

int GLFW_RED_BITS() @property {
  auto ret = glfw_im.GLFW_RED_BITS_get();
  return ret;
}

int GLFW_GREEN_BITS() @property {
  auto ret = glfw_im.GLFW_GREEN_BITS_get();
  return ret;
}

int GLFW_BLUE_BITS() @property {
  auto ret = glfw_im.GLFW_BLUE_BITS_get();
  return ret;
}

int GLFW_ALPHA_BITS() @property {
  auto ret = glfw_im.GLFW_ALPHA_BITS_get();
  return ret;
}

int GLFW_DEPTH_BITS() @property {
  auto ret = glfw_im.GLFW_DEPTH_BITS_get();
  return ret;
}

int GLFW_STENCIL_BITS() @property {
  auto ret = glfw_im.GLFW_STENCIL_BITS_get();
  return ret;
}

int GLFW_REFRESH_RATE() @property {
  auto ret = glfw_im.GLFW_REFRESH_RATE_get();
  return ret;
}

int GLFW_ACCUM_RED_BITS() @property {
  auto ret = glfw_im.GLFW_ACCUM_RED_BITS_get();
  return ret;
}

int GLFW_ACCUM_GREEN_BITS() @property {
  auto ret = glfw_im.GLFW_ACCUM_GREEN_BITS_get();
  return ret;
}

int GLFW_ACCUM_BLUE_BITS() @property {
  auto ret = glfw_im.GLFW_ACCUM_BLUE_BITS_get();
  return ret;
}

int GLFW_ACCUM_ALPHA_BITS() @property {
  auto ret = glfw_im.GLFW_ACCUM_ALPHA_BITS_get();
  return ret;
}

int GLFW_AUX_BUFFERS() @property {
  auto ret = glfw_im.GLFW_AUX_BUFFERS_get();
  return ret;
}

int GLFW_STEREO() @property {
  auto ret = glfw_im.GLFW_STEREO_get();
  return ret;
}

int GLFW_WINDOW_NO_RESIZE() @property {
  auto ret = glfw_im.GLFW_WINDOW_NO_RESIZE_get();
  return ret;
}

int GLFW_FSAA_SAMPLES() @property {
  auto ret = glfw_im.GLFW_FSAA_SAMPLES_get();
  return ret;
}

int GLFW_OPENGL_VERSION_MAJOR() @property {
  auto ret = glfw_im.GLFW_OPENGL_VERSION_MAJOR_get();
  return ret;
}

int GLFW_OPENGL_VERSION_MINOR() @property {
  auto ret = glfw_im.GLFW_OPENGL_VERSION_MINOR_get();
  return ret;
}

int GLFW_OPENGL_FORWARD_COMPAT() @property {
  auto ret = glfw_im.GLFW_OPENGL_FORWARD_COMPAT_get();
  return ret;
}

int GLFW_OPENGL_DEBUG_CONTEXT() @property {
  auto ret = glfw_im.GLFW_OPENGL_DEBUG_CONTEXT_get();
  return ret;
}

int GLFW_OPENGL_PROFILE() @property {
  auto ret = glfw_im.GLFW_OPENGL_PROFILE_get();
  return ret;
}

int GLFW_OPENGL_CORE_PROFILE() @property {
  auto ret = glfw_im.GLFW_OPENGL_CORE_PROFILE_get();
  return ret;
}

int GLFW_OPENGL_COMPAT_PROFILE() @property {
  auto ret = glfw_im.GLFW_OPENGL_COMPAT_PROFILE_get();
  return ret;
}

int GLFW_MOUSE_CURSOR() @property {
  auto ret = glfw_im.GLFW_MOUSE_CURSOR_get();
  return ret;
}

int GLFW_STICKY_KEYS() @property {
  auto ret = glfw_im.GLFW_STICKY_KEYS_get();
  return ret;
}

int GLFW_STICKY_MOUSE_BUTTONS() @property {
  auto ret = glfw_im.GLFW_STICKY_MOUSE_BUTTONS_get();
  return ret;
}

int GLFW_SYSTEM_KEYS() @property {
  auto ret = glfw_im.GLFW_SYSTEM_KEYS_get();
  return ret;
}

int GLFW_KEY_REPEAT() @property {
  auto ret = glfw_im.GLFW_KEY_REPEAT_get();
  return ret;
}

int GLFW_AUTO_POLL_EVENTS() @property {
  auto ret = glfw_im.GLFW_AUTO_POLL_EVENTS_get();
  return ret;
}

int GLFW_WAIT() @property {
  auto ret = glfw_im.GLFW_WAIT_get();
  return ret;
}

int GLFW_NOWAIT() @property {
  auto ret = glfw_im.GLFW_NOWAIT_get();
  return ret;
}

int GLFW_PRESENT() @property {
  auto ret = glfw_im.GLFW_PRESENT_get();
  return ret;
}

int GLFW_AXES() @property {
  auto ret = glfw_im.GLFW_AXES_get();
  return ret;
}

int GLFW_BUTTONS() @property {
  auto ret = glfw_im.GLFW_BUTTONS_get();
  return ret;
}

int GLFW_NO_RESCALE_BIT() @property {
  auto ret = glfw_im.GLFW_NO_RESCALE_BIT_get();
  return ret;
}

int GLFW_ORIGIN_UL_BIT() @property {
  auto ret = glfw_im.GLFW_ORIGIN_UL_BIT_get();
  return ret;
}

int GLFW_BUILD_MIPMAPS_BIT() @property {
  auto ret = glfw_im.GLFW_BUILD_MIPMAPS_BIT_get();
  return ret;
}

int GLFW_ALPHA_MAP_BIT() @property {
  auto ret = glfw_im.GLFW_ALPHA_MAP_BIT_get();
  return ret;
}

double GLFW_INFINITY() @property {
  auto ret = glfw_im.GLFW_INFINITY_get();
  return ret;
}

class GLFWvidmode {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(GLFWvidmode obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin glfw_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          glfw_im.delete_GLFWvidmode(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Width(int value) @property {
    glfw_im.GLFWvidmode_Width_set(cast(void*)swigCPtr, value);
  }

  public int Width() @property const {
    auto ret = glfw_im.GLFWvidmode_Width_get(cast(void*)swigCPtr);
    return ret;
  }

  public void Height(int value) @property {
    glfw_im.GLFWvidmode_Height_set(cast(void*)swigCPtr, value);
  }

  public int Height() @property const {
    auto ret = glfw_im.GLFWvidmode_Height_get(cast(void*)swigCPtr);
    return ret;
  }

  public void RedBits(int value) @property {
    glfw_im.GLFWvidmode_RedBits_set(cast(void*)swigCPtr, value);
  }

  public int RedBits() @property const {
    auto ret = glfw_im.GLFWvidmode_RedBits_get(cast(void*)swigCPtr);
    return ret;
  }

  public void BlueBits(int value) @property {
    glfw_im.GLFWvidmode_BlueBits_set(cast(void*)swigCPtr, value);
  }

  public int BlueBits() @property const {
    auto ret = glfw_im.GLFWvidmode_BlueBits_get(cast(void*)swigCPtr);
    return ret;
  }

  public void GreenBits(int value) @property {
    glfw_im.GLFWvidmode_GreenBits_set(cast(void*)swigCPtr, value);
  }

  public int GreenBits() @property const {
    auto ret = glfw_im.GLFWvidmode_GreenBits_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(glfw_im.new_GLFWvidmode(), true);
  }
}

class GLFWimage {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(GLFWimage obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin glfw_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          glfw_im.delete_GLFWimage(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Width(int value) @property {
    glfw_im.GLFWimage_Width_set(cast(void*)swigCPtr, value);
  }

  public int Width() @property const {
    auto ret = glfw_im.GLFWimage_Width_get(cast(void*)swigCPtr);
    return ret;
  }

  public void Height(int value) @property {
    glfw_im.GLFWimage_Height_set(cast(void*)swigCPtr, value);
  }

  public int Height() @property const {
    auto ret = glfw_im.GLFWimage_Height_get(cast(void*)swigCPtr);
    return ret;
  }

  public void Format(int value) @property {
    glfw_im.GLFWimage_Format_set(cast(void*)swigCPtr, value);
  }

  public int Format() @property const {
    auto ret = glfw_im.GLFWimage_Format_get(cast(void*)swigCPtr);
    return ret;
  }

  public void BytesPerPixel(int value) @property {
    glfw_im.GLFWimage_BytesPerPixel_set(cast(void*)swigCPtr, value);
  }

  public int BytesPerPixel() @property const {
    auto ret = glfw_im.GLFWimage_BytesPerPixel_get(cast(void*)swigCPtr);
    return ret;
  }

  public void Data(ubyte* value) @property {
    glfw_im.GLFWimage_Data_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public ubyte* Data() @property const {
    auto ret = cast(ubyte*)glfw_im.GLFWimage_Data_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(glfw_im.new_GLFWimage(), true);
  }
}

int glfwInit() {
  auto ret = glfw_im.glfwInit();
  return ret;
}

void glfwTerminate() {
  glfw_im.glfwTerminate();
}

void glfwGetVersion(int* major, int* minor, int* rev) {
  glfw_im.glfwGetVersion(cast(void*)major, cast(void*)minor, cast(void*)rev);
}

int glfwOpenWindow(int width, int height, int redbits, int greenbits, int bluebits, int alphabits, int depthbits, int stencilbits, int mode) {
  auto ret = glfw_im.glfwOpenWindow(width, height, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, mode);
  return ret;
}

void glfwOpenWindowHint(int target, int hint) {
  glfw_im.glfwOpenWindowHint(target, hint);
}

void glfwCloseWindow() {
  glfw_im.glfwCloseWindow();
}

void glfwSetWindowTitle(string title) {
  glfw_im.glfwSetWindowTitle((title ? std.string.toStringz(title) : null));
}

void glfwGetWindowSize(int* width, int* height) {
  glfw_im.glfwGetWindowSize(cast(void*)width, cast(void*)height);
}

void glfwSetWindowSize(int width, int height) {
  glfw_im.glfwSetWindowSize(width, height);
}

void glfwSetWindowPos(int x, int y) {
  glfw_im.glfwSetWindowPos(x, y);
}

void glfwIconifyWindow() {
  glfw_im.glfwIconifyWindow();
}

void glfwRestoreWindow() {
  glfw_im.glfwRestoreWindow();
}

void glfwSwapBuffers() {
  glfw_im.glfwSwapBuffers();
}

void glfwSwapInterval(int interval) {
  glfw_im.glfwSwapInterval(interval);
}

int glfwGetWindowParam(int param) {
  auto ret = glfw_im.glfwGetWindowParam(param);
  return ret;
}

void glfwSetWindowSizeCallback(void function(int, int) cbfun) {
  glfw_im.glfwSetWindowSizeCallback(cast(void*)cbfun);
}

void glfwSetWindowCloseCallback(int function() cbfun) {
  glfw_im.glfwSetWindowCloseCallback(cast(void*)cbfun);
}

void glfwSetWindowRefreshCallback(void function() cbfun) {
  glfw_im.glfwSetWindowRefreshCallback(cast(void*)cbfun);
}

int glfwGetVideoModes(GLFWvidmode list, int maxcount) {
  auto ret = glfw_im.glfwGetVideoModes(GLFWvidmode.swigGetCPtr(list), maxcount);
  return ret;
}

void glfwGetDesktopMode(GLFWvidmode mode) {
  glfw_im.glfwGetDesktopMode(GLFWvidmode.swigGetCPtr(mode));
}

void glfwPollEvents() {
  glfw_im.glfwPollEvents();
}

void glfwWaitEvents() {
  glfw_im.glfwWaitEvents();
}

int glfwGetKey(int key) {
  auto ret = glfw_im.glfwGetKey(key);
  return ret;
}

int glfwGetMouseButton(int button) {
  auto ret = glfw_im.glfwGetMouseButton(button);
  return ret;
}

void glfwGetMousePos(int* xpos, int* ypos) {
  glfw_im.glfwGetMousePos(cast(void*)xpos, cast(void*)ypos);
}

void glfwSetMousePos(int xpos, int ypos) {
  glfw_im.glfwSetMousePos(xpos, ypos);
}

int glfwGetMouseWheel() {
  auto ret = glfw_im.glfwGetMouseWheel();
  return ret;
}

void glfwSetMouseWheel(int pos) {
  glfw_im.glfwSetMouseWheel(pos);
}

void glfwSetKeyCallback(void function(int, int) cbfun) {
  glfw_im.glfwSetKeyCallback(cast(void*)cbfun);
}

void glfwSetCharCallback(void function(int, int) cbfun) {
  glfw_im.glfwSetCharCallback(cast(void*)cbfun);
}

void glfwSetMouseButtonCallback(void function(int, int) cbfun) {
  glfw_im.glfwSetMouseButtonCallback(cast(void*)cbfun);
}

void glfwSetMousePosCallback(void function(int, int) cbfun) {
  glfw_im.glfwSetMousePosCallback(cast(void*)cbfun);
}

void glfwSetMouseWheelCallback(void function(int) cbfun) {
  glfw_im.glfwSetMouseWheelCallback(cast(void*)cbfun);
}

int glfwGetJoystickParam(int joy, int param) {
  auto ret = glfw_im.glfwGetJoystickParam(joy, param);
  return ret;
}

int glfwGetJoystickPos(int joy, float* pos, int numaxes) {
  auto ret = glfw_im.glfwGetJoystickPos(joy, cast(void*)pos, numaxes);
  return ret;
}

int glfwGetJoystickButtons(int joy, ubyte* buttons, int numbuttons) {
  auto ret = glfw_im.glfwGetJoystickButtons(joy, cast(void*)buttons, numbuttons);
  return ret;
}

double glfwGetTime() {
  auto ret = glfw_im.glfwGetTime();
  return ret;
}

void glfwSetTime(double time) {
  glfw_im.glfwSetTime(time);
}

void glfwSleep(double time) {
  glfw_im.glfwSleep(time);
}

int glfwExtensionSupported(string extension) {
  auto ret = glfw_im.glfwExtensionSupported((extension ? std.string.toStringz(extension) : null));
  return ret;
}

void* glfwGetProcAddress(string procname) {
  auto ret = cast(void*)glfw_im.glfwGetProcAddress((procname ? std.string.toStringz(procname) : null));
  return ret;
}

void glfwGetGLVersion(int* major, int* minor, int* rev) {
  glfw_im.glfwGetGLVersion(cast(void*)major, cast(void*)minor, cast(void*)rev);
}

int glfwCreateThread(void function(void*) fun, void* arg) {
  auto ret = glfw_im.glfwCreateThread(cast(void*)fun, cast(void*)arg);
  return ret;
}

void glfwDestroyThread(int ID) {
  glfw_im.glfwDestroyThread(ID);
}

int glfwWaitThread(int ID, int waitmode) {
  auto ret = glfw_im.glfwWaitThread(ID, waitmode);
  return ret;
}

int glfwGetThreadID() {
  auto ret = glfw_im.glfwGetThreadID();
  return ret;
}

void* glfwCreateMutex() {
  auto ret = cast(void*)glfw_im.glfwCreateMutex();
  return ret;
}

void glfwDestroyMutex(void* mutex) {
  glfw_im.glfwDestroyMutex(cast(void*)mutex);
}

void glfwLockMutex(void* mutex) {
  glfw_im.glfwLockMutex(cast(void*)mutex);
}

void glfwUnlockMutex(void* mutex) {
  glfw_im.glfwUnlockMutex(cast(void*)mutex);
}

void* glfwCreateCond() {
  auto ret = cast(void*)glfw_im.glfwCreateCond();
  return ret;
}

void glfwDestroyCond(void* cond) {
  glfw_im.glfwDestroyCond(cast(void*)cond);
}

void glfwWaitCond(void* cond, void* mutex, double timeout) {
  glfw_im.glfwWaitCond(cast(void*)cond, cast(void*)mutex, timeout);
}

void glfwSignalCond(void* cond) {
  glfw_im.glfwSignalCond(cast(void*)cond);
}

void glfwBroadcastCond(void* cond) {
  glfw_im.glfwBroadcastCond(cast(void*)cond);
}

int glfwGetNumberOfProcessors() {
  auto ret = glfw_im.glfwGetNumberOfProcessors();
  return ret;
}

void glfwEnable(int token) {
  glfw_im.glfwEnable(token);
}

void glfwDisable(int token) {
  glfw_im.glfwDisable(token);
}

int glfwReadImage(string name, GLFWimage img, int flags) {
  auto ret = glfw_im.glfwReadImage((name ? std.string.toStringz(name) : null), GLFWimage.swigGetCPtr(img), flags);
  return ret;
}

int glfwReadMemoryImage(void* data, int size, GLFWimage img, int flags) {
  auto ret = glfw_im.glfwReadMemoryImage(cast(void*)data, size, GLFWimage.swigGetCPtr(img), flags);
  return ret;
}

void glfwFreeImage(GLFWimage img) {
  glfw_im.glfwFreeImage(GLFWimage.swigGetCPtr(img));
}

int glfwLoadTexture2D(string name, int flags) {
  auto ret = glfw_im.glfwLoadTexture2D((name ? std.string.toStringz(name) : null), flags);
  return ret;
}

int glfwLoadMemoryTexture2D(void* data, int size, int flags) {
  auto ret = glfw_im.glfwLoadMemoryTexture2D(cast(void*)data, size, flags);
  return ret;
}

int glfwLoadTextureImage2D(GLFWimage img, int flags) {
  auto ret = glfw_im.glfwLoadTextureImage2D(GLFWimage.swigGetCPtr(img), flags);
  return ret;
}
